<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_buffer_8cpp_source" xml:lang="en-US">
<title>XBuffer.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/XUtils/XBuffer.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_buffer_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_buffer_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;INCLUDES&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;region&#32;PRECOMPILATION_INCLUDES</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00031"/>00031 
<anchor xml:id="__x_buffer_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_buffer_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_buffer_8cpp_source_1l00036"/>00036 
<anchor xml:id="__x_buffer_8cpp_source_1l00037"/>00037 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#pragma&#32;region&#32;INCLUDES</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00039"/>00039 
<anchor xml:id="__x_buffer_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_buffer_8h">XBuffer.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00041"/>00041 
<anchor xml:id="__x_buffer_8cpp_source_1l00042"/>00042 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00044"/>00044 
<anchor xml:id="__x_buffer_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_factory_8h">XFactory.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00046"/>00046 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_rand_8h">XRand.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00047"/>00047 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_timer_8h">XTimer.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00048"/>00048 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_variant_8h">XVariant.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00049"/>00049 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_system_8h">XSystem.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00050"/>00050 
<anchor xml:id="__x_buffer_8cpp_source_1l00051"/>00051 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00052"/>00052 
<anchor xml:id="__x_buffer_8cpp_source_1l00053"/>00053 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00054"/>00054 
<anchor xml:id="__x_buffer_8cpp_source_1l00055"/>00055 
<anchor xml:id="__x_buffer_8cpp_source_1l00056"/>00056 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00057"/>00057 <emphasis role="preprocessor">#pragma&#32;region&#32;GENERAL_VARIABLE</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00058"/>00058 
<anchor xml:id="__x_buffer_8cpp_source_1l00059"/>00059 <emphasis role="keywordtype">bool</emphasis>&#32;XBUFFER::globalhardwareuselittleendian&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00060"/>00060 
<anchor xml:id="__x_buffer_8cpp_source_1l00061"/>00061 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00062"/>00062 
<anchor xml:id="__x_buffer_8cpp_source_1l00063"/>00063 
<anchor xml:id="__x_buffer_8cpp_source_1l00064"/>00064 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00065"/>00065 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_MEMBERS</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00066"/>00066 
<anchor xml:id="__x_buffer_8cpp_source_1l00067"/>00067 
<anchor xml:id="__x_buffer_8cpp_source_1l00077"/><link linkend="_group___x_u_t_i_l_s_1ga2e296544fb75464eee353628614b4aff">00077</link> <link linkend="_group___x_u_t_i_l_s_1ga2e296544fb75464eee353628614b4aff">XBUFFER::XBUFFER</link>(<emphasis role="keywordtype">bool</emphasis>&#32;threadsafe)
<anchor xml:id="__x_buffer_8cpp_source_1l00078"/>00078 
<anchor xml:id="__x_buffer_8cpp_source_1l00079"/>00079 {
<anchor xml:id="__x_buffer_8cpp_source_1l00080"/>00080 &#32;&#32;Clean();
<anchor xml:id="__x_buffer_8cpp_source_1l00081"/>00081 
<anchor xml:id="__x_buffer_8cpp_source_1l00082"/>00082 &#32;&#32;localhardwareuselittleendian&#32;=&#32;globalhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l00083"/>00083 
<anchor xml:id="__x_buffer_8cpp_source_1l00084"/>00084 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(threadsafe)&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;GEN_XFACTORY_CREATE(xmutex,&#32;Create_Mutex())
<anchor xml:id="__x_buffer_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00088"/>00088 }
<anchor xml:id="__x_buffer_8cpp_source_1l00089"/>00089 
<anchor xml:id="__x_buffer_8cpp_source_1l00090"/>00090 
<anchor xml:id="__x_buffer_8cpp_source_1l00101"/><link linkend="_group___x_u_t_i_l_s_1ga593dee9525f83015b2e5a1977895b26e">00101</link> <link linkend="_group___x_u_t_i_l_s_1ga2e296544fb75464eee353628614b4aff">XBUFFER::XBUFFER</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;threadsafe)
<anchor xml:id="__x_buffer_8cpp_source_1l00102"/>00102 {
<anchor xml:id="__x_buffer_8cpp_source_1l00103"/>00103 &#32;&#32;Clean();
<anchor xml:id="__x_buffer_8cpp_source_1l00104"/>00104 
<anchor xml:id="__x_buffer_8cpp_source_1l00105"/>00105 &#32;&#32;localhardwareuselittleendian&#32;=&#32;globalhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l00106"/>00106 
<anchor xml:id="__x_buffer_8cpp_source_1l00107"/>00107 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(threadsafe)&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;GEN_XFACTORY_CREATE(xmutex,&#32;Create_Mutex())
<anchor xml:id="__x_buffer_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00111"/>00111 
<anchor xml:id="__x_buffer_8cpp_source_1l00112"/>00112 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1gacf69e379f1d0bf812ae9c1157eac172c">Resize</link>(size);
<anchor xml:id="__x_buffer_8cpp_source_1l00113"/>00113 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga8a6897988fdcf361b48b20497933d911">FillBuffer</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l00114"/>00114 }
<anchor xml:id="__x_buffer_8cpp_source_1l00115"/>00115 
<anchor xml:id="__x_buffer_8cpp_source_1l00116"/>00116 
<anchor xml:id="__x_buffer_8cpp_source_1l00126"/><link linkend="_group___x_u_t_i_l_s_1ga021869d26912c285eeb06585ef2a7432">00126</link> <link linkend="_group___x_u_t_i_l_s_1ga2e296544fb75464eee353628614b4aff">XBUFFER::XBUFFER</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer)
<anchor xml:id="__x_buffer_8cpp_source_1l00127"/>00127 {
<anchor xml:id="__x_buffer_8cpp_source_1l00128"/>00128 &#32;&#32;Clean();
<anchor xml:id="__x_buffer_8cpp_source_1l00129"/>00129 
<anchor xml:id="__x_buffer_8cpp_source_1l00130"/>00130 &#32;&#32;localhardwareuselittleendian&#32;=&#32;globalhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l00131"/>00131 
<anchor xml:id="__x_buffer_8cpp_source_1l00132"/>00132 &#32;&#32;GEN_XFACTORY_CREATE(xmutex,&#32;Create_Mutex())
<anchor xml:id="__x_buffer_8cpp_source_1l00133"/>00133 
<anchor xml:id="__x_buffer_8cpp_source_1l00134"/>00134 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1gafc53f10185dc4d03cb99dfa959de19d1">CopyFrom</link>((<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;)xbuffer);
<anchor xml:id="__x_buffer_8cpp_source_1l00135"/>00135 }
<anchor xml:id="__x_buffer_8cpp_source_1l00136"/>00136 
<anchor xml:id="__x_buffer_8cpp_source_1l00137"/>00137 
<anchor xml:id="__x_buffer_8cpp_source_1l00145"/><link linkend="_group___x_u_t_i_l_s_1ga27254972c15da655bc2b20a47f267d33">00145</link> <link linkend="_group___x_u_t_i_l_s_1ga27254972c15da655bc2b20a47f267d33">XBUFFER::~XBUFFER</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l00146"/>00146 {
<anchor xml:id="__x_buffer_8cpp_source_1l00147"/>00147 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga0395231705663a2aeeee3b4be9d292bb">Delete</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l00148"/>00148 
<anchor xml:id="__x_buffer_8cpp_source_1l00149"/>00149 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(xmutex)&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;GEN_XFACTORY.Delete_Mutex(xmutex);
<anchor xml:id="__x_buffer_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00153"/>00153 
<anchor xml:id="__x_buffer_8cpp_source_1l00154"/>00154 &#32;&#32;Clean();
<anchor xml:id="__x_buffer_8cpp_source_1l00155"/>00155 }
<anchor xml:id="__x_buffer_8cpp_source_1l00156"/>00156 
<anchor xml:id="__x_buffer_8cpp_source_1l00157"/>00157 
<anchor xml:id="__x_buffer_8cpp_source_1l00167"/><link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">00167</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">XBUFFER::GetSize</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l00168"/>00168 {
<anchor xml:id="__x_buffer_8cpp_source_1l00169"/>00169 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00170"/>00170 
<anchor xml:id="__x_buffer_8cpp_source_1l00171"/>00171 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;rsize&#32;=&#32;size;
<anchor xml:id="__x_buffer_8cpp_source_1l00172"/>00172 
<anchor xml:id="__x_buffer_8cpp_source_1l00173"/>00173 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00174"/>00174 
<anchor xml:id="__x_buffer_8cpp_source_1l00175"/>00175 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rsize;
<anchor xml:id="__x_buffer_8cpp_source_1l00176"/>00176 }
<anchor xml:id="__x_buffer_8cpp_source_1l00177"/>00177 
<anchor xml:id="__x_buffer_8cpp_source_1l00178"/>00178 
<anchor xml:id="__x_buffer_8cpp_source_1l00190"/><link linkend="_group___x_u_t_i_l_s_1ga6bd4541f3a87cb76a2261817538d0edc">00190</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga6bd4541f3a87cb76a2261817538d0edc">XBUFFER::SetSize</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__x_buffer_8cpp_source_1l00191"/>00191 {
<anchor xml:id="__x_buffer_8cpp_source_1l00192"/>00192 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00193"/>00193 
<anchor xml:id="__x_buffer_8cpp_source_1l00194"/>00194 &#32;&#32;this-&gt;size&#32;=&#32;size;
<anchor xml:id="__x_buffer_8cpp_source_1l00195"/>00195 
<anchor xml:id="__x_buffer_8cpp_source_1l00196"/>00196 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00197"/>00197 
<anchor xml:id="__x_buffer_8cpp_source_1l00198"/>00198 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00199"/>00199 }
<anchor xml:id="__x_buffer_8cpp_source_1l00200"/>00200 
<anchor xml:id="__x_buffer_8cpp_source_1l00201"/>00201 
<anchor xml:id="__x_buffer_8cpp_source_1l00211"/><link linkend="_group___x_u_t_i_l_s_1ga0007f465be1385ea663397e502c5280e">00211</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga0007f465be1385ea663397e502c5280e">XBUFFER::IsEmpty</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l00212"/>00212 {
<anchor xml:id="__x_buffer_8cpp_source_1l00213"/>00213 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>())?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00214"/>00214 }
<anchor xml:id="__x_buffer_8cpp_source_1l00215"/>00215 
<anchor xml:id="__x_buffer_8cpp_source_1l00216"/>00216 
<anchor xml:id="__x_buffer_8cpp_source_1l00224"/><link linkend="_group___x_u_t_i_l_s_1gacbb14d5aac8e81471ed2119e3dff2eca">00224</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gacbb14d5aac8e81471ed2119e3dff2eca">XBUFFER::ResetPosition</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l00225"/>00225 {
<anchor xml:id="__x_buffer_8cpp_source_1l00226"/>00226 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1gacff899b0385a3d04c1a26d463647ab07">SetPosition</link>(0);
<anchor xml:id="__x_buffer_8cpp_source_1l00227"/>00227 }
<anchor xml:id="__x_buffer_8cpp_source_1l00228"/>00228 
<anchor xml:id="__x_buffer_8cpp_source_1l00229"/>00229 
<anchor xml:id="__x_buffer_8cpp_source_1l00239"/><link linkend="_group___x_u_t_i_l_s_1ga2cea18563b3d0b687377f101ca1b42be">00239</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2cea18563b3d0b687377f101ca1b42be">XBUFFER::GetPosition</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l00240"/>00240 {
<anchor xml:id="__x_buffer_8cpp_source_1l00241"/>00241 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l00242"/>00242 }
<anchor xml:id="__x_buffer_8cpp_source_1l00243"/>00243 
<anchor xml:id="__x_buffer_8cpp_source_1l00244"/>00244 
<anchor xml:id="__x_buffer_8cpp_source_1l00256"/><link linkend="_group___x_u_t_i_l_s_1gacff899b0385a3d04c1a26d463647ab07">00256</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gacff899b0385a3d04c1a26d463647ab07">XBUFFER::SetPosition</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;position)
<anchor xml:id="__x_buffer_8cpp_source_1l00257"/>00257 {
<anchor xml:id="__x_buffer_8cpp_source_1l00258"/>00258 &#32;&#32;this-&gt;position&#32;=&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l00259"/>00259 
<anchor xml:id="__x_buffer_8cpp_source_1l00260"/>00260 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00261"/>00261 }
<anchor xml:id="__x_buffer_8cpp_source_1l00262"/>00262 
<anchor xml:id="__x_buffer_8cpp_source_1l00263"/>00263 
<anchor xml:id="__x_buffer_8cpp_source_1l00273"/><link linkend="_group___x_u_t_i_l_s_1ga7d9dd02f575c660481921bfcb3e11f21">00273</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga7d9dd02f575c660481921bfcb3e11f21">XBUFFER::IsBlocked</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l00274"/>00274 {
<anchor xml:id="__x_buffer_8cpp_source_1l00275"/>00275 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xmutex)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00276"/>00276 
<anchor xml:id="__x_buffer_8cpp_source_1l00277"/>00277 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xmutex-&gt;<link linkend="_group___x_u_t_i_l_s_1ga2573cc960a3ba8350e8bb61aa922f977">IsLock</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l00278"/>00278 }
<anchor xml:id="__x_buffer_8cpp_source_1l00279"/>00279 
<anchor xml:id="__x_buffer_8cpp_source_1l00280"/>00280 
<anchor xml:id="__x_buffer_8cpp_source_1l00292"/><link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">00292</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">XBUFFER::SetBlocked</link>(<emphasis role="keywordtype">bool</emphasis>&#32;blocked)
<anchor xml:id="__x_buffer_8cpp_source_1l00293"/>00293 {
<anchor xml:id="__x_buffer_8cpp_source_1l00294"/>00294 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xmutex)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00295"/>00295 
<anchor xml:id="__x_buffer_8cpp_source_1l00296"/>00296 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(blocked)?xmutex-&gt;<link linkend="_group___x_u_t_i_l_s_1gae6d5410f1787702c59c2eae9e8b85b74">Lock</link>():xmutex-&gt;<link linkend="_group___x_u_t_i_l_s_1gafed160c15de8de926a73f4ce978f0bc0">UnLock</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l00297"/>00297 }
<anchor xml:id="__x_buffer_8cpp_source_1l00298"/>00298 
<anchor xml:id="__x_buffer_8cpp_source_1l00299"/>00299 
<anchor xml:id="__x_buffer_8cpp_source_1l00312"/><link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">00312</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;pbuffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize)
<anchor xml:id="__x_buffer_8cpp_source_1l00313"/>00313 {
<anchor xml:id="__x_buffer_8cpp_source_1l00314"/>00314 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!pbuffer)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00315"/>00315 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!psize)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00316"/>00316 
<anchor xml:id="__x_buffer_8cpp_source_1l00317"/>00317 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00318"/>00318 
<anchor xml:id="__x_buffer_8cpp_source_1l00319"/>00319 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos&#32;&#32;&#32;&#32;&#32;=&#32;size;
<anchor xml:id="__x_buffer_8cpp_source_1l00320"/>00320 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;status&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00321"/>00321 
<anchor xml:id="__x_buffer_8cpp_source_1l00322"/>00322 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_group___x_u_t_i_l_s_1gacf69e379f1d0bf812ae9c1157eac172c">Resize</link>(size+psize,<emphasis role="keyword">false</emphasis>))
<anchor xml:id="__x_buffer_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00327"/>00327 
<anchor xml:id="__x_buffer_8cpp_source_1l00328"/>00328 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(buffer&#32;&amp;&amp;&#32;(size+psize))
<anchor xml:id="__x_buffer_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&amp;buffer[ppos],&#32;pbuffer,&#32;psize);
<anchor xml:id="__x_buffer_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;status&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00331"/>00331 
<anchor xml:id="__x_buffer_8cpp_source_1l00332"/>00332 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00333"/>00333 
<anchor xml:id="__x_buffer_8cpp_source_1l00334"/>00334 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l00335"/>00335 }
<anchor xml:id="__x_buffer_8cpp_source_1l00336"/>00336 
<anchor xml:id="__x_buffer_8cpp_source_1l00337"/>00337 
<anchor xml:id="__x_buffer_8cpp_source_1l00349"/><link linkend="_group___x_u_t_i_l_s_1ga784c3f22a2c5a4d5b7b305fdb9b038b4">00349</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>*&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l00350"/>00350 {
<anchor xml:id="__x_buffer_8cpp_source_1l00351"/>00351 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(buffer-&gt;buffer,&#32;buffer-&gt;size);
<anchor xml:id="__x_buffer_8cpp_source_1l00352"/>00352 }
<anchor xml:id="__x_buffer_8cpp_source_1l00353"/>00353 
<anchor xml:id="__x_buffer_8cpp_source_1l00354"/>00354 
<anchor xml:id="__x_buffer_8cpp_source_1l00366"/><link linkend="_group___x_u_t_i_l_s_1ga62d933a7751ca6a851d06eef99531988">00366</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l00367"/>00367 {
<anchor xml:id="__x_buffer_8cpp_source_1l00368"/>00368 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(buffer.buffer,&#32;buffer.size);
<anchor xml:id="__x_buffer_8cpp_source_1l00369"/>00369 }
<anchor xml:id="__x_buffer_8cpp_source_1l00370"/>00370 
<anchor xml:id="__x_buffer_8cpp_source_1l00371"/>00371 
<anchor xml:id="__x_buffer_8cpp_source_1l00383"/><link linkend="_group___x_u_t_i_l_s_1ga6bc25e337eef54e48380456e4ac4dbaa">00383</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00384"/>00384 {
<anchor xml:id="__x_buffer_8cpp_source_1l00385"/>00385 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00386"/>00386 }
<anchor xml:id="__x_buffer_8cpp_source_1l00387"/>00387 
<anchor xml:id="__x_buffer_8cpp_source_1l00388"/>00388 
<anchor xml:id="__x_buffer_8cpp_source_1l00400"/><link linkend="_group___x_u_t_i_l_s_1ga63d29280cdee8af10624ce2a11495728">00400</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<emphasis role="keywordtype">bool</emphasis>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00401"/>00401 {
<anchor xml:id="__x_buffer_8cpp_source_1l00402"/>00402 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;_data&#32;=&#32;data?1:0;
<anchor xml:id="__x_buffer_8cpp_source_1l00403"/>00403 
<anchor xml:id="__x_buffer_8cpp_source_1l00404"/>00404 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;_data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00405"/>00405 }
<anchor xml:id="__x_buffer_8cpp_source_1l00406"/>00406 
<anchor xml:id="__x_buffer_8cpp_source_1l00407"/>00407 
<anchor xml:id="__x_buffer_8cpp_source_1l00419"/><link linkend="_group___x_u_t_i_l_s_1ga182e445d8aa4f7deb1cfc398855a60a3">00419</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00420"/>00420 {
<anchor xml:id="__x_buffer_8cpp_source_1l00421"/>00421 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1afacb625223a89d4cdf212ac4482a7e5c">SWAPWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00422"/>00422 
<anchor xml:id="__x_buffer_8cpp_source_1l00423"/>00423 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00424"/>00424 }
<anchor xml:id="__x_buffer_8cpp_source_1l00425"/>00425 
<anchor xml:id="__x_buffer_8cpp_source_1l00426"/>00426 
<anchor xml:id="__x_buffer_8cpp_source_1l00438"/><link linkend="_group___x_u_t_i_l_s_1gac5af0640709a45111cebe0ac4cd4b2e5">00438</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00439"/>00439 {
<anchor xml:id="__x_buffer_8cpp_source_1l00440"/>00440 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00441"/>00441 
<anchor xml:id="__x_buffer_8cpp_source_1l00442"/>00442 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00443"/>00443 }
<anchor xml:id="__x_buffer_8cpp_source_1l00444"/>00444 
<anchor xml:id="__x_buffer_8cpp_source_1l00445"/>00445 
<anchor xml:id="__x_buffer_8cpp_source_1l00457"/><link linkend="_group___x_u_t_i_l_s_1ga3ad0be944171dbf438a00caeedf74b4a">00457</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00458"/>00458 {
<anchor xml:id="__x_buffer_8cpp_source_1l00459"/>00459 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a0a01412990f8f070e16468914d231b68">SWAPQWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00460"/>00460 
<anchor xml:id="__x_buffer_8cpp_source_1l00461"/>00461 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00462"/>00462 }
<anchor xml:id="__x_buffer_8cpp_source_1l00463"/>00463 
<anchor xml:id="__x_buffer_8cpp_source_1l00464"/>00464 
<anchor xml:id="__x_buffer_8cpp_source_1l00476"/><link linkend="_group___x_u_t_i_l_s_1gab262090c9eb2d339ddf3f1a3d7c4051e">00476</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<emphasis role="keywordtype">float</emphasis>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00477"/>00477 {
<anchor xml:id="__x_buffer_8cpp_source_1l00478"/>00478 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00479"/>00479 }
<anchor xml:id="__x_buffer_8cpp_source_1l00480"/>00480 
<anchor xml:id="__x_buffer_8cpp_source_1l00481"/>00481 
<anchor xml:id="__x_buffer_8cpp_source_1l00493"/><link linkend="_group___x_u_t_i_l_s_1gadaff3ce4c6e8f32495cd231a978e4e4f">00493</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<emphasis role="keywordtype">double</emphasis>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00494"/>00494 {
<anchor xml:id="__x_buffer_8cpp_source_1l00495"/>00495 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00496"/>00496 }
<anchor xml:id="__x_buffer_8cpp_source_1l00497"/>00497 
<anchor xml:id="__x_buffer_8cpp_source_1l00498"/>00498 
<anchor xml:id="__x_buffer_8cpp_source_1l00511"/><link linkend="_group___x_u_t_i_l_s_1ga2afb66fc806929b80c258ef855191a16">00511</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;<emphasis role="keywordtype">string</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize)
<anchor xml:id="__x_buffer_8cpp_source_1l00512"/>00512 {
<anchor xml:id="__x_buffer_8cpp_source_1l00513"/>00513 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keywordtype">string</emphasis>.<link linkend="_group___x_u_t_i_l_s_1ga0007f465be1385ea663397e502c5280e">IsEmpty</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00514"/>00514 
<anchor xml:id="__x_buffer_8cpp_source_1l00515"/>00515 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=0;&#32;c&lt;<emphasis role="keywordtype">string</emphasis>.GetSize();&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l00516"/>00516 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(normalize)
<anchor xml:id="__x_buffer_8cpp_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;data&#32;=&#32;(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>)<emphasis role="keywordtype">string</emphasis>.<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[c];
<anchor xml:id="__x_buffer_8cpp_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1afacb625223a89d4cdf212ac4482a7e5c">SWAPWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>)data);
<anchor xml:id="__x_buffer_8cpp_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data&#32;=&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)<emphasis role="keywordtype">string</emphasis>.<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[c];
<anchor xml:id="__x_buffer_8cpp_source_1l00526"/>00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)data);
<anchor xml:id="__x_buffer_8cpp_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00529"/>00529 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00530"/>00530 
<anchor xml:id="__x_buffer_8cpp_source_1l00531"/>00531 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00532"/>00532 }
<anchor xml:id="__x_buffer_8cpp_source_1l00533"/>00533 
<anchor xml:id="__x_buffer_8cpp_source_1l00534"/>00534 
<anchor xml:id="__x_buffer_8cpp_source_1l00547"/><link linkend="_group___x_u_t_i_l_s_1gadb2e70fef4ba8f4f3a5be9d0b8b9a380">00547</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gadb2e70fef4ba8f4f3a5be9d0b8b9a380">XBUFFER::AddWithMaskArg</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l00548"/>00548 {
<anchor xml:id="__x_buffer_8cpp_source_1l00549"/>00549 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;AddXBufferWithMask((*<emphasis role="keyword">this</emphasis>),&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00550"/>00550 }
<anchor xml:id="__x_buffer_8cpp_source_1l00551"/>00551 
<anchor xml:id="__x_buffer_8cpp_source_1l00552"/>00552 
<anchor xml:id="__x_buffer_8cpp_source_1l00565"/><link linkend="_group___x_u_t_i_l_s_1ga1f324254b8d5626f73387f2d8fbdb6db">00565</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gadb2e70fef4ba8f4f3a5be9d0b8b9a380">XBUFFER::AddWithMaskArg</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l00566"/>00566 {
<anchor xml:id="__x_buffer_8cpp_source_1l00567"/>00567 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;AddXBufferWithMask((*<emphasis role="keyword">this</emphasis>),&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00568"/>00568 }
<anchor xml:id="__x_buffer_8cpp_source_1l00569"/>00569 
<anchor xml:id="__x_buffer_8cpp_source_1l00570"/>00570 
<anchor xml:id="__x_buffer_8cpp_source_1l00583"/><link linkend="_group___x_u_t_i_l_s_1ga3d876a464cae64521ca8185d7685e511">00583</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga3d876a464cae64521ca8185d7685e511">XBUFFER::AddWithMask</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l00584"/>00584 {
<anchor xml:id="__x_buffer_8cpp_source_1l00585"/>00585 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00586"/>00586 
<anchor xml:id="__x_buffer_8cpp_source_1l00587"/>00587 &#32;&#32;va_list&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l00588"/>00588 
<anchor xml:id="__x_buffer_8cpp_source_1l00589"/>00589 &#32;&#32;va_start(arg,&#32;mask);
<anchor xml:id="__x_buffer_8cpp_source_1l00590"/>00590 
<anchor xml:id="__x_buffer_8cpp_source_1l00591"/>00591 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;AddXBufferWithMask((*<emphasis role="keyword">this</emphasis>),&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00592"/>00592 
<anchor xml:id="__x_buffer_8cpp_source_1l00593"/>00593 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00594"/>00594 
<anchor xml:id="__x_buffer_8cpp_source_1l00595"/>00595 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l00596"/>00596 }
<anchor xml:id="__x_buffer_8cpp_source_1l00597"/>00597 
<anchor xml:id="__x_buffer_8cpp_source_1l00598"/>00598 
<anchor xml:id="__x_buffer_8cpp_source_1l00611"/><link linkend="_group___x_u_t_i_l_s_1ga47d424a2632df7a89182695cab11e969">00611</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga3d876a464cae64521ca8185d7685e511">XBUFFER::AddWithMask</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l00612"/>00612 {
<anchor xml:id="__x_buffer_8cpp_source_1l00613"/>00613 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00614"/>00614 
<anchor xml:id="__x_buffer_8cpp_source_1l00615"/>00615 &#32;&#32;va_list&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l00616"/>00616 
<anchor xml:id="__x_buffer_8cpp_source_1l00617"/>00617 &#32;&#32;va_start(arg,&#32;mask);
<anchor xml:id="__x_buffer_8cpp_source_1l00618"/>00618 
<anchor xml:id="__x_buffer_8cpp_source_1l00619"/>00619 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;AddXBufferWithMask((*<emphasis role="keyword">this</emphasis>),&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00620"/>00620 
<anchor xml:id="__x_buffer_8cpp_source_1l00621"/>00621 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00622"/>00622 
<anchor xml:id="__x_buffer_8cpp_source_1l00623"/>00623 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l00624"/>00624 }
<anchor xml:id="__x_buffer_8cpp_source_1l00625"/>00625 
<anchor xml:id="__x_buffer_8cpp_source_1l00626"/>00626 
<anchor xml:id="__x_buffer_8cpp_source_1l00640"/><link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">00640</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;pbuffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00641"/>00641 {
<anchor xml:id="__x_buffer_8cpp_source_1l00642"/>00642 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!pbuffer)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00643"/>00643 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!psize)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00644"/>00644 
<anchor xml:id="__x_buffer_8cpp_source_1l00645"/>00645 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&#32;&lt;&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00646"/>00646 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&#32;&gt;=&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00647"/>00647 
<anchor xml:id="__x_buffer_8cpp_source_1l00648"/>00648 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbuffertempo;
<anchor xml:id="__x_buffer_8cpp_source_1l00649"/>00649 
<anchor xml:id="__x_buffer_8cpp_source_1l00650"/>00650 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos)&#32;xbuffertempo.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00651"/>00651 
<anchor xml:id="__x_buffer_8cpp_source_1l00652"/>00652 &#32;&#32;xbuffertempo.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(pbuffer,&#32;psize);
<anchor xml:id="__x_buffer_8cpp_source_1l00653"/>00653 &#32;&#32;xbuffertempo.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(&amp;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[frompos],&#32;(<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>()-frompos));
<anchor xml:id="__x_buffer_8cpp_source_1l00654"/>00654 
<anchor xml:id="__x_buffer_8cpp_source_1l00655"/>00655 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga3c14ba0ca9dfbf20b5127c87b275cb93">Empty</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l00656"/>00656 
<anchor xml:id="__x_buffer_8cpp_source_1l00657"/>00657 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(xbuffertempo);
<anchor xml:id="__x_buffer_8cpp_source_1l00658"/>00658 
<anchor xml:id="__x_buffer_8cpp_source_1l00659"/>00659 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00660"/>00660 }
<anchor xml:id="__x_buffer_8cpp_source_1l00661"/>00661 
<anchor xml:id="__x_buffer_8cpp_source_1l00662"/>00662 
<anchor xml:id="__x_buffer_8cpp_source_1l00675"/><link linkend="_group___x_u_t_i_l_s_1ga0c27862280b086d0fd1c549e5eab11b9">00675</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>*&#32;xbuffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00676"/>00676 {
<anchor xml:id="__x_buffer_8cpp_source_1l00677"/>00677 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xbuffer)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00678"/>00678 
<anchor xml:id="__x_buffer_8cpp_source_1l00679"/>00679 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">Insert</link>(xbuffer-&gt;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;xbuffer-&gt;<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>(),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00680"/>00680 }
<anchor xml:id="__x_buffer_8cpp_source_1l00681"/>00681 
<anchor xml:id="__x_buffer_8cpp_source_1l00682"/>00682 
<anchor xml:id="__x_buffer_8cpp_source_1l00695"/><link linkend="_group___x_u_t_i_l_s_1ga31d2deb2159cf4a5c727c78f8ffe0457">00695</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00696"/>00696 {
<anchor xml:id="__x_buffer_8cpp_source_1l00697"/>00697 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">Insert</link>(xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>(),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00698"/>00698 }
<anchor xml:id="__x_buffer_8cpp_source_1l00699"/>00699 
<anchor xml:id="__x_buffer_8cpp_source_1l00700"/>00700 
<anchor xml:id="__x_buffer_8cpp_source_1l00713"/><link linkend="_group___x_u_t_i_l_s_1gacfd41051801472e3835598837da9765f">00713</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00714"/>00714 {
<anchor xml:id="__x_buffer_8cpp_source_1l00715"/>00715 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">Insert</link>(&amp;data,&#32;1,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00716"/>00716 }
<anchor xml:id="__x_buffer_8cpp_source_1l00717"/>00717 
<anchor xml:id="__x_buffer_8cpp_source_1l00718"/>00718 
<anchor xml:id="__x_buffer_8cpp_source_1l00731"/><link linkend="_group___x_u_t_i_l_s_1ga12942ad32627cde4cc996d23f0ed24c6">00731</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<emphasis role="keywordtype">bool</emphasis>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00732"/>00732 {
<anchor xml:id="__x_buffer_8cpp_source_1l00733"/>00733 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;_data&#32;=&#32;data?1:0;
<anchor xml:id="__x_buffer_8cpp_source_1l00734"/>00734 
<anchor xml:id="__x_buffer_8cpp_source_1l00735"/>00735 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">Insert</link>(&amp;_data,&#32;1,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00736"/>00736 }
<anchor xml:id="__x_buffer_8cpp_source_1l00737"/>00737 
<anchor xml:id="__x_buffer_8cpp_source_1l00738"/>00738 
<anchor xml:id="__x_buffer_8cpp_source_1l00751"/><link linkend="_group___x_u_t_i_l_s_1ga39b556bf6d20c48257ab56ab1dab7aff">00751</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00752"/>00752 {
<anchor xml:id="__x_buffer_8cpp_source_1l00753"/>00753 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1afacb625223a89d4cdf212ac4482a7e5c">SWAPWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00754"/>00754 
<anchor xml:id="__x_buffer_8cpp_source_1l00755"/>00755 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">Insert</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00756"/>00756 }
<anchor xml:id="__x_buffer_8cpp_source_1l00757"/>00757 
<anchor xml:id="__x_buffer_8cpp_source_1l00758"/>00758 
<anchor xml:id="__x_buffer_8cpp_source_1l00771"/><link linkend="_group___x_u_t_i_l_s_1ga8a39e753d3dc1d73c9fbf002e8f73612">00771</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00772"/>00772 {
<anchor xml:id="__x_buffer_8cpp_source_1l00773"/>00773 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00774"/>00774 
<anchor xml:id="__x_buffer_8cpp_source_1l00775"/>00775 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">Insert</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00776"/>00776 }
<anchor xml:id="__x_buffer_8cpp_source_1l00777"/>00777 
<anchor xml:id="__x_buffer_8cpp_source_1l00778"/>00778 
<anchor xml:id="__x_buffer_8cpp_source_1l00791"/><link linkend="_group___x_u_t_i_l_s_1ga7be23879ba113109e0fdfa21355367c2">00791</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00792"/>00792 {
<anchor xml:id="__x_buffer_8cpp_source_1l00793"/>00793 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a0a01412990f8f070e16468914d231b68">SWAPQWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00794"/>00794 
<anchor xml:id="__x_buffer_8cpp_source_1l00795"/>00795 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">Insert</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00796"/>00796 }
<anchor xml:id="__x_buffer_8cpp_source_1l00797"/>00797 
<anchor xml:id="__x_buffer_8cpp_source_1l00798"/>00798 
<anchor xml:id="__x_buffer_8cpp_source_1l00811"/><link linkend="_group___x_u_t_i_l_s_1gac5b27b3ade2ac625cbfe8f7a5f839837">00811</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<emphasis role="keywordtype">float</emphasis>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00812"/>00812 {
<anchor xml:id="__x_buffer_8cpp_source_1l00813"/>00813 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">Insert</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00814"/>00814 }
<anchor xml:id="__x_buffer_8cpp_source_1l00815"/>00815 
<anchor xml:id="__x_buffer_8cpp_source_1l00816"/>00816 
<anchor xml:id="__x_buffer_8cpp_source_1l00829"/><link linkend="_group___x_u_t_i_l_s_1ga93f977006651799f559ccd24ffb32f5d">00829</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<emphasis role="keywordtype">double</emphasis>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00830"/>00830 {
<anchor xml:id="__x_buffer_8cpp_source_1l00831"/>00831 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">Insert</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00832"/>00832 }
<anchor xml:id="__x_buffer_8cpp_source_1l00833"/>00833 
<anchor xml:id="__x_buffer_8cpp_source_1l00834"/>00834 
<anchor xml:id="__x_buffer_8cpp_source_1l00847"/><link linkend="_group___x_u_t_i_l_s_1ga2a0ca254e59e5759a4120ca1807880a5">00847</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;<emphasis role="keywordtype">string</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00848"/>00848 {
<anchor xml:id="__x_buffer_8cpp_source_1l00849"/>00849 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keywordtype">string</emphasis>.<link linkend="_group___x_u_t_i_l_s_1ga0007f465be1385ea663397e502c5280e">IsEmpty</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00850"/>00850 
<anchor xml:id="__x_buffer_8cpp_source_1l00851"/>00851 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=0;&#32;c&lt;<emphasis role="keywordtype">string</emphasis>.GetSize();&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l00852"/>00852 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00853"/>00853 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data&#32;=&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)<emphasis role="keywordtype">string</emphasis>.<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[c];
<anchor xml:id="__x_buffer_8cpp_source_1l00854"/>00854 
<anchor xml:id="__x_buffer_8cpp_source_1l00855"/>00855 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00856"/>00856 
<anchor xml:id="__x_buffer_8cpp_source_1l00857"/>00857 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">Insert</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)data,&#32;frompos+c);
<anchor xml:id="__x_buffer_8cpp_source_1l00858"/>00858 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00859"/>00859 
<anchor xml:id="__x_buffer_8cpp_source_1l00860"/>00860 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00861"/>00861 }
<anchor xml:id="__x_buffer_8cpp_source_1l00862"/>00862 
<anchor xml:id="__x_buffer_8cpp_source_1l00863"/>00863 
<anchor xml:id="__x_buffer_8cpp_source_1l00877"/><link linkend="_group___x_u_t_i_l_s_1ga4b7f85c6b1834d9997a6d29553c7c5cc">00877</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga4b7f85c6b1834d9997a6d29553c7c5cc">XBUFFER::InsertWithMaskArg</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l00878"/>00878 {
<anchor xml:id="__x_buffer_8cpp_source_1l00879"/>00879 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbuffer;
<anchor xml:id="__x_buffer_8cpp_source_1l00880"/>00880 
<anchor xml:id="__x_buffer_8cpp_source_1l00881"/>00881 &#32;&#32;AddXBufferWithMask(xbuffer,&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00882"/>00882 
<anchor xml:id="__x_buffer_8cpp_source_1l00883"/>00883 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f06f00ff0797191e239e8d4de16293b">Insert</link>(xbuffer,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00884"/>00884 }
<anchor xml:id="__x_buffer_8cpp_source_1l00885"/>00885 
<anchor xml:id="__x_buffer_8cpp_source_1l00886"/>00886 
<anchor xml:id="__x_buffer_8cpp_source_1l00900"/><link linkend="_group___x_u_t_i_l_s_1ga2d6ab50430a20babed9d47ea4a114658">00900</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga4b7f85c6b1834d9997a6d29553c7c5cc">XBUFFER::InsertWithMaskArg</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l00901"/>00901 {
<anchor xml:id="__x_buffer_8cpp_source_1l00902"/>00902 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga4b7f85c6b1834d9997a6d29553c7c5cc">InsertWithMaskArg</link>(mask-&gt;<link linkend="_group___x_u_t_i_l_s_1gad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00903"/>00903 }
<anchor xml:id="__x_buffer_8cpp_source_1l00904"/>00904 
<anchor xml:id="__x_buffer_8cpp_source_1l00905"/>00905 
<anchor xml:id="__x_buffer_8cpp_source_1l00919"/><link linkend="_group___x_u_t_i_l_s_1gab02bbfbe9788d2482f620cd56d853411">00919</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gab02bbfbe9788d2482f620cd56d853411">XBUFFER::InsertWithMask</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l00920"/>00920 {
<anchor xml:id="__x_buffer_8cpp_source_1l00921"/>00921 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00922"/>00922 
<anchor xml:id="__x_buffer_8cpp_source_1l00923"/>00923 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l00924"/>00924 
<anchor xml:id="__x_buffer_8cpp_source_1l00925"/>00925 &#32;&#32;va_start(arg,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00926"/>00926 
<anchor xml:id="__x_buffer_8cpp_source_1l00927"/>00927 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga4b7f85c6b1834d9997a6d29553c7c5cc">InsertWithMaskArg</link>(mask,&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00928"/>00928 
<anchor xml:id="__x_buffer_8cpp_source_1l00929"/>00929 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00930"/>00930 
<anchor xml:id="__x_buffer_8cpp_source_1l00931"/>00931 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l00932"/>00932 }
<anchor xml:id="__x_buffer_8cpp_source_1l00933"/>00933 
<anchor xml:id="__x_buffer_8cpp_source_1l00934"/>00934 
<anchor xml:id="__x_buffer_8cpp_source_1l00948"/><link linkend="_group___x_u_t_i_l_s_1ga1716a5d7fbddd43f384b7d22d093d5a5">00948</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gab02bbfbe9788d2482f620cd56d853411">XBUFFER::InsertWithMask</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l00949"/>00949 {
<anchor xml:id="__x_buffer_8cpp_source_1l00950"/>00950 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00951"/>00951 
<anchor xml:id="__x_buffer_8cpp_source_1l00952"/>00952 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l00953"/>00953 
<anchor xml:id="__x_buffer_8cpp_source_1l00954"/>00954 &#32;&#32;va_start(arg,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00955"/>00955 
<anchor xml:id="__x_buffer_8cpp_source_1l00956"/>00956 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga4b7f85c6b1834d9997a6d29553c7c5cc">InsertWithMaskArg</link>(mask,&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00957"/>00957 
<anchor xml:id="__x_buffer_8cpp_source_1l00958"/>00958 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00959"/>00959 
<anchor xml:id="__x_buffer_8cpp_source_1l00960"/>00960 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l00961"/>00961 }
<anchor xml:id="__x_buffer_8cpp_source_1l00962"/>00962 
<anchor xml:id="__x_buffer_8cpp_source_1l00963"/>00963 
<anchor xml:id="__x_buffer_8cpp_source_1l00977"/><link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">00977</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;pbuffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize)
<anchor xml:id="__x_buffer_8cpp_source_1l00978"/>00978 {
<anchor xml:id="__x_buffer_8cpp_source_1l00979"/>00979 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00980"/>00980 
<anchor xml:id="__x_buffer_8cpp_source_1l00981"/>00981 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((ppos&gt;=size)||(!size))
<anchor xml:id="__x_buffer_8cpp_source_1l00982"/>00982 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00983"/>00983 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00984"/>00984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l00985"/>00985 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00986"/>00986 
<anchor xml:id="__x_buffer_8cpp_source_1l00987"/>00987 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;esize&#32;=&#32;psize;
<anchor xml:id="__x_buffer_8cpp_source_1l00988"/>00988 
<anchor xml:id="__x_buffer_8cpp_source_1l00989"/>00989 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((ppos+psize)&gt;=size)&#32;esize&#32;=&#32;(size-ppos);
<anchor xml:id="__x_buffer_8cpp_source_1l00990"/>00990 
<anchor xml:id="__x_buffer_8cpp_source_1l00991"/>00991 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pbuffer)&#32;memcpy(pbuffer,&#32;&amp;buffer[ppos],esize);
<anchor xml:id="__x_buffer_8cpp_source_1l00992"/>00992 
<anchor xml:id="__x_buffer_8cpp_source_1l00993"/>00993 &#32;&#32;<emphasis role="comment">//&#32;#Imanol&#32;changed&#32;to&#32;avoid&#32;copyng&#32;overlapped&#32;memory,&#32;as&#32;that&apos;s&#32;undefined</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00994"/>00994 &#32;&#32;memmove(&amp;buffer[ppos],&#32;&amp;buffer[ppos+esize],&#32;size-(ppos+esize));
<anchor xml:id="__x_buffer_8cpp_source_1l00995"/>00995 
<anchor xml:id="__x_buffer_8cpp_source_1l00996"/>00996 &#32;&#32;<emphasis role="comment">//memcpy(&amp;buffer[ppos],&amp;buffer[ppos+esize],size-(ppos+esize));</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00997"/>00997 
<anchor xml:id="__x_buffer_8cpp_source_1l00998"/>00998 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1gacf69e379f1d0bf812ae9c1157eac172c">Resize</link>(size-esize,<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00999"/>00999 
<anchor xml:id="__x_buffer_8cpp_source_1l01000"/>01000 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01001"/>01001 
<anchor xml:id="__x_buffer_8cpp_source_1l01002"/>01002 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;esize;
<anchor xml:id="__x_buffer_8cpp_source_1l01003"/>01003 }
<anchor xml:id="__x_buffer_8cpp_source_1l01004"/>01004 
<anchor xml:id="__x_buffer_8cpp_source_1l01005"/>01005 
<anchor xml:id="__x_buffer_8cpp_source_1l01018"/><link linkend="_group___x_u_t_i_l_s_1ga837bfdd8236ae2a0f5a7e7f05996fc68">01018</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&amp;&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01019"/>01019 {
<anchor xml:id="__x_buffer_8cpp_source_1l01020"/>01020 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01021"/>01021 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01022"/>01022 
<anchor xml:id="__x_buffer_8cpp_source_1l01023"/>01023 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01024"/>01024 }
<anchor xml:id="__x_buffer_8cpp_source_1l01025"/>01025 
<anchor xml:id="__x_buffer_8cpp_source_1l01026"/>01026 
<anchor xml:id="__x_buffer_8cpp_source_1l01039"/><link linkend="_group___x_u_t_i_l_s_1ga5ca161e058d647a5b28145666c21f5cb">01039</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<emphasis role="keywordtype">bool</emphasis>&amp;&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01040"/>01040 {
<anchor xml:id="__x_buffer_8cpp_source_1l01041"/>01041 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;_data&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l01042"/>01042 
<anchor xml:id="__x_buffer_8cpp_source_1l01043"/>01043 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;_data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01044"/>01044 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01045"/>01045 
<anchor xml:id="__x_buffer_8cpp_source_1l01046"/>01046 &#32;&#32;data&#32;=&#32;_data?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01047"/>01047 
<anchor xml:id="__x_buffer_8cpp_source_1l01048"/>01048 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01049"/>01049 }
<anchor xml:id="__x_buffer_8cpp_source_1l01050"/>01050 
<anchor xml:id="__x_buffer_8cpp_source_1l01051"/>01051 
<anchor xml:id="__x_buffer_8cpp_source_1l01064"/><link linkend="_group___x_u_t_i_l_s_1ga1f57d60affaf58a8a363e713fc803478">01064</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&amp;&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01065"/>01065 {
<anchor xml:id="__x_buffer_8cpp_source_1l01066"/>01066 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01067"/>01067 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01068"/>01068 
<anchor xml:id="__x_buffer_8cpp_source_1l01069"/>01069 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1afacb625223a89d4cdf212ac4482a7e5c">SWAPWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01070"/>01070 
<anchor xml:id="__x_buffer_8cpp_source_1l01071"/>01071 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01072"/>01072 }
<anchor xml:id="__x_buffer_8cpp_source_1l01073"/>01073 
<anchor xml:id="__x_buffer_8cpp_source_1l01074"/>01074 
<anchor xml:id="__x_buffer_8cpp_source_1l01087"/><link linkend="_group___x_u_t_i_l_s_1ga9911b88ec3fb88b6fa59c0170387cd5c">01087</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&amp;&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01088"/>01088 {
<anchor xml:id="__x_buffer_8cpp_source_1l01089"/>01089 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01090"/>01090 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01091"/>01091 
<anchor xml:id="__x_buffer_8cpp_source_1l01092"/>01092 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01093"/>01093 
<anchor xml:id="__x_buffer_8cpp_source_1l01094"/>01094 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01095"/>01095 }
<anchor xml:id="__x_buffer_8cpp_source_1l01096"/>01096 
<anchor xml:id="__x_buffer_8cpp_source_1l01097"/>01097 
<anchor xml:id="__x_buffer_8cpp_source_1l01110"/><link linkend="_group___x_u_t_i_l_s_1gaa05b9b0e443030cb31fc3793764f9f3d">01110</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&amp;&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01111"/>01111 {
<anchor xml:id="__x_buffer_8cpp_source_1l01112"/>01112 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01113"/>01113 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01114"/>01114 
<anchor xml:id="__x_buffer_8cpp_source_1l01115"/>01115 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a0a01412990f8f070e16468914d231b68">SWAPQWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01116"/>01116 
<anchor xml:id="__x_buffer_8cpp_source_1l01117"/>01117 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01118"/>01118 }
<anchor xml:id="__x_buffer_8cpp_source_1l01119"/>01119 
<anchor xml:id="__x_buffer_8cpp_source_1l01120"/>01120 
<anchor xml:id="__x_buffer_8cpp_source_1l01133"/><link linkend="_group___x_u_t_i_l_s_1ga009cc090bb5388c7e715a1ff9b8aa205">01133</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<emphasis role="keywordtype">float</emphasis>&amp;&#32;data,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01134"/>01134 {
<anchor xml:id="__x_buffer_8cpp_source_1l01135"/>01135 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01136"/>01136 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01137"/>01137 
<anchor xml:id="__x_buffer_8cpp_source_1l01138"/>01138 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01139"/>01139 }
<anchor xml:id="__x_buffer_8cpp_source_1l01140"/>01140 
<anchor xml:id="__x_buffer_8cpp_source_1l01141"/>01141 
<anchor xml:id="__x_buffer_8cpp_source_1l01154"/><link linkend="_group___x_u_t_i_l_s_1ga50e9fb6a3bb7cd69f7ab050db2d74a24">01154</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<emphasis role="keywordtype">double</emphasis>&amp;&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01155"/>01155 {
<anchor xml:id="__x_buffer_8cpp_source_1l01156"/>01156 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01157"/>01157 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01158"/>01158 
<anchor xml:id="__x_buffer_8cpp_source_1l01159"/>01159 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01160"/>01160 }
<anchor xml:id="__x_buffer_8cpp_source_1l01161"/>01161 
<anchor xml:id="__x_buffer_8cpp_source_1l01162"/>01162 
<anchor xml:id="__x_buffer_8cpp_source_1l01176"/><link linkend="_group___x_u_t_i_l_s_1gac20ac6efc0084910f540aaad4cc02c53">01176</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;<emphasis role="keywordtype">string</emphasis>,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize)
<anchor xml:id="__x_buffer_8cpp_source_1l01177"/>01177 {
<anchor xml:id="__x_buffer_8cpp_source_1l01178"/>01178 &#32;&#32;<emphasis role="keywordtype">string</emphasis>.Empty();
<anchor xml:id="__x_buffer_8cpp_source_1l01179"/>01179 
<anchor xml:id="__x_buffer_8cpp_source_1l01180"/>01180 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*&#32;_string&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>[psize];
<anchor xml:id="__x_buffer_8cpp_source_1l01181"/>01181 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;_size&#32;&#32;&#32;=&#32;psize&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l01182"/>01182 
<anchor xml:id="__x_buffer_8cpp_source_1l01183"/>01183 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!_string)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01184"/>01184 
<anchor xml:id="__x_buffer_8cpp_source_1l01185"/>01185 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;rsize&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)_string,&#32;ppos,&#32;_size);
<anchor xml:id="__x_buffer_8cpp_source_1l01186"/>01186 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(rsize&#32;==&#32;_size)
<anchor xml:id="__x_buffer_8cpp_source_1l01187"/>01187 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01188"/>01188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;(int)psize;&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l01189"/>01189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01190"/>01190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data&#32;=&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)_string[c];
<anchor xml:id="__x_buffer_8cpp_source_1l01191"/>01191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>.Add((<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>)data);
<anchor xml:id="__x_buffer_8cpp_source_1l01192"/>01192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01193"/>01193 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01194"/>01194 
<anchor xml:id="__x_buffer_8cpp_source_1l01195"/>01195 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;_string;
<anchor xml:id="__x_buffer_8cpp_source_1l01196"/>01196 
<anchor xml:id="__x_buffer_8cpp_source_1l01197"/>01197 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01198"/>01198 }
<anchor xml:id="__x_buffer_8cpp_source_1l01199"/>01199 
<anchor xml:id="__x_buffer_8cpp_source_1l01200"/>01200 
<anchor xml:id="__x_buffer_8cpp_source_1l01214"/><link linkend="_group___x_u_t_i_l_s_1ga8d54c97a513fa79753de095832a5fcc5">01214</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga8d54c97a513fa79753de095832a5fcc5">XBUFFER::ExtractWithMaskArg</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l01215"/>01215 {
<anchor xml:id="__x_buffer_8cpp_source_1l01216"/>01216 <emphasis role="preprocessor">&#32;&#32;#ifndef&#32;BUILDER</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l01217"/>01217 
<anchor xml:id="__x_buffer_8cpp_source_1l01218"/>01218 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01219"/>01219 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&lt;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01220"/>01220 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)frompos&#32;&gt;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>())&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01221"/>01221 
<anchor xml:id="__x_buffer_8cpp_source_1l01222"/>01222 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;buffer;
<anchor xml:id="__x_buffer_8cpp_source_1l01223"/>01223 &#32;&#32;va_list&#32;arg2;
<anchor xml:id="__x_buffer_8cpp_source_1l01224"/>01224 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;sizearg&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l01225"/>01225 
<anchor xml:id="__x_buffer_8cpp_source_1l01226"/>01226 &#32;&#32;va_copy(arg2,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01227"/>01227 
<anchor xml:id="__x_buffer_8cpp_source_1l01228"/>01228 &#32;&#32;sizearg&#32;=&#32;CalculeExtractSizeArgWithMask((*<emphasis role="keyword">this</emphasis>),&#32;frompos,&#32;mask,&#32;arg2);
<anchor xml:id="__x_buffer_8cpp_source_1l01229"/>01229 
<anchor xml:id="__x_buffer_8cpp_source_1l01230"/>01230 &#32;&#32;va_end(arg2);
<anchor xml:id="__x_buffer_8cpp_source_1l01231"/>01231 
<anchor xml:id="__x_buffer_8cpp_source_1l01232"/>01232 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!sizearg)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01233"/>01233 
<anchor xml:id="__x_buffer_8cpp_source_1l01234"/>01234 &#32;&#32;buffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(&amp;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[frompos],&#32;sizearg);
<anchor xml:id="__x_buffer_8cpp_source_1l01235"/>01235 
<anchor xml:id="__x_buffer_8cpp_source_1l01236"/>01236 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;ExtractXBufferWithMask(buffer,&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01237"/>01237 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;frompos,&#32;sizearg);
<anchor xml:id="__x_buffer_8cpp_source_1l01238"/>01238 
<anchor xml:id="__x_buffer_8cpp_source_1l01239"/>01239 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01240"/>01240 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l01241"/>01241 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01242"/>01242 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l01243"/>01243 }
<anchor xml:id="__x_buffer_8cpp_source_1l01244"/>01244 
<anchor xml:id="__x_buffer_8cpp_source_1l01245"/>01245 
<anchor xml:id="__x_buffer_8cpp_source_1l01259"/><link linkend="_group___x_u_t_i_l_s_1ga0622b369e989a43b23917c7b99341ff5">01259</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga8d54c97a513fa79753de095832a5fcc5">XBUFFER::ExtractWithMaskArg</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l01260"/>01260 {
<anchor xml:id="__x_buffer_8cpp_source_1l01261"/>01261 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga8d54c97a513fa79753de095832a5fcc5">ExtractWithMaskArg</link>(mask-&gt;<link linkend="_group___x_u_t_i_l_s_1gad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01262"/>01262 }
<anchor xml:id="__x_buffer_8cpp_source_1l01263"/>01263 
<anchor xml:id="__x_buffer_8cpp_source_1l01264"/>01264 
<anchor xml:id="__x_buffer_8cpp_source_1l01278"/><link linkend="_group___x_u_t_i_l_s_1gab586196212b33ea6e43a5d37689d7f71">01278</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gab586196212b33ea6e43a5d37689d7f71">XBUFFER::ExtractWithMask</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l01279"/>01279 {
<anchor xml:id="__x_buffer_8cpp_source_1l01280"/>01280 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01281"/>01281 
<anchor xml:id="__x_buffer_8cpp_source_1l01282"/>01282 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l01283"/>01283 
<anchor xml:id="__x_buffer_8cpp_source_1l01284"/>01284 &#32;&#32;va_start(arg,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l01285"/>01285 
<anchor xml:id="__x_buffer_8cpp_source_1l01286"/>01286 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga8d54c97a513fa79753de095832a5fcc5">ExtractWithMaskArg</link>(mask,&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01287"/>01287 
<anchor xml:id="__x_buffer_8cpp_source_1l01288"/>01288 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01289"/>01289 
<anchor xml:id="__x_buffer_8cpp_source_1l01290"/>01290 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01291"/>01291 }
<anchor xml:id="__x_buffer_8cpp_source_1l01292"/>01292 
<anchor xml:id="__x_buffer_8cpp_source_1l01293"/>01293 
<anchor xml:id="__x_buffer_8cpp_source_1l01307"/><link linkend="_group___x_u_t_i_l_s_1ga141b201cdac4d7d25976e23c074a5d05">01307</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gab586196212b33ea6e43a5d37689d7f71">XBUFFER::ExtractWithMask</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l01308"/>01308 {
<anchor xml:id="__x_buffer_8cpp_source_1l01309"/>01309 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01310"/>01310 
<anchor xml:id="__x_buffer_8cpp_source_1l01311"/>01311 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l01312"/>01312 
<anchor xml:id="__x_buffer_8cpp_source_1l01313"/>01313 &#32;&#32;va_start(arg,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l01314"/>01314 
<anchor xml:id="__x_buffer_8cpp_source_1l01315"/>01315 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga8d54c97a513fa79753de095832a5fcc5">ExtractWithMaskArg</link>(mask,&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01316"/>01316 
<anchor xml:id="__x_buffer_8cpp_source_1l01317"/>01317 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01318"/>01318 
<anchor xml:id="__x_buffer_8cpp_source_1l01319"/>01319 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01320"/>01320 }
<anchor xml:id="__x_buffer_8cpp_source_1l01321"/>01321 
<anchor xml:id="__x_buffer_8cpp_source_1l01322"/>01322 
<anchor xml:id="__x_buffer_8cpp_source_1l01332"/><link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">01332</link> <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l01333"/>01333 {
<anchor xml:id="__x_buffer_8cpp_source_1l01334"/>01334 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!size)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l01335"/>01335 
<anchor xml:id="__x_buffer_8cpp_source_1l01336"/>01336 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer;
<anchor xml:id="__x_buffer_8cpp_source_1l01337"/>01337 }
<anchor xml:id="__x_buffer_8cpp_source_1l01338"/>01338 
<anchor xml:id="__x_buffer_8cpp_source_1l01339"/>01339 
<anchor xml:id="__x_buffer_8cpp_source_1l01351"/><link linkend="_group___x_u_t_i_l_s_1gabfaf967d136d37f0c5dcf4ded0296dac">01351</link> <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;<link linkend="_group___x_u_t_i_l_s_1gabfaf967d136d37f0c5dcf4ded0296dac">XBUFFER::GetByte</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;index)
<anchor xml:id="__x_buffer_8cpp_source_1l01352"/>01352 {
<anchor xml:id="__x_buffer_8cpp_source_1l01353"/>01353 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01354"/>01354 
<anchor xml:id="__x_buffer_8cpp_source_1l01355"/>01355 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data;
<anchor xml:id="__x_buffer_8cpp_source_1l01356"/>01356 
<anchor xml:id="__x_buffer_8cpp_source_1l01357"/>01357 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(index&#32;&gt;&#32;size)
<anchor xml:id="__x_buffer_8cpp_source_1l01358"/>01358 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01359"/>01359 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01360"/>01360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l01361"/>01361 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01362"/>01362 
<anchor xml:id="__x_buffer_8cpp_source_1l01363"/>01363 &#32;&#32;data&#32;=&#32;buffer[index];
<anchor xml:id="__x_buffer_8cpp_source_1l01364"/>01364 
<anchor xml:id="__x_buffer_8cpp_source_1l01365"/>01365 &#32;&#32;position++;
<anchor xml:id="__x_buffer_8cpp_source_1l01366"/>01366 
<anchor xml:id="__x_buffer_8cpp_source_1l01367"/>01367 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01368"/>01368 
<anchor xml:id="__x_buffer_8cpp_source_1l01369"/>01369 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
<anchor xml:id="__x_buffer_8cpp_source_1l01370"/>01370 }
<anchor xml:id="__x_buffer_8cpp_source_1l01371"/>01371 
<anchor xml:id="__x_buffer_8cpp_source_1l01372"/>01372 
<anchor xml:id="__x_buffer_8cpp_source_1l01382"/><link linkend="_group___x_u_t_i_l_s_1ga2197de858bc8a3f51649077a139935fa">01382</link> <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2197de858bc8a3f51649077a139935fa">XBUFFER::GetLastByte</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l01383"/>01383 {
<anchor xml:id="__x_buffer_8cpp_source_1l01384"/>01384 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01385"/>01385 
<anchor xml:id="__x_buffer_8cpp_source_1l01386"/>01386 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data&#32;=&#32;buffer[size-1];
<anchor xml:id="__x_buffer_8cpp_source_1l01387"/>01387 
<anchor xml:id="__x_buffer_8cpp_source_1l01388"/>01388 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01389"/>01389 
<anchor xml:id="__x_buffer_8cpp_source_1l01390"/>01390 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
<anchor xml:id="__x_buffer_8cpp_source_1l01391"/>01391 }
<anchor xml:id="__x_buffer_8cpp_source_1l01392"/>01392 
<anchor xml:id="__x_buffer_8cpp_source_1l01393"/>01393 
<anchor xml:id="__x_buffer_8cpp_source_1l01403"/><link linkend="_group___x_u_t_i_l_s_1ga66e2dbd897e717ce38e395d6ad87b754">01403</link> <emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_group___x_u_t_i_l_s_1ga66e2dbd897e717ce38e395d6ad87b754">XBUFFER::GetPtrChar</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l01404"/>01404 {
<anchor xml:id="__x_buffer_8cpp_source_1l01405"/>01405 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>*)<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l01406"/>01406 }
<anchor xml:id="__x_buffer_8cpp_source_1l01407"/>01407 
<anchor xml:id="__x_buffer_8cpp_source_1l01408"/>01408 
<anchor xml:id="__x_buffer_8cpp_source_1l01418"/><link linkend="_group___x_u_t_i_l_s_1ga9d661e678c5ce60c23b8de8825130ffd">01418</link> <link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>*&#32;<link linkend="_group___x_u_t_i_l_s_1ga9d661e678c5ce60c23b8de8825130ffd">XBUFFER::GetPtrWord</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l01419"/>01419 {
<anchor xml:id="__x_buffer_8cpp_source_1l01420"/>01420 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>*)<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l01421"/>01421 }
<anchor xml:id="__x_buffer_8cpp_source_1l01422"/>01422 
<anchor xml:id="__x_buffer_8cpp_source_1l01423"/>01423 
<anchor xml:id="__x_buffer_8cpp_source_1l01437"/><link linkend="_group___x_u_t_i_l_s_1ga819fc12232e4ccd2e2ba005500730698">01437</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;pbuffer,<emphasis role="keywordtype">int</emphasis>&#32;psize,<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01438"/>01438 {
<anchor xml:id="__x_buffer_8cpp_source_1l01439"/>01439 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!pbuffer)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01440"/>01440 
<anchor xml:id="__x_buffer_8cpp_source_1l01441"/>01441 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01442"/>01442 
<anchor xml:id="__x_buffer_8cpp_source_1l01443"/>01443 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos&#32;=&#32;frompos;
<anchor xml:id="__x_buffer_8cpp_source_1l01444"/>01444 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&#32;==&#32;<link linkend="__x_buffer_8h_1a819ef6df2bf7864ffdefd37a7d8c172a">XBUFFER_INVALIDPOSITION</link>)&#32;pos&#32;=&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l01445"/>01445 
<anchor xml:id="__x_buffer_8cpp_source_1l01446"/>01446 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((!buffer)&#32;||&#32;(pos&gt;(<emphasis role="keywordtype">int</emphasis>)size))
<anchor xml:id="__x_buffer_8cpp_source_1l01447"/>01447 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01448"/>01448 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01449"/>01449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01450"/>01450 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01451"/>01451 
<anchor xml:id="__x_buffer_8cpp_source_1l01452"/>01452 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l01453"/>01453 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01454"/>01454 &#32;&#32;&#32;&#32;&#32;&#32;memcpy(pbuffer,&amp;buffer[pos],psize);
<anchor xml:id="__x_buffer_8cpp_source_1l01455"/>01455 &#32;&#32;&#32;&#32;&#32;&#32;position&#32;=&#32;pos&#32;+&#32;psize;
<anchor xml:id="__x_buffer_8cpp_source_1l01456"/>01456 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01457"/>01457 
<anchor xml:id="__x_buffer_8cpp_source_1l01458"/>01458 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01459"/>01459 
<anchor xml:id="__x_buffer_8cpp_source_1l01460"/>01460 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!buffer)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01461"/>01461 
<anchor xml:id="__x_buffer_8cpp_source_1l01462"/>01462 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01463"/>01463 }
<anchor xml:id="__x_buffer_8cpp_source_1l01464"/>01464 
<anchor xml:id="__x_buffer_8cpp_source_1l01465"/>01465 
<anchor xml:id="__x_buffer_8cpp_source_1l01478"/><link linkend="_group___x_u_t_i_l_s_1gafd2ad07e0aeeb7632f794d23e9b4e5a9">01478</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01479"/>01479 {
<anchor xml:id="__x_buffer_8cpp_source_1l01480"/>01480 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01481"/>01481 
<anchor xml:id="__x_buffer_8cpp_source_1l01482"/>01482 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos&#32;=&#32;frompos;
<anchor xml:id="__x_buffer_8cpp_source_1l01483"/>01483 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&#32;==&#32;<link linkend="__x_buffer_8h_1a819ef6df2bf7864ffdefd37a7d8c172a">XBUFFER_INVALIDPOSITION</link>)&#32;pos&#32;=&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l01484"/>01484 
<anchor xml:id="__x_buffer_8cpp_source_1l01485"/>01485 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pos&gt;(<emphasis role="keywordtype">int</emphasis>)size)
<anchor xml:id="__x_buffer_8cpp_source_1l01486"/>01486 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01487"/>01487 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01488"/>01488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01489"/>01489 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01490"/>01490 
<anchor xml:id="__x_buffer_8cpp_source_1l01491"/>01491 &#32;&#32;data&#32;=&#32;buffer[pos];
<anchor xml:id="__x_buffer_8cpp_source_1l01492"/>01492 
<anchor xml:id="__x_buffer_8cpp_source_1l01493"/>01493 &#32;&#32;position&#32;=&#32;pos&#32;+&#32;1;
<anchor xml:id="__x_buffer_8cpp_source_1l01494"/>01494 
<anchor xml:id="__x_buffer_8cpp_source_1l01495"/>01495 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01496"/>01496 
<anchor xml:id="__x_buffer_8cpp_source_1l01497"/>01497 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01498"/>01498 }
<anchor xml:id="__x_buffer_8cpp_source_1l01499"/>01499 
<anchor xml:id="__x_buffer_8cpp_source_1l01500"/>01500 
<anchor xml:id="__x_buffer_8cpp_source_1l01513"/><link linkend="_group___x_u_t_i_l_s_1gad4aae7e01b7006e03dee36795e647e26">01513</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<emphasis role="keywordtype">bool</emphasis>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01514"/>01514 {
<anchor xml:id="__x_buffer_8cpp_source_1l01515"/>01515 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;_data&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l01516"/>01516 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01517"/>01517 
<anchor xml:id="__x_buffer_8cpp_source_1l01518"/>01518 &#32;&#32;status&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(_data,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l01519"/>01519 
<anchor xml:id="__x_buffer_8cpp_source_1l01520"/>01520 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;data&#32;=&#32;_data?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01521"/>01521 
<anchor xml:id="__x_buffer_8cpp_source_1l01522"/>01522 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01523"/>01523 }
<anchor xml:id="__x_buffer_8cpp_source_1l01524"/>01524 
<anchor xml:id="__x_buffer_8cpp_source_1l01525"/>01525 
<anchor xml:id="__x_buffer_8cpp_source_1l01538"/><link linkend="_group___x_u_t_i_l_s_1ga4df5c9e9263f98bb5a967fabcea0a341">01538</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01539"/>01539 {
<anchor xml:id="__x_buffer_8cpp_source_1l01540"/>01540 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>),&#32;frompos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01541"/>01541 
<anchor xml:id="__x_buffer_8cpp_source_1l01542"/>01542 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1afacb625223a89d4cdf212ac4482a7e5c">SWAPWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01543"/>01543 
<anchor xml:id="__x_buffer_8cpp_source_1l01544"/>01544 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01545"/>01545 }
<anchor xml:id="__x_buffer_8cpp_source_1l01546"/>01546 
<anchor xml:id="__x_buffer_8cpp_source_1l01547"/>01547 
<anchor xml:id="__x_buffer_8cpp_source_1l01560"/><link linkend="_group___x_u_t_i_l_s_1ga1fe3d861549327bd21ba33efc31e50dc">01560</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01561"/>01561 {
<anchor xml:id="__x_buffer_8cpp_source_1l01562"/>01562 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;frompos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01563"/>01563 
<anchor xml:id="__x_buffer_8cpp_source_1l01564"/>01564 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01565"/>01565 
<anchor xml:id="__x_buffer_8cpp_source_1l01566"/>01566 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01567"/>01567 }
<anchor xml:id="__x_buffer_8cpp_source_1l01568"/>01568 
<anchor xml:id="__x_buffer_8cpp_source_1l01569"/>01569 
<anchor xml:id="__x_buffer_8cpp_source_1l01582"/><link linkend="_group___x_u_t_i_l_s_1gaabca9aa7af0d5508b8ea9c0d81f63d45">01582</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01583"/>01583 {
<anchor xml:id="__x_buffer_8cpp_source_1l01584"/>01584 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>),&#32;frompos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01585"/>01585 
<anchor xml:id="__x_buffer_8cpp_source_1l01586"/>01586 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a0a01412990f8f070e16468914d231b68">SWAPQWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01587"/>01587 
<anchor xml:id="__x_buffer_8cpp_source_1l01588"/>01588 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01589"/>01589 }
<anchor xml:id="__x_buffer_8cpp_source_1l01590"/>01590 
<anchor xml:id="__x_buffer_8cpp_source_1l01591"/>01591 
<anchor xml:id="__x_buffer_8cpp_source_1l01604"/><link linkend="_group___x_u_t_i_l_s_1ga7b9dea3612b02db2f93b2beb5b6f8b30">01604</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<emphasis role="keywordtype">float</emphasis>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01605"/>01605 {
<anchor xml:id="__x_buffer_8cpp_source_1l01606"/>01606 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;frompos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01607"/>01607 
<anchor xml:id="__x_buffer_8cpp_source_1l01608"/>01608 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01609"/>01609 }
<anchor xml:id="__x_buffer_8cpp_source_1l01610"/>01610 
<anchor xml:id="__x_buffer_8cpp_source_1l01611"/>01611 
<anchor xml:id="__x_buffer_8cpp_source_1l01624"/><link linkend="_group___x_u_t_i_l_s_1ga4b051f8bbe3c597b212d57cf5a467335">01624</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<emphasis role="keywordtype">double</emphasis>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01625"/>01625 {
<anchor xml:id="__x_buffer_8cpp_source_1l01626"/>01626 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>),&#32;frompos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01627"/>01627 
<anchor xml:id="__x_buffer_8cpp_source_1l01628"/>01628 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01629"/>01629 }
<anchor xml:id="__x_buffer_8cpp_source_1l01630"/>01630 
<anchor xml:id="__x_buffer_8cpp_source_1l01631"/>01631 
<anchor xml:id="__x_buffer_8cpp_source_1l01645"/><link linkend="_group___x_u_t_i_l_s_1ga8bd4d8c0a23eb08a5b3eecde272bfd66">01645</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;psize,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01646"/>01646 {
<anchor xml:id="__x_buffer_8cpp_source_1l01647"/>01647 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;pos&#32;=&#32;frompos;
<anchor xml:id="__x_buffer_8cpp_source_1l01648"/>01648 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&#32;==&#32;<link linkend="__x_buffer_8h_1a819ef6df2bf7864ffdefd37a7d8c172a">XBUFFER_INVALIDPOSITION</link>)&#32;pos&#32;=&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l01649"/>01649 
<anchor xml:id="__x_buffer_8cpp_source_1l01650"/>01650 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c;
<anchor xml:id="__x_buffer_8cpp_source_1l01651"/>01651 
<anchor xml:id="__x_buffer_8cpp_source_1l01652"/>01652 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)psize;&#32;i++)
<anchor xml:id="__x_buffer_8cpp_source_1l01653"/>01653 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01654"/>01654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(c,&#32;pos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01655"/>01655 
<anchor xml:id="__x_buffer_8cpp_source_1l01656"/>01656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(c);
<anchor xml:id="__x_buffer_8cpp_source_1l01657"/>01657 
<anchor xml:id="__x_buffer_8cpp_source_1l01658"/>01658 &#32;&#32;&#32;&#32;&#32;&#32;data.<link linkend="_group___x_u_t_i_l_s_1gae19f84471c20a914d10a8ac757cacb9a">Add</link>((<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>)c);
<anchor xml:id="__x_buffer_8cpp_source_1l01659"/>01659 
<anchor xml:id="__x_buffer_8cpp_source_1l01660"/>01660 &#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l01661"/>01661 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01662"/>01662 
<anchor xml:id="__x_buffer_8cpp_source_1l01663"/>01663 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01664"/>01664 }
<anchor xml:id="__x_buffer_8cpp_source_1l01665"/>01665 
<anchor xml:id="__x_buffer_8cpp_source_1l01666"/>01666 
<anchor xml:id="__x_buffer_8cpp_source_1l01680"/><link linkend="_group___x_u_t_i_l_s_1gac553a8fceec905bf48ebdd75274cbe00">01680</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gac553a8fceec905bf48ebdd75274cbe00">XBUFFER::GetWithMaskArg</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l01681"/>01681 {
<anchor xml:id="__x_buffer_8cpp_source_1l01682"/>01682 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbuffer;
<anchor xml:id="__x_buffer_8cpp_source_1l01683"/>01683 
<anchor xml:id="__x_buffer_8cpp_source_1l01684"/>01684 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01685"/>01685 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&lt;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01686"/>01686 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)frompos&#32;&gt;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>())&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01687"/>01687 
<anchor xml:id="__x_buffer_8cpp_source_1l01688"/>01688 &#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(&amp;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[frompos],&#32;(<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>()-frompos));
<anchor xml:id="__x_buffer_8cpp_source_1l01689"/>01689 
<anchor xml:id="__x_buffer_8cpp_source_1l01690"/>01690 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;ExtractXBufferWithMask(xbuffer,&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01691"/>01691 
<anchor xml:id="__x_buffer_8cpp_source_1l01692"/>01692 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01693"/>01693 }
<anchor xml:id="__x_buffer_8cpp_source_1l01694"/>01694 
<anchor xml:id="__x_buffer_8cpp_source_1l01695"/>01695 
<anchor xml:id="__x_buffer_8cpp_source_1l01709"/><link linkend="_group___x_u_t_i_l_s_1ga50a69a53d7e20c0082271e74f9f98942">01709</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gac553a8fceec905bf48ebdd75274cbe00">XBUFFER::GetWithMaskArg</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l01710"/>01710 {
<anchor xml:id="__x_buffer_8cpp_source_1l01711"/>01711 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01712"/>01712 
<anchor xml:id="__x_buffer_8cpp_source_1l01713"/>01713 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gac553a8fceec905bf48ebdd75274cbe00">GetWithMaskArg</link>(mask-&gt;<link linkend="_group___x_u_t_i_l_s_1gad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01714"/>01714 }
<anchor xml:id="__x_buffer_8cpp_source_1l01715"/>01715 
<anchor xml:id="__x_buffer_8cpp_source_1l01716"/>01716 
<anchor xml:id="__x_buffer_8cpp_source_1l01730"/><link linkend="_group___x_u_t_i_l_s_1ga366ac8314162b9a8f47ecdb6c9533a49">01730</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga366ac8314162b9a8f47ecdb6c9533a49">XBUFFER::GetWithMask</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l01731"/>01731 {
<anchor xml:id="__x_buffer_8cpp_source_1l01732"/>01732 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01733"/>01733 
<anchor xml:id="__x_buffer_8cpp_source_1l01734"/>01734 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l01735"/>01735 
<anchor xml:id="__x_buffer_8cpp_source_1l01736"/>01736 &#32;&#32;va_start(arg,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l01737"/>01737 
<anchor xml:id="__x_buffer_8cpp_source_1l01738"/>01738 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1gac553a8fceec905bf48ebdd75274cbe00">GetWithMaskArg</link>(mask,&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01739"/>01739 
<anchor xml:id="__x_buffer_8cpp_source_1l01740"/>01740 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01741"/>01741 
<anchor xml:id="__x_buffer_8cpp_source_1l01742"/>01742 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01743"/>01743 }
<anchor xml:id="__x_buffer_8cpp_source_1l01744"/>01744 
<anchor xml:id="__x_buffer_8cpp_source_1l01745"/>01745 
<anchor xml:id="__x_buffer_8cpp_source_1l01759"/><link linkend="_group___x_u_t_i_l_s_1gac9aaf64fbab7557ced4d8f1d2c69acaf">01759</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga366ac8314162b9a8f47ecdb6c9533a49">XBUFFER::GetWithMask</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l01760"/>01760 {
<anchor xml:id="__x_buffer_8cpp_source_1l01761"/>01761 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01762"/>01762 
<anchor xml:id="__x_buffer_8cpp_source_1l01763"/>01763 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l01764"/>01764 
<anchor xml:id="__x_buffer_8cpp_source_1l01765"/>01765 &#32;&#32;va_start(arg,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l01766"/>01766 
<anchor xml:id="__x_buffer_8cpp_source_1l01767"/>01767 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1gac553a8fceec905bf48ebdd75274cbe00">GetWithMaskArg</link>(mask,&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01768"/>01768 
<anchor xml:id="__x_buffer_8cpp_source_1l01769"/>01769 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01770"/>01770 
<anchor xml:id="__x_buffer_8cpp_source_1l01771"/>01771 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01772"/>01772 }
<anchor xml:id="__x_buffer_8cpp_source_1l01773"/>01773 
<anchor xml:id="__x_buffer_8cpp_source_1l01774"/>01774 
<anchor xml:id="__x_buffer_8cpp_source_1l01788"/><link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">01788</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;pbuffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;psize,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01789"/>01789 {
<anchor xml:id="__x_buffer_8cpp_source_1l01790"/>01790 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01791"/>01791 
<anchor xml:id="__x_buffer_8cpp_source_1l01792"/>01792 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos&#32;=&#32;topos;
<anchor xml:id="__x_buffer_8cpp_source_1l01793"/>01793 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(topos&#32;==&#32;<link linkend="__x_buffer_8h_1a819ef6df2bf7864ffdefd37a7d8c172a">XBUFFER_INVALIDPOSITION</link>)&#32;pos&#32;=&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l01794"/>01794 
<anchor xml:id="__x_buffer_8cpp_source_1l01795"/>01795 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((pos+psize)&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)size)
<anchor xml:id="__x_buffer_8cpp_source_1l01796"/>01796 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01797"/>01797 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01798"/>01798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01799"/>01799 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01800"/>01800 
<anchor xml:id="__x_buffer_8cpp_source_1l01801"/>01801 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pbuffer)
<anchor xml:id="__x_buffer_8cpp_source_1l01802"/>01802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&amp;buffer[pos],&#32;pbuffer,&#32;psize);
<anchor xml:id="__x_buffer_8cpp_source_1l01803"/>01803 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;memset(&amp;buffer[pos],&#32;0,&#32;psize);
<anchor xml:id="__x_buffer_8cpp_source_1l01804"/>01804 
<anchor xml:id="__x_buffer_8cpp_source_1l01805"/>01805 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pos==(<emphasis role="keywordtype">int</emphasis>)position)&#32;&#32;position&#32;+=&#32;psize;
<anchor xml:id="__x_buffer_8cpp_source_1l01806"/>01806 
<anchor xml:id="__x_buffer_8cpp_source_1l01807"/>01807 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01808"/>01808 
<anchor xml:id="__x_buffer_8cpp_source_1l01809"/>01809 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01810"/>01810 }
<anchor xml:id="__x_buffer_8cpp_source_1l01811"/>01811 
<anchor xml:id="__x_buffer_8cpp_source_1l01812"/>01812 
<anchor xml:id="__x_buffer_8cpp_source_1l01825"/><link linkend="_group___x_u_t_i_l_s_1ga3059fcebc01cef8b808598145581545c">01825</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01826"/>01826 {
<anchor xml:id="__x_buffer_8cpp_source_1l01827"/>01827 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01828"/>01828 
<anchor xml:id="__x_buffer_8cpp_source_1l01829"/>01829 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos&#32;=&#32;topos;
<anchor xml:id="__x_buffer_8cpp_source_1l01830"/>01830 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(topos&#32;==&#32;<link linkend="__x_buffer_8h_1a819ef6df2bf7864ffdefd37a7d8c172a">XBUFFER_INVALIDPOSITION</link>)&#32;pos&#32;=&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l01831"/>01831 
<anchor xml:id="__x_buffer_8cpp_source_1l01832"/>01832 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pos&gt;(<emphasis role="keywordtype">int</emphasis>)size)
<anchor xml:id="__x_buffer_8cpp_source_1l01833"/>01833 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01834"/>01834 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01835"/>01835 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01836"/>01836 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01837"/>01837 
<anchor xml:id="__x_buffer_8cpp_source_1l01838"/>01838 &#32;&#32;buffer[pos]=&#32;data;
<anchor xml:id="__x_buffer_8cpp_source_1l01839"/>01839 
<anchor xml:id="__x_buffer_8cpp_source_1l01840"/>01840 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pos==(<emphasis role="keywordtype">int</emphasis>)position)&#32;position++;
<anchor xml:id="__x_buffer_8cpp_source_1l01841"/>01841 
<anchor xml:id="__x_buffer_8cpp_source_1l01842"/>01842 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01843"/>01843 
<anchor xml:id="__x_buffer_8cpp_source_1l01844"/>01844 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01845"/>01845 }
<anchor xml:id="__x_buffer_8cpp_source_1l01846"/>01846 
<anchor xml:id="__x_buffer_8cpp_source_1l01847"/>01847 
<anchor xml:id="__x_buffer_8cpp_source_1l01860"/><link linkend="_group___x_u_t_i_l_s_1ga81d98f6fcfdd5ab592fcf4762bfbab53">01860</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<emphasis role="keywordtype">bool</emphasis>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01861"/>01861 {
<anchor xml:id="__x_buffer_8cpp_source_1l01862"/>01862 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;_data&#32;=&#32;data?1:0;
<anchor xml:id="__x_buffer_8cpp_source_1l01863"/>01863 
<anchor xml:id="__x_buffer_8cpp_source_1l01864"/>01864 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">Set</link>(_data,&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l01865"/>01865 }
<anchor xml:id="__x_buffer_8cpp_source_1l01866"/>01866 
<anchor xml:id="__x_buffer_8cpp_source_1l01867"/>01867 
<anchor xml:id="__x_buffer_8cpp_source_1l01880"/><link linkend="_group___x_u_t_i_l_s_1gaddf562065dbb5c4f233a47f1d66c9862">01880</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01881"/>01881 {
<anchor xml:id="__x_buffer_8cpp_source_1l01882"/>01882 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1afacb625223a89d4cdf212ac4482a7e5c">SWAPWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01883"/>01883 
<anchor xml:id="__x_buffer_8cpp_source_1l01884"/>01884 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>),&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l01885"/>01885 }
<anchor xml:id="__x_buffer_8cpp_source_1l01886"/>01886 
<anchor xml:id="__x_buffer_8cpp_source_1l01887"/>01887 
<anchor xml:id="__x_buffer_8cpp_source_1l01900"/><link linkend="_group___x_u_t_i_l_s_1gabcb2e7b74b0b5009181c386b24808626">01900</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01901"/>01901 {
<anchor xml:id="__x_buffer_8cpp_source_1l01902"/>01902 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01903"/>01903 
<anchor xml:id="__x_buffer_8cpp_source_1l01904"/>01904 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l01905"/>01905 }
<anchor xml:id="__x_buffer_8cpp_source_1l01906"/>01906 
<anchor xml:id="__x_buffer_8cpp_source_1l01907"/>01907 
<anchor xml:id="__x_buffer_8cpp_source_1l01920"/><link linkend="_group___x_u_t_i_l_s_1gaedec11aa13d4136fcd300f4917d4959e">01920</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01921"/>01921 {
<anchor xml:id="__x_buffer_8cpp_source_1l01922"/>01922 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a0a01412990f8f070e16468914d231b68">SWAPQWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01923"/>01923 
<anchor xml:id="__x_buffer_8cpp_source_1l01924"/>01924 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>),&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l01925"/>01925 }
<anchor xml:id="__x_buffer_8cpp_source_1l01926"/>01926 
<anchor xml:id="__x_buffer_8cpp_source_1l01927"/>01927 
<anchor xml:id="__x_buffer_8cpp_source_1l01940"/><link linkend="_group___x_u_t_i_l_s_1gaf684c4deae49d950a87cee80b0d349ad">01940</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<emphasis role="keywordtype">float</emphasis>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01941"/>01941 {
<anchor xml:id="__x_buffer_8cpp_source_1l01942"/>01942 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l01943"/>01943 }
<anchor xml:id="__x_buffer_8cpp_source_1l01944"/>01944 
<anchor xml:id="__x_buffer_8cpp_source_1l01945"/>01945 
<anchor xml:id="__x_buffer_8cpp_source_1l01958"/><link linkend="_group___x_u_t_i_l_s_1ga04a759b59f5dccb02cef44b5d2d194c3">01958</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<emphasis role="keywordtype">double</emphasis>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01959"/>01959 {
<anchor xml:id="__x_buffer_8cpp_source_1l01960"/>01960 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>),&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l01961"/>01961 }
<anchor xml:id="__x_buffer_8cpp_source_1l01962"/>01962 
<anchor xml:id="__x_buffer_8cpp_source_1l01963"/>01963 
<anchor xml:id="__x_buffer_8cpp_source_1l01976"/><link linkend="_group___x_u_t_i_l_s_1gaaa70c3353e9041c7443c2541e48585ff">01976</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01977"/>01977 {
<anchor xml:id="__x_buffer_8cpp_source_1l01978"/>01978 &#32;&#32;<emphasis role="comment">//&#32;should&#32;create&#32;temporary&#32;array&#32;and&#32;then&#32;put&#32;that</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l01979"/>01979 &#32;&#32;<emphasis role="comment">//&#32;but&#32;on&#32;stack&#32;it&apos;s&#32;too&#32;much?</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l01980"/>01980 
<anchor xml:id="__x_buffer_8cpp_source_1l01981"/>01981 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*&#32;tmp&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>[data.<link linkend="_group___x_u_t_i_l_s_1ga7c3fa0dd7b650399470c76192fbd4916">GetSize</link>()];
<anchor xml:id="__x_buffer_8cpp_source_1l01982"/>01982 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!tmp)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01983"/>01983 
<anchor xml:id="__x_buffer_8cpp_source_1l01984"/>01984 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;data.<link linkend="_group___x_u_t_i_l_s_1ga7c3fa0dd7b650399470c76192fbd4916">GetSize</link>();&#32;i++)
<anchor xml:id="__x_buffer_8cpp_source_1l01985"/>01985 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01986"/>01986 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;_data&#32;=&#32;data[i];
<anchor xml:id="__x_buffer_8cpp_source_1l01987"/>01987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(_data);
<anchor xml:id="__x_buffer_8cpp_source_1l01988"/>01988 &#32;&#32;&#32;&#32;&#32;&#32;tmp[i]&#32;=&#32;_data;
<anchor xml:id="__x_buffer_8cpp_source_1l01989"/>01989 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01990"/>01990 
<anchor xml:id="__x_buffer_8cpp_source_1l01991"/>01991 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)tmp,&#32;data.<link linkend="_group___x_u_t_i_l_s_1ga7c3fa0dd7b650399470c76192fbd4916">GetSize</link>()*<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;topos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01992"/>01992 
<anchor xml:id="__x_buffer_8cpp_source_1l01993"/>01993 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;tmp;
<anchor xml:id="__x_buffer_8cpp_source_1l01994"/>01994 
<anchor xml:id="__x_buffer_8cpp_source_1l01995"/>01995 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01996"/>01996 }
<anchor xml:id="__x_buffer_8cpp_source_1l01997"/>01997 
<anchor xml:id="__x_buffer_8cpp_source_1l01998"/>01998 
<anchor xml:id="__x_buffer_8cpp_source_1l02012"/><link linkend="_group___x_u_t_i_l_s_1ga57ba9632c6a694b0eeba560e16b6aad8">02012</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga57ba9632c6a694b0eeba560e16b6aad8">XBUFFER::SetWithMaskArg</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l02013"/>02013 {
<anchor xml:id="__x_buffer_8cpp_source_1l02014"/>02014 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbuffer;
<anchor xml:id="__x_buffer_8cpp_source_1l02015"/>02015 
<anchor xml:id="__x_buffer_8cpp_source_1l02016"/>02016 &#32;&#32;AddXBufferWithMask(xbuffer,&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l02017"/>02017 
<anchor xml:id="__x_buffer_8cpp_source_1l02018"/>02018 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">Set</link>(xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>(),&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l02019"/>02019 
<anchor xml:id="__x_buffer_8cpp_source_1l02020"/>02020 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02021"/>02021 }
<anchor xml:id="__x_buffer_8cpp_source_1l02022"/>02022 
<anchor xml:id="__x_buffer_8cpp_source_1l02023"/>02023 
<anchor xml:id="__x_buffer_8cpp_source_1l02037"/><link linkend="_group___x_u_t_i_l_s_1ga4a98a5e2773f4d92f51d41c624e364c1">02037</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga57ba9632c6a694b0eeba560e16b6aad8">XBUFFER::SetWithMaskArg</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l02038"/>02038 {
<anchor xml:id="__x_buffer_8cpp_source_1l02039"/>02039 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02040"/>02040 
<anchor xml:id="__x_buffer_8cpp_source_1l02041"/>02041 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga57ba9632c6a694b0eeba560e16b6aad8">SetWithMaskArg</link>(mask-&gt;<link linkend="_group___x_u_t_i_l_s_1gad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;topos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l02042"/>02042 }
<anchor xml:id="__x_buffer_8cpp_source_1l02043"/>02043 
<anchor xml:id="__x_buffer_8cpp_source_1l02044"/>02044 
<anchor xml:id="__x_buffer_8cpp_source_1l02058"/><link linkend="_group___x_u_t_i_l_s_1ga777a52f0e08d7d4aa263b5dfce82adfd">02058</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga777a52f0e08d7d4aa263b5dfce82adfd">XBUFFER::SetWithMask</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l02059"/>02059 {
<anchor xml:id="__x_buffer_8cpp_source_1l02060"/>02060 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02061"/>02061 
<anchor xml:id="__x_buffer_8cpp_source_1l02062"/>02062 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l02063"/>02063 
<anchor xml:id="__x_buffer_8cpp_source_1l02064"/>02064 &#32;&#32;va_start(arg,&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l02065"/>02065 
<anchor xml:id="__x_buffer_8cpp_source_1l02066"/>02066 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;result&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga57ba9632c6a694b0eeba560e16b6aad8">SetWithMaskArg</link>(mask,&#32;topos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l02067"/>02067 
<anchor xml:id="__x_buffer_8cpp_source_1l02068"/>02068 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l02069"/>02069 
<anchor xml:id="__x_buffer_8cpp_source_1l02070"/>02070 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__x_buffer_8cpp_source_1l02071"/>02071 }
<anchor xml:id="__x_buffer_8cpp_source_1l02072"/>02072 
<anchor xml:id="__x_buffer_8cpp_source_1l02073"/>02073 
<anchor xml:id="__x_buffer_8cpp_source_1l02087"/><link linkend="_group___x_u_t_i_l_s_1gaea2109d7332ac0aa544a3d727ea1a35b">02087</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga777a52f0e08d7d4aa263b5dfce82adfd">XBUFFER::SetWithMask</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l02088"/>02088 {
<anchor xml:id="__x_buffer_8cpp_source_1l02089"/>02089 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02090"/>02090 
<anchor xml:id="__x_buffer_8cpp_source_1l02091"/>02091 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l02092"/>02092 
<anchor xml:id="__x_buffer_8cpp_source_1l02093"/>02093 &#32;&#32;va_start(arg,&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l02094"/>02094 
<anchor xml:id="__x_buffer_8cpp_source_1l02095"/>02095 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;result&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga57ba9632c6a694b0eeba560e16b6aad8">SetWithMaskArg</link>(mask,&#32;topos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l02096"/>02096 
<anchor xml:id="__x_buffer_8cpp_source_1l02097"/>02097 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l02098"/>02098 
<anchor xml:id="__x_buffer_8cpp_source_1l02099"/>02099 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__x_buffer_8cpp_source_1l02100"/>02100 }
<anchor xml:id="__x_buffer_8cpp_source_1l02101"/>02101 
<anchor xml:id="__x_buffer_8cpp_source_1l02102"/>02102 
<anchor xml:id="__x_buffer_8cpp_source_1l02115"/><link linkend="_group___x_u_t_i_l_s_1gacf69e379f1d0bf812ae9c1157eac172c">02115</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gacf69e379f1d0bf812ae9c1157eac172c">XBUFFER::Resize</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;newsize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;setblocked)
<anchor xml:id="__x_buffer_8cpp_source_1l02116"/>02116 {
<anchor xml:id="__x_buffer_8cpp_source_1l02117"/>02117 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02118"/>02118 
<anchor xml:id="__x_buffer_8cpp_source_1l02119"/>02119 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(setblocked)&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02120"/>02120 
<anchor xml:id="__x_buffer_8cpp_source_1l02121"/>02121 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!newsize)
<anchor xml:id="__x_buffer_8cpp_source_1l02122"/>02122 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02123"/>02123 &#32;&#32;&#32;&#32;&#32;&#32;size&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02124"/>02124 &#32;&#32;&#32;&#32;&#32;&#32;position&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02125"/>02125 
<anchor xml:id="__x_buffer_8cpp_source_1l02126"/>02126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(sizeassign)&#32;memset(buffer,&#32;0,&#32;&#32;sizeassign);
<anchor xml:id="__x_buffer_8cpp_source_1l02127"/>02127 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02128"/>02128 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l02129"/>02129 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02130"/>02130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(newsize&#32;&gt;&#32;sizeassign)
<anchor xml:id="__x_buffer_8cpp_source_1l02131"/>02131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02132"/>02132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;newbuffer&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02133"/>02133 
<anchor xml:id="__x_buffer_8cpp_source_1l02134"/>02134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizeassign&#32;=&#32;(newsize&#32;+&#32;<link linkend="__x_buffer_8h_1a36f6d93093964becd948bbc06439c4c6">XBUFFER_BLOCKMEM</link>);&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02135"/>02135 
<anchor xml:id="__x_buffer_8cpp_source_1l02136"/>02136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newbuffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>[sizeassign];
<anchor xml:id="__x_buffer_8cpp_source_1l02137"/>02137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(newbuffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02138"/>02138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02139"/>02139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(newbuffer&#32;,&#32;0,&#32;&#32;sizeassign);
<anchor xml:id="__x_buffer_8cpp_source_1l02140"/>02140 
<anchor xml:id="__x_buffer_8cpp_source_1l02141"/>02141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02142"/>02142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02143"/>02143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(newbuffer&#32;,&#32;buffer,&#32;size);
<anchor xml:id="__x_buffer_8cpp_source_1l02144"/>02144 
<anchor xml:id="__x_buffer_8cpp_source_1l02145"/>02145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;buffer;
<anchor xml:id="__x_buffer_8cpp_source_1l02146"/>02146 
<anchor xml:id="__x_buffer_8cpp_source_1l02147"/>02147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02148"/>02148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02149"/>02149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02150"/>02150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02151"/>02151 
<anchor xml:id="__x_buffer_8cpp_source_1l02152"/>02152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;&#32;&#32;&#32;&#32;&#32;=&#32;newbuffer;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02153"/>02153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;newsize;
<anchor xml:id="__x_buffer_8cpp_source_1l02154"/>02154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02155"/>02155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02156"/>02156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l02157"/>02157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02158"/>02158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02159"/>02159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02160"/>02160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02161"/>02161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l02162"/>02162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02163"/>02163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;newsize;
<anchor xml:id="__x_buffer_8cpp_source_1l02164"/>02164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02165"/>02165 
<anchor xml:id="__x_buffer_8cpp_source_1l02166"/>02166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(sizeassign&#32;&gt;&#32;size)
<anchor xml:id="__x_buffer_8cpp_source_1l02167"/>02167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02168"/>02168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(&amp;buffer[size],&#32;0,&#32;(sizeassign-size));
<anchor xml:id="__x_buffer_8cpp_source_1l02169"/>02169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02170"/>02170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02171"/>02171 
<anchor xml:id="__x_buffer_8cpp_source_1l02172"/>02172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(size)
<anchor xml:id="__x_buffer_8cpp_source_1l02173"/>02173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02174"/>02174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(position&gt;=size)&#32;position&#32;=&#32;(size-1);
<anchor xml:id="__x_buffer_8cpp_source_1l02175"/>02175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02176"/>02176 &#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02177"/>02177 
<anchor xml:id="__x_buffer_8cpp_source_1l02178"/>02178 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(setblocked)&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02179"/>02179 
<anchor xml:id="__x_buffer_8cpp_source_1l02180"/>02180 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l02181"/>02181 }
<anchor xml:id="__x_buffer_8cpp_source_1l02182"/>02182 
<anchor xml:id="__x_buffer_8cpp_source_1l02183"/>02183 
<anchor xml:id="__x_buffer_8cpp_source_1l02195"/><link linkend="_group___x_u_t_i_l_s_1ga0395231705663a2aeeee3b4be9d292bb">02195</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga0395231705663a2aeeee3b4be9d292bb">XBUFFER::Delete</link>(<emphasis role="keywordtype">bool</emphasis>&#32;setblocked)
<anchor xml:id="__x_buffer_8cpp_source_1l02196"/>02196 {
<anchor xml:id="__x_buffer_8cpp_source_1l02197"/>02197 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(setblocked)&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02198"/>02198 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02199"/>02199 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02200"/>02200 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02201"/>02201 
<anchor xml:id="__x_buffer_8cpp_source_1l02202"/>02202 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(buffer)&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;buffer;
<anchor xml:id="__x_buffer_8cpp_source_1l02203"/>02203 
<anchor xml:id="__x_buffer_8cpp_source_1l02204"/>02204 &#32;&#32;buffer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02205"/>02205 &#32;&#32;size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02206"/>02206 &#32;&#32;sizeassign&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02207"/>02207 &#32;&#32;position&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02208"/>02208 
<anchor xml:id="__x_buffer_8cpp_source_1l02209"/>02209 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(setblocked)&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02210"/>02210 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02211"/>02211 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02212"/>02212 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02213"/>02213 
<anchor xml:id="__x_buffer_8cpp_source_1l02214"/>02214 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02215"/>02215 }
<anchor xml:id="__x_buffer_8cpp_source_1l02216"/>02216 
<anchor xml:id="__x_buffer_8cpp_source_1l02217"/>02217 
<anchor xml:id="__x_buffer_8cpp_source_1l02229"/><link linkend="_group___x_u_t_i_l_s_1ga8a6897988fdcf361b48b20497933d911">02229</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga8a6897988fdcf361b48b20497933d911">XBUFFER::FillBuffer</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;fillchar)
<anchor xml:id="__x_buffer_8cpp_source_1l02230"/>02230 {
<anchor xml:id="__x_buffer_8cpp_source_1l02231"/>02231 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02232"/>02232 
<anchor xml:id="__x_buffer_8cpp_source_1l02233"/>02233 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02234"/>02234 
<anchor xml:id="__x_buffer_8cpp_source_1l02235"/>02235 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(buffer&#32;&amp;&amp;&#32;size)
<anchor xml:id="__x_buffer_8cpp_source_1l02236"/>02236 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02237"/>02237 &#32;&#32;&#32;&#32;&#32;&#32;memset(buffer,&#32;fillchar,&#32;&#32;size);
<anchor xml:id="__x_buffer_8cpp_source_1l02238"/>02238 &#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02239"/>02239 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02240"/>02240 
<anchor xml:id="__x_buffer_8cpp_source_1l02241"/>02241 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02242"/>02242 
<anchor xml:id="__x_buffer_8cpp_source_1l02243"/>02243 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l02244"/>02244 }
<anchor xml:id="__x_buffer_8cpp_source_1l02245"/>02245 
<anchor xml:id="__x_buffer_8cpp_source_1l02246"/>02246 
<anchor xml:id="__x_buffer_8cpp_source_1l02256"/><link linkend="_group___x_u_t_i_l_s_1ga3c14ba0ca9dfbf20b5127c87b275cb93">02256</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga3c14ba0ca9dfbf20b5127c87b275cb93">XBUFFER::Empty</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02257"/>02257 &#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02258"/>02258 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga0395231705663a2aeeee3b4be9d292bb">Delete</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02259"/>02259 &#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02260"/>02260 
<anchor xml:id="__x_buffer_8cpp_source_1l02261"/>02261 
<anchor xml:id="__x_buffer_8cpp_source_1l02271"/><link linkend="_group___x_u_t_i_l_s_1ga4841c0758209bc06765cad53588a38b6">02271</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga4841c0758209bc06765cad53588a38b6">XBUFFER::Swap</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02272"/>02272 {
<anchor xml:id="__x_buffer_8cpp_source_1l02273"/>02273 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02274"/>02274 
<anchor xml:id="__x_buffer_8cpp_source_1l02275"/>02275 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;(int)(size/2);&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02276"/>02276 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02277"/>02277 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;tembyte;
<anchor xml:id="__x_buffer_8cpp_source_1l02278"/>02278 
<anchor xml:id="__x_buffer_8cpp_source_1l02279"/>02279 &#32;&#32;&#32;&#32;&#32;&#32;tembyte&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;buffer[c];
<anchor xml:id="__x_buffer_8cpp_source_1l02280"/>02280 &#32;&#32;&#32;&#32;&#32;&#32;buffer[c]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;buffer[size-c-1];
<anchor xml:id="__x_buffer_8cpp_source_1l02281"/>02281 &#32;&#32;&#32;&#32;&#32;&#32;buffer[size-c-1]&#32;=&#32;tembyte;
<anchor xml:id="__x_buffer_8cpp_source_1l02282"/>02282 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02283"/>02283 
<anchor xml:id="__x_buffer_8cpp_source_1l02284"/>02284 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02285"/>02285 
<anchor xml:id="__x_buffer_8cpp_source_1l02286"/>02286 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02287"/>02287 }
<anchor xml:id="__x_buffer_8cpp_source_1l02288"/>02288 
<anchor xml:id="__x_buffer_8cpp_source_1l02289"/>02289 
<anchor xml:id="__x_buffer_8cpp_source_1l02302"/><link linkend="_group___x_u_t_i_l_s_1ga0650c6eebd99977ab9998ed2404843f5">02302</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga0650c6eebd99977ab9998ed2404843f5">XBUFFER::Compare</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;pbuffer,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize)
<anchor xml:id="__x_buffer_8cpp_source_1l02303"/>02303 {
<anchor xml:id="__x_buffer_8cpp_source_1l02304"/>02304 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!pbuffer)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02305"/>02305 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!psize)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02306"/>02306 
<anchor xml:id="__x_buffer_8cpp_source_1l02307"/>02307 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l02308"/>02308 
<anchor xml:id="__x_buffer_8cpp_source_1l02309"/>02309 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02310"/>02310 
<anchor xml:id="__x_buffer_8cpp_source_1l02311"/>02311 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(psize&#32;!=&#32;size)
<anchor xml:id="__x_buffer_8cpp_source_1l02312"/>02312 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02313"/>02313 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02314"/>02314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02315"/>02315 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02316"/>02316 
<anchor xml:id="__x_buffer_8cpp_source_1l02317"/>02317 &#32;&#32;status&#32;=&#32;(memcmp(pbuffer,&#32;buffer,&#32;psize)&#32;==&#32;0);
<anchor xml:id="__x_buffer_8cpp_source_1l02318"/>02318 
<anchor xml:id="__x_buffer_8cpp_source_1l02319"/>02319 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02320"/>02320 
<anchor xml:id="__x_buffer_8cpp_source_1l02321"/>02321 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l02322"/>02322 }
<anchor xml:id="__x_buffer_8cpp_source_1l02323"/>02323 
<anchor xml:id="__x_buffer_8cpp_source_1l02324"/>02324 
<anchor xml:id="__x_buffer_8cpp_source_1l02336"/><link linkend="_group___x_u_t_i_l_s_1ga03f1ea9a04c317a28f934c1f7419c1ac">02336</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga0650c6eebd99977ab9998ed2404843f5">XBUFFER::Compare</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>*&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02337"/>02337 {
<anchor xml:id="__x_buffer_8cpp_source_1l02338"/>02338 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!buffer)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02339"/>02339 
<anchor xml:id="__x_buffer_8cpp_source_1l02340"/>02340 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga0650c6eebd99977ab9998ed2404843f5">Compare</link>(buffer-&gt;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;buffer-&gt;<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>());
<anchor xml:id="__x_buffer_8cpp_source_1l02341"/>02341 }
<anchor xml:id="__x_buffer_8cpp_source_1l02342"/>02342 
<anchor xml:id="__x_buffer_8cpp_source_1l02343"/>02343 
<anchor xml:id="__x_buffer_8cpp_source_1l02355"/><link linkend="_group___x_u_t_i_l_s_1ga8dcdee71266fcc3a4ac754622f207b1f">02355</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga0650c6eebd99977ab9998ed2404843f5">XBUFFER::Compare</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02356"/>02356 {
<anchor xml:id="__x_buffer_8cpp_source_1l02357"/>02357 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga0650c6eebd99977ab9998ed2404843f5">Compare</link>(&amp;buffer);
<anchor xml:id="__x_buffer_8cpp_source_1l02358"/>02358 }
<anchor xml:id="__x_buffer_8cpp_source_1l02359"/>02359 
<anchor xml:id="__x_buffer_8cpp_source_1l02360"/>02360 
<anchor xml:id="__x_buffer_8cpp_source_1l02373"/><link linkend="_group___x_u_t_i_l_s_1ga5ee4eef8129589bea780bdb56c1834d3">02373</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga5ee4eef8129589bea780bdb56c1834d3">XBUFFER::Find</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>*&#32;buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;startindex)
<anchor xml:id="__x_buffer_8cpp_source_1l02374"/>02374 {
<anchor xml:id="__x_buffer_8cpp_source_1l02375"/>02375 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!buffer)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02376"/>02376 
<anchor xml:id="__x_buffer_8cpp_source_1l02377"/>02377 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_group___x_u_t_i_l_s_1ga0007f465be1385ea663397e502c5280e">IsEmpty</link>())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02378"/>02378 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!buffer-&gt;<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02379"/>02379 
<anchor xml:id="__x_buffer_8cpp_source_1l02380"/>02380 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;_buffer&#32;=&#32;buffer-&gt;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02381"/>02381 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;_size&#32;&#32;&#32;=&#32;buffer-&gt;<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02382"/>02382 
<anchor xml:id="__x_buffer_8cpp_source_1l02383"/>02383 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_size&#32;&gt;&#32;size)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02384"/>02384 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(startindex&gt;=(<emphasis role="keywordtype">int</emphasis>)(size-_size)+1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02385"/>02385 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(startindex&lt;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02386"/>02386 
<anchor xml:id="__x_buffer_8cpp_source_1l02387"/>02387 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found;
<anchor xml:id="__x_buffer_8cpp_source_1l02388"/>02388 
<anchor xml:id="__x_buffer_8cpp_source_1l02389"/>02389 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=startindex;&#32;c&lt;(size-_size)+1;&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02390"/>02390 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02391"/>02391 &#32;&#32;&#32;&#32;&#32;&#32;found&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02392"/>02392 
<anchor xml:id="__x_buffer_8cpp_source_1l02393"/>02393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;d=0;&#32;d&lt;_size;&#32;d++)
<anchor xml:id="__x_buffer_8cpp_source_1l02394"/>02394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02395"/>02395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(this-&gt;buffer[c+d]&#32;!=&#32;_buffer[d])
<anchor xml:id="__x_buffer_8cpp_source_1l02396"/>02396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02397"/>02397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;found&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02398"/>02398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02399"/>02399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02400"/>02400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02401"/>02401 
<anchor xml:id="__x_buffer_8cpp_source_1l02402"/>02402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(found)&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="__x_buffer_8cpp_source_1l02403"/>02403 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02404"/>02404 
<anchor xml:id="__x_buffer_8cpp_source_1l02405"/>02405 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02406"/>02406 }
<anchor xml:id="__x_buffer_8cpp_source_1l02407"/>02407 
<anchor xml:id="__x_buffer_8cpp_source_1l02408"/>02408 
<anchor xml:id="__x_buffer_8cpp_source_1l02422"/><link linkend="_group___x_u_t_i_l_s_1gae76f1f546bd2988e1cd80db97749a873">02422</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga5ee4eef8129589bea780bdb56c1834d3">XBUFFER::Find</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;<emphasis role="keywordtype">string</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize,&#32;<emphasis role="keywordtype">int</emphasis>&#32;startindex)
<anchor xml:id="__x_buffer_8cpp_source_1l02423"/>02423 {
<anchor xml:id="__x_buffer_8cpp_source_1l02424"/>02424 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;buffer;
<anchor xml:id="__x_buffer_8cpp_source_1l02425"/>02425 
<anchor xml:id="__x_buffer_8cpp_source_1l02426"/>02426 &#32;&#32;buffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(<emphasis role="keywordtype">string</emphasis>,&#32;normalize);
<anchor xml:id="__x_buffer_8cpp_source_1l02427"/>02427 
<anchor xml:id="__x_buffer_8cpp_source_1l02428"/>02428 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga5ee4eef8129589bea780bdb56c1834d3">XBUFFER::Find</link>(&amp;buffer,&#32;startindex);
<anchor xml:id="__x_buffer_8cpp_source_1l02429"/>02429 }
<anchor xml:id="__x_buffer_8cpp_source_1l02430"/>02430 
<anchor xml:id="__x_buffer_8cpp_source_1l02431"/>02431 
<anchor xml:id="__x_buffer_8cpp_source_1l02441"/><link linkend="_group___x_u_t_i_l_s_1gad9853b9a078498602c2781a9f45fbe36">02441</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9853b9a078498602c2781a9f45fbe36">XBUFFER::operator = </link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02442"/>02442 {
<anchor xml:id="__x_buffer_8cpp_source_1l02443"/>02443 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1gafc53f10185dc4d03cb99dfa959de19d1">CopyFrom</link>((<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;)xbuffer);
<anchor xml:id="__x_buffer_8cpp_source_1l02444"/>02444 }
<anchor xml:id="__x_buffer_8cpp_source_1l02445"/>02445 
<anchor xml:id="__x_buffer_8cpp_source_1l02446"/>02446 
<anchor xml:id="__x_buffer_8cpp_source_1l02458"/><link linkend="_group___x_u_t_i_l_s_1ga7436554774630bd8c44bd6b5f1d0d81c">02458</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga7436554774630bd8c44bd6b5f1d0d81c">XBUFFER::operator == </link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02459"/>02459 {&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02460"/>02460 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02461"/>02461 }
<anchor xml:id="__x_buffer_8cpp_source_1l02462"/>02462 
<anchor xml:id="__x_buffer_8cpp_source_1l02463"/>02463 
<anchor xml:id="__x_buffer_8cpp_source_1l02475"/><link linkend="_group___x_u_t_i_l_s_1gacfa96cdc13f2eec890597a10c8f18c34">02475</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gacfa96cdc13f2eec890597a10c8f18c34">XBUFFER::operator != </link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02476"/>02476 {&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02477"/>02477 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02478"/>02478 }
<anchor xml:id="__x_buffer_8cpp_source_1l02479"/>02479 
<anchor xml:id="__x_buffer_8cpp_source_1l02480"/>02480 
<anchor xml:id="__x_buffer_8cpp_source_1l02492"/><link linkend="_group___x_u_t_i_l_s_1gafc53f10185dc4d03cb99dfa959de19d1">02492</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gafc53f10185dc4d03cb99dfa959de19d1">XBUFFER::CopyFrom</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02493"/>02493 {
<anchor xml:id="__x_buffer_8cpp_source_1l02494"/>02494 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga3c14ba0ca9dfbf20b5127c87b275cb93">Empty</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02495"/>02495 
<anchor xml:id="__x_buffer_8cpp_source_1l02496"/>02496 &#32;&#32;localhardwareuselittleendian&#32;=&#32;buffer.<link linkend="_group___x_u_t_i_l_s_1gaa0dd34f8ec0e800a96622c42c6e6ccf1">GetLocalHardwareUseLittleEndian</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02497"/>02497 &#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02498"/>02498 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(buffer.<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;buffer.<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>());
<anchor xml:id="__x_buffer_8cpp_source_1l02499"/>02499 }
<anchor xml:id="__x_buffer_8cpp_source_1l02500"/>02500 
<anchor xml:id="__x_buffer_8cpp_source_1l02501"/>02501 
<anchor xml:id="__x_buffer_8cpp_source_1l02513"/><link linkend="_group___x_u_t_i_l_s_1ga5888e0469358223f9008bfdfe54865b1">02513</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga5888e0469358223f9008bfdfe54865b1">XBUFFER::CopyTo</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02514"/>02514 {
<anchor xml:id="__x_buffer_8cpp_source_1l02515"/>02515 &#32;&#32;buffer.<link linkend="_group___x_u_t_i_l_s_1ga3c14ba0ca9dfbf20b5127c87b275cb93">Empty</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02516"/>02516 
<anchor xml:id="__x_buffer_8cpp_source_1l02517"/>02517 &#32;&#32;buffer.<link linkend="_group___x_u_t_i_l_s_1ga0db241bb6c353478652138e31b798696">SetLocalHardwareUseLittleEndian</link>(localhardwareuselittleendian);
<anchor xml:id="__x_buffer_8cpp_source_1l02518"/>02518 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02519"/>02519 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>());
<anchor xml:id="__x_buffer_8cpp_source_1l02520"/>02520 }
<anchor xml:id="__x_buffer_8cpp_source_1l02521"/>02521 
<anchor xml:id="__x_buffer_8cpp_source_1l02522"/>02522 
<anchor xml:id="__x_buffer_8cpp_source_1l02535"/><link linkend="_group___x_u_t_i_l_s_1ga5db6b2fa07edc08e214e0543439de409">02535</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga5db6b2fa07edc08e214e0543439de409">XBUFFER::Padding_Add</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;bitsadjust,&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35">XBUFFER_PADDINGTYPE</link>&#32;type)
<anchor xml:id="__x_buffer_8cpp_source_1l02536"/>02536 {
<anchor xml:id="__x_buffer_8cpp_source_1l02537"/>02537 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(paddinghas)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02538"/>02538 
<anchor xml:id="__x_buffer_8cpp_source_1l02539"/>02539 &#32;&#32;paddingbitadjust&#32;=&#32;bitsadjust;
<anchor xml:id="__x_buffer_8cpp_source_1l02540"/>02540 &#32;&#32;paddingsize&#32;&#32;&#32;&#32;&#32;=&#32;bitsadjust&#32;-&#32;(size&#32;%&#32;bitsadjust);
<anchor xml:id="__x_buffer_8cpp_source_1l02541"/>02541 
<anchor xml:id="__x_buffer_8cpp_source_1l02542"/>02542 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(type)
<anchor xml:id="__x_buffer_8cpp_source_1l02543"/>02543 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02544"/>02544 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35a73cc7eccafab0ae74dfc3669e9fdb2ad">XBUFFER_PADDINGTYPE_ZEROS</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="__x_buffer_8cpp_source_1l02545"/>02545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35ae7a60919fb522a3dfbec58611890bdda">XBUFFER_PADDINGTYPE_SPACES</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="__x_buffer_8cpp_source_1l02546"/>02546 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35a2f525c252e68d1a0f1c943926ed2d439">XBUFFER_PADDINGTYPE_PKCS7</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="__x_buffer_8cpp_source_1l02547"/>02547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35abc0e73b3b4f382979fe7bf2322e7cf77">XBUFFER_PADDINGTYPE_PKCS5</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;c&lt;paddingsize;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02548"/>02548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02549"/>02549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(type)
<anchor xml:id="__x_buffer_8cpp_source_1l02550"/>02550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02551"/>02551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35a73cc7eccafab0ae74dfc3669e9fdb2ad">XBUFFER_PADDINGTYPE_ZEROS</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0x00);
<anchor xml:id="__x_buffer_8cpp_source_1l02552"/>02552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02553"/>02553 
<anchor xml:id="__x_buffer_8cpp_source_1l02554"/>02554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35ae7a60919fb522a3dfbec58611890bdda">XBUFFER_PADDINGTYPE_SPACES</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0x20);
<anchor xml:id="__x_buffer_8cpp_source_1l02555"/>02555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02556"/>02556 
<anchor xml:id="__x_buffer_8cpp_source_1l02557"/>02557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35a2f525c252e68d1a0f1c943926ed2d439">XBUFFER_PADDINGTYPE_PKCS7</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="__x_buffer_8cpp_source_1l02558"/>02558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35abc0e73b3b4f382979fe7bf2322e7cf77">XBUFFER_PADDINGTYPE_PKCS5</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)paddingsize);
<anchor xml:id="__x_buffer_8cpp_source_1l02559"/>02559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02560"/>02560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02561"/>02561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02562"/>02562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02563"/>02563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02564"/>02564 
<anchor xml:id="__x_buffer_8cpp_source_1l02565"/>02565 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35a85f637ad3a6a612ff85d5a22247c5847">XBUFFER_PADDINGTYPE_ANSIX923</link>&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;c&lt;paddingsize-1;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02566"/>02566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02567"/>02567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0x00);
<anchor xml:id="__x_buffer_8cpp_source_1l02568"/>02568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02569"/>02569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)paddingsize);
<anchor xml:id="__x_buffer_8cpp_source_1l02570"/>02570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02571"/>02571 
<anchor xml:id="__x_buffer_8cpp_source_1l02572"/>02572 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35aba807d6306d2c81b6a11b6509a5be5fa">XBUFFER_PADDINGTYPE_ISO10126</link>&#32;&#32;&#32;&#32;&#32;:&#32;{&#32;<link linkend="_class_x_r_a_n_d">XRAND</link>*&#32;GEN_XFACTORY_CREATE(xrand,&#32;CreateRand())
<anchor xml:id="__x_buffer_8cpp_source_1l02573"/>02573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xrand)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02574"/>02574 
<anchor xml:id="__x_buffer_8cpp_source_1l02575"/>02575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;c&lt;paddingsize-1;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02576"/>02576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02577"/>02577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0x00);
<anchor xml:id="__x_buffer_8cpp_source_1l02578"/>02578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02579"/>02579 
<anchor xml:id="__x_buffer_8cpp_source_1l02580"/>02580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)paddingsize);
<anchor xml:id="__x_buffer_8cpp_source_1l02581"/>02581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GEN_XFACTORY.DeleteRand(xrand);
<anchor xml:id="__x_buffer_8cpp_source_1l02582"/>02582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02583"/>02583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02584"/>02584 
<anchor xml:id="__x_buffer_8cpp_source_1l02585"/>02585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35a15ad0c568cf9433f50488a5237923329">XBUFFER_PADDINGTYPE_ISOIEC7816_4</link>&#32;:&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0x80);
<anchor xml:id="__x_buffer_8cpp_source_1l02586"/>02586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;c&lt;paddingsize-1;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02587"/>02587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02588"/>02588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0x00);
<anchor xml:id="__x_buffer_8cpp_source_1l02589"/>02589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02590"/>02590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02591"/>02591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02592"/>02592 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02593"/>02593 
<anchor xml:id="__x_buffer_8cpp_source_1l02594"/>02594 &#32;&#32;paddinghas&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02595"/>02595 
<anchor xml:id="__x_buffer_8cpp_source_1l02596"/>02596 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02597"/>02597 }
<anchor xml:id="__x_buffer_8cpp_source_1l02598"/>02598 
<anchor xml:id="__x_buffer_8cpp_source_1l02599"/>02599 
<anchor xml:id="__x_buffer_8cpp_source_1l02609"/><link linkend="_group___x_u_t_i_l_s_1ga2f1de90177164696ef36eb5d55351fbd">02609</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga2f1de90177164696ef36eb5d55351fbd">XBUFFER::Padding_Has</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02610"/>02610 {
<anchor xml:id="__x_buffer_8cpp_source_1l02611"/>02611 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;paddinghas;
<anchor xml:id="__x_buffer_8cpp_source_1l02612"/>02612 }
<anchor xml:id="__x_buffer_8cpp_source_1l02613"/>02613 
<anchor xml:id="__x_buffer_8cpp_source_1l02614"/>02614 
<anchor xml:id="__x_buffer_8cpp_source_1l02624"/><link linkend="_group___x_u_t_i_l_s_1ga596d87c3bcaf6788e261a20fa2135fdf">02624</link> <link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35">XBUFFER_PADDINGTYPE</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga596d87c3bcaf6788e261a20fa2135fdf">XBUFFER::Padding_GetType</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02625"/>02625 {
<anchor xml:id="__x_buffer_8cpp_source_1l02626"/>02626 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;paddingtype;
<anchor xml:id="__x_buffer_8cpp_source_1l02627"/>02627 }
<anchor xml:id="__x_buffer_8cpp_source_1l02628"/>02628 
<anchor xml:id="__x_buffer_8cpp_source_1l02629"/>02629 
<anchor xml:id="__x_buffer_8cpp_source_1l02639"/><link linkend="_group___x_u_t_i_l_s_1ga70e929caf10b7af812b0f831829d8d9b">02639</link> <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga70e929caf10b7af812b0f831829d8d9b">XBUFFER::Padding_GetSize</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02640"/>02640 {
<anchor xml:id="__x_buffer_8cpp_source_1l02641"/>02641 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;paddingsize;
<anchor xml:id="__x_buffer_8cpp_source_1l02642"/>02642 }
<anchor xml:id="__x_buffer_8cpp_source_1l02643"/>02643 
<anchor xml:id="__x_buffer_8cpp_source_1l02644"/>02644 
<anchor xml:id="__x_buffer_8cpp_source_1l02654"/><link linkend="_group___x_u_t_i_l_s_1ga4c0dba30c747eea8e17417333d4972f7">02654</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga4c0dba30c747eea8e17417333d4972f7">XBUFFER::Padding_Delete</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02655"/>02655 {
<anchor xml:id="__x_buffer_8cpp_source_1l02656"/>02656 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!paddinghas)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02657"/>02657 
<anchor xml:id="__x_buffer_8cpp_source_1l02658"/>02658 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;newsize&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>()&#32;-&#32;<link linkend="_group___x_u_t_i_l_s_1ga70e929caf10b7af812b0f831829d8d9b">Padding_GetSize</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02659"/>02659 
<anchor xml:id="__x_buffer_8cpp_source_1l02660"/>02660 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1gacf69e379f1d0bf812ae9c1157eac172c">Resize</link>(newsize&#32;,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02661"/>02661 
<anchor xml:id="__x_buffer_8cpp_source_1l02662"/>02662 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((<emphasis role="keywordtype">int</emphasis>)<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>()&#32;!=&#32;newsize)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02663"/>02663 
<anchor xml:id="__x_buffer_8cpp_source_1l02664"/>02664 &#32;&#32;paddinghas&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02665"/>02665 &#32;&#32;paddingbitadjust&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02666"/>02666 &#32;&#32;paddingsize&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02667"/>02667 
<anchor xml:id="__x_buffer_8cpp_source_1l02668"/>02668 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02669"/>02669 }
<anchor xml:id="__x_buffer_8cpp_source_1l02670"/>02670 
<anchor xml:id="__x_buffer_8cpp_source_1l02671"/>02671 
<anchor xml:id="__x_buffer_8cpp_source_1l02681"/><link linkend="_group___x_u_t_i_l_s_1ga4ef9d8d6c4147f68745f44453c05d80c">02681</link> <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga4ef9d8d6c4147f68745f44453c05d80c">XBUFFER::Bit_GetNBits</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02682"/>02682 {
<anchor xml:id="__x_buffer_8cpp_source_1l02683"/>02683 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02684"/>02684 }
<anchor xml:id="__x_buffer_8cpp_source_1l02685"/>02685 
<anchor xml:id="__x_buffer_8cpp_source_1l02686"/>02686 
<anchor xml:id="__x_buffer_8cpp_source_1l02698"/><link linkend="_group___x_u_t_i_l_s_1ga54df86770135b880c0f74632fda45cbd">02698</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga54df86770135b880c0f74632fda45cbd">XBUFFER::Bit_SetNBits</link>(<emphasis role="keywordtype">int</emphasis>&#32;nbits)
<anchor xml:id="__x_buffer_8cpp_source_1l02699"/>02699 {
<anchor xml:id="__x_buffer_8cpp_source_1l02700"/>02700 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(nbits&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02701"/>02701 
<anchor xml:id="__x_buffer_8cpp_source_1l02702"/>02702 &#32;&#32;this-&gt;nbits&#32;=&#32;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02703"/>02703 
<anchor xml:id="__x_buffer_8cpp_source_1l02704"/>02704 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02705"/>02705 }
<anchor xml:id="__x_buffer_8cpp_source_1l02706"/>02706 
<anchor xml:id="__x_buffer_8cpp_source_1l02707"/>02707 
<anchor xml:id="__x_buffer_8cpp_source_1l02720"/><link linkend="_group___x_u_t_i_l_s_1gabd49ed485524249612e9620769e55a3b">02720</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gabd49ed485524249612e9620769e55a3b">XBUFFER::Bit_AddData</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbits)
<anchor xml:id="__x_buffer_8cpp_source_1l02721"/>02721 {
<anchor xml:id="__x_buffer_8cpp_source_1l02722"/>02722 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_nbits&#32;=&#32;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02723"/>02723 
<anchor xml:id="__x_buffer_8cpp_source_1l02724"/>02724 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;==&#32;<link linkend="__x_buffer_8h_1af747e63eceb3b84b3d9638f3b492aee8">XBUFFER_MASTER_NBITS</link>)&#32;&#32;_nbits&#32;=&#32;this-&gt;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02725"/>02725 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02726"/>02726 
<anchor xml:id="__x_buffer_8cpp_source_1l02727"/>02727 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;&gt;&#32;nbitsfree)
<anchor xml:id="__x_buffer_8cpp_source_1l02728"/>02728 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02729"/>02729 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;missingbits&#32;&#32;&#32;=&#32;(_nbits&#32;-&#32;nbitsfree);
<anchor xml:id="__x_buffer_8cpp_source_1l02730"/>02730 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;missingbytes&#32;&#32;=&#32;(missingbits&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02731"/>02731 
<anchor xml:id="__x_buffer_8cpp_source_1l02732"/>02732 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(missingbits&#32;%&#32;8)&#32;&#32;missingbytes++;
<anchor xml:id="__x_buffer_8cpp_source_1l02733"/>02733 
<anchor xml:id="__x_buffer_8cpp_source_1l02734"/>02734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;missingbytes;&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02735"/>02735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02736"/>02736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0);
<anchor xml:id="__x_buffer_8cpp_source_1l02737"/>02737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02738"/>02738 
<anchor xml:id="__x_buffer_8cpp_source_1l02739"/>02739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;nbitsfree&#32;+=&#32;&#32;(missingbytes&#32;*&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02740"/>02740 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02741"/>02741 
<anchor xml:id="__x_buffer_8cpp_source_1l02742"/>02742 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;posbyte;
<anchor xml:id="__x_buffer_8cpp_source_1l02743"/>02743 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;posbit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>()&#32;*&#32;8;
<anchor xml:id="__x_buffer_8cpp_source_1l02744"/>02744 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;possubbyte;
<anchor xml:id="__x_buffer_8cpp_source_1l02745"/>02745 &#32;&#32;<emphasis role="comment">//int&#32;&#32;&#32;&#32;&#32;nbytes&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(_nbits&#32;/&#32;8);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l02746"/>02746 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;mask&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02747"/>02747 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l02748"/>02748 
<anchor xml:id="__x_buffer_8cpp_source_1l02749"/>02749 &#32;&#32;<emphasis role="comment">//if(_nbits&#32;%&#32;8)&#32;&#32;nbytes++;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l02750"/>02750 
<anchor xml:id="__x_buffer_8cpp_source_1l02751"/>02751 &#32;&#32;posbit&#32;&#32;&#32;&#32;&#32;-=&#32;nbitsfree;
<anchor xml:id="__x_buffer_8cpp_source_1l02752"/>02752 &#32;&#32;posbyte&#32;&#32;&#32;&#32;&#32;=&#32;(posbit&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02753"/>02753 &#32;&#32;possubbyte&#32;&#32;=&#32;(posbit&#32;%&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02754"/>02754 
<anchor xml:id="__x_buffer_8cpp_source_1l02755"/>02755 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;_nbits;&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02756"/>02756 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02757"/>02757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;mask&#32;&#32;|=&#32;0x01;
<anchor xml:id="__x_buffer_8cpp_source_1l02758"/>02758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(c&#32;!=&#32;_nbits-1)&#32;mask&#32;&lt;&lt;=&#32;0x01;
<anchor xml:id="__x_buffer_8cpp_source_1l02759"/>02759 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02760"/>02760 
<anchor xml:id="__x_buffer_8cpp_source_1l02761"/>02761 &#32;&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;&#32;_data&#32;=&#32;data;
<anchor xml:id="__x_buffer_8cpp_source_1l02762"/>02762 &#32;&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;&#32;_dataorg&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02763"/>02763 
<anchor xml:id="__x_buffer_8cpp_source_1l02764"/>02764 &#32;&#32;_data&#32;&amp;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)mask;
<anchor xml:id="__x_buffer_8cpp_source_1l02765"/>02765 &#32;&#32;_data&#32;&lt;&lt;=&#32;((<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)*8)&#32;-&#32;_nbits);
<anchor xml:id="__x_buffer_8cpp_source_1l02766"/>02766 &#32;&#32;_data&#32;&gt;&gt;=&#32;possubbyte;
<anchor xml:id="__x_buffer_8cpp_source_1l02767"/>02767 
<anchor xml:id="__x_buffer_8cpp_source_1l02768"/>02768 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbytescpy&#32;=&#32;((_nbits&#32;+&#32;possubbyte)&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02769"/>02769 
<anchor xml:id="__x_buffer_8cpp_source_1l02770"/>02770 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((_nbits&#32;+&#32;possubbyte)&#32;%&#32;8)&#32;nbytescpy++;
<anchor xml:id="__x_buffer_8cpp_source_1l02771"/>02771 
<anchor xml:id="__x_buffer_8cpp_source_1l02772"/>02772 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((posbyte&#32;+&#32;nbytescpy)&#32;&gt;=&#32;(int)<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>())
<anchor xml:id="__x_buffer_8cpp_source_1l02773"/>02773 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02774"/>02774 &#32;&#32;&#32;&#32;&#32;&#32;nbytescpy&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>()&#32;-&#32;posbyte;
<anchor xml:id="__x_buffer_8cpp_source_1l02775"/>02775 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02776"/>02776 
<anchor xml:id="__x_buffer_8cpp_source_1l02777"/>02777 &#32;&#32;status&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;_dataorg,&#32;nbytescpy,&#32;posbyte);
<anchor xml:id="__x_buffer_8cpp_source_1l02778"/>02778 &#32;&#32;_dataorg&#32;=&#32;<link linkend="__x_base_8cpp_1a51d327cd1dc2f2ae08c70596880dd85f">SwapQWORD</link>(_dataorg);
<anchor xml:id="__x_buffer_8cpp_source_1l02779"/>02779 
<anchor xml:id="__x_buffer_8cpp_source_1l02780"/>02780 &#32;&#32;_data&#32;|=&#32;_dataorg;
<anchor xml:id="__x_buffer_8cpp_source_1l02781"/>02781 
<anchor xml:id="__x_buffer_8cpp_source_1l02782"/>02782 &#32;&#32;_data&#32;=&#32;<link linkend="__x_base_8cpp_1a51d327cd1dc2f2ae08c70596880dd85f">SwapQWORD</link>(_data);
<anchor xml:id="__x_buffer_8cpp_source_1l02783"/>02783 &#32;&#32;status&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;_data,&#32;nbytescpy,&#32;posbyte);
<anchor xml:id="__x_buffer_8cpp_source_1l02784"/>02784 
<anchor xml:id="__x_buffer_8cpp_source_1l02785"/>02785 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;nbitsfree&#32;-=&#32;_nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02786"/>02786 
<anchor xml:id="__x_buffer_8cpp_source_1l02787"/>02787 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l02788"/>02788 }
<anchor xml:id="__x_buffer_8cpp_source_1l02789"/>02789 
<anchor xml:id="__x_buffer_8cpp_source_1l02790"/>02790 
<anchor xml:id="__x_buffer_8cpp_source_1l02803"/><link linkend="_group___x_u_t_i_l_s_1ga663932ac2a0349ac615582adb0b001b8">02803</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga663932ac2a0349ac615582adb0b001b8">XBUFFER::Bit_GetData</link>(<emphasis role="keywordtype">int</emphasis>&#32;indexbit,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbits)
<anchor xml:id="__x_buffer_8cpp_source_1l02804"/>02804 {
<anchor xml:id="__x_buffer_8cpp_source_1l02805"/>02805 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_nbits&#32;=&#32;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02806"/>02806 
<anchor xml:id="__x_buffer_8cpp_source_1l02807"/>02807 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;==&#32;<link linkend="__x_buffer_8h_1af747e63eceb3b84b3d9638f3b492aee8">XBUFFER_MASTER_NBITS</link>)&#32;&#32;_nbits&#32;=&#32;this-&gt;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02808"/>02808 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02809"/>02809 
<anchor xml:id="__x_buffer_8cpp_source_1l02810"/>02810 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;data&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02811"/>02811 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;posbyte&#32;&#32;&#32;=&#32;(indexbit&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02812"/>02812 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;posbit&#32;&#32;&#32;&#32;=&#32;(indexbit&#32;%&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02813"/>02813 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;mask&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02814"/>02814 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;nbytescpy&#32;=&#32;(_nbits&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02815"/>02815 
<anchor xml:id="__x_buffer_8cpp_source_1l02816"/>02816 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;%&#32;8)&#32;&#32;nbytescpy++;
<anchor xml:id="__x_buffer_8cpp_source_1l02817"/>02817 
<anchor xml:id="__x_buffer_8cpp_source_1l02818"/>02818 &#32;&#32;nbytescpy++;
<anchor xml:id="__x_buffer_8cpp_source_1l02819"/>02819 
<anchor xml:id="__x_buffer_8cpp_source_1l02820"/>02820 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(posbyte&#32;+&#32;nbytescpy&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)size)
<anchor xml:id="__x_buffer_8cpp_source_1l02821"/>02821 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02822"/>02822 &#32;&#32;&#32;&#32;&#32;&#32;nbytescpy&#32;=&#32;(size&#32;-&#32;posbyte);
<anchor xml:id="__x_buffer_8cpp_source_1l02823"/>02823 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02824"/>02824 
<anchor xml:id="__x_buffer_8cpp_source_1l02825"/>02825 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;nbytescpy,&#32;posbyte))&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02826"/>02826 
<anchor xml:id="__x_buffer_8cpp_source_1l02827"/>02827 &#32;&#32;data&#32;=&#32;<link linkend="__x_base_8cpp_1a4d1da17fcb47e6bff9f2dbc0e680d593">SwapDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l02828"/>02828 
<anchor xml:id="__x_buffer_8cpp_source_1l02829"/>02829 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;_nbits;&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02830"/>02830 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02831"/>02831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;mask&#32;&#32;|=&#32;0x01;
<anchor xml:id="__x_buffer_8cpp_source_1l02832"/>02832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(c&#32;!=&#32;_nbits-1)&#32;mask&#32;&lt;&lt;=&#32;0x01;
<anchor xml:id="__x_buffer_8cpp_source_1l02833"/>02833 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02834"/>02834 
<anchor xml:id="__x_buffer_8cpp_source_1l02835"/>02835 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;displacement&#32;=&#32;(posbit&#32;+&#32;_nbits);
<anchor xml:id="__x_buffer_8cpp_source_1l02836"/>02836 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(displacement&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8))&#32;&#32;displacement&#32;=&#32;(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8);
<anchor xml:id="__x_buffer_8cpp_source_1l02837"/>02837 
<anchor xml:id="__x_buffer_8cpp_source_1l02838"/>02838 &#32;&#32;data&#32;&gt;&gt;=&#32;((<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8)&#32;-&#32;displacement);
<anchor xml:id="__x_buffer_8cpp_source_1l02839"/>02839 
<anchor xml:id="__x_buffer_8cpp_source_1l02840"/>02840 &#32;&#32;data&#32;&amp;=&#32;mask;
<anchor xml:id="__x_buffer_8cpp_source_1l02841"/>02841 
<anchor xml:id="__x_buffer_8cpp_source_1l02842"/>02842 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
<anchor xml:id="__x_buffer_8cpp_source_1l02843"/>02843 }
<anchor xml:id="__x_buffer_8cpp_source_1l02844"/>02844 
<anchor xml:id="__x_buffer_8cpp_source_1l02845"/>02845 
<anchor xml:id="__x_buffer_8cpp_source_1l02859"/><link linkend="_group___x_u_t_i_l_s_1gaabc121f5953329bef32255b74e12e274">02859</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gaabc121f5953329bef32255b74e12e274">XBUFFER::Bit_SetData</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexbit,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbits)
<anchor xml:id="__x_buffer_8cpp_source_1l02860"/>02860 {
<anchor xml:id="__x_buffer_8cpp_source_1l02861"/>02861 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_nbits&#32;=&#32;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02862"/>02862 
<anchor xml:id="__x_buffer_8cpp_source_1l02863"/>02863 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;==&#32;<link linkend="__x_buffer_8h_1af747e63eceb3b84b3d9638f3b492aee8">XBUFFER_MASTER_NBITS</link>)&#32;&#32;_nbits&#32;=&#32;this-&gt;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02864"/>02864 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8))&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02865"/>02865 
<anchor xml:id="__x_buffer_8cpp_source_1l02866"/>02866 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;posbyte&#32;&#32;&#32;=&#32;(indexbit&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02867"/>02867 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;posbit&#32;&#32;&#32;&#32;=&#32;(indexbit&#32;%&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02868"/>02868 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;mask&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02869"/>02869 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;nbytescpy&#32;=&#32;(_nbits&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02870"/>02870 
<anchor xml:id="__x_buffer_8cpp_source_1l02871"/>02871 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;%&#32;8)&#32;&#32;nbytescpy++;
<anchor xml:id="__x_buffer_8cpp_source_1l02872"/>02872 
<anchor xml:id="__x_buffer_8cpp_source_1l02873"/>02873 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(posbyte&#32;+&#32;nbytescpy&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)size)
<anchor xml:id="__x_buffer_8cpp_source_1l02874"/>02874 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02875"/>02875 &#32;&#32;&#32;&#32;&#32;&#32;nbytescpy&#32;=&#32;(size&#32;-&#32;posbyte);
<anchor xml:id="__x_buffer_8cpp_source_1l02876"/>02876 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02877"/>02877 
<anchor xml:id="__x_buffer_8cpp_source_1l02878"/>02878 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;_nbits;&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02879"/>02879 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02880"/>02880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;mask&#32;&#32;|=&#32;0x01;
<anchor xml:id="__x_buffer_8cpp_source_1l02881"/>02881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(c&#32;!=&#32;_nbits-1)&#32;mask&#32;&lt;&lt;=&#32;0x01;
<anchor xml:id="__x_buffer_8cpp_source_1l02882"/>02882 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02883"/>02883 
<anchor xml:id="__x_buffer_8cpp_source_1l02884"/>02884 &#32;&#32;data&#32;&amp;=&#32;mask;
<anchor xml:id="__x_buffer_8cpp_source_1l02885"/>02885 
<anchor xml:id="__x_buffer_8cpp_source_1l02886"/>02886 &#32;&#32;data&#32;&lt;&lt;=&#32;((<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8)&#32;-&#32;(posbit&#32;+&#32;_nbits));
<anchor xml:id="__x_buffer_8cpp_source_1l02887"/>02887 
<anchor xml:id="__x_buffer_8cpp_source_1l02888"/>02888 &#32;&#32;data&#32;=&#32;<link linkend="__x_base_8cpp_1a4d1da17fcb47e6bff9f2dbc0e680d593">SwapDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l02889"/>02889 
<anchor xml:id="__x_buffer_8cpp_source_1l02890"/>02890 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;nbytescpy,&#32;posbyte);
<anchor xml:id="__x_buffer_8cpp_source_1l02891"/>02891 }
<anchor xml:id="__x_buffer_8cpp_source_1l02892"/>02892 
<anchor xml:id="__x_buffer_8cpp_source_1l02893"/>02893 
<anchor xml:id="__x_buffer_8cpp_source_1l02903"/><link linkend="_group___x_u_t_i_l_s_1ga8ab66ddced2a6ad9704b3358c5a01f05">02903</link> <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga8ab66ddced2a6ad9704b3358c5a01f05">XBUFFER::Bit_GetBitsFree</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02904"/>02904 {
<anchor xml:id="__x_buffer_8cpp_source_1l02905"/>02905 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nbitsfree;
<anchor xml:id="__x_buffer_8cpp_source_1l02906"/>02906 }
<anchor xml:id="__x_buffer_8cpp_source_1l02907"/>02907 
<anchor xml:id="__x_buffer_8cpp_source_1l02908"/>02908 
<anchor xml:id="__x_buffer_8cpp_source_1l02920"/><link linkend="_group___x_u_t_i_l_s_1ga9a638f1f7120a297698bc4b09c7273ef">02920</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga9a638f1f7120a297698bc4b09c7273ef">XBUFFER::Bit_SetBitsFree</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;nbitsfree)
<anchor xml:id="__x_buffer_8cpp_source_1l02921"/>02921 {
<anchor xml:id="__x_buffer_8cpp_source_1l02922"/>02922 &#32;&#32;this-&gt;nbitsfree&#32;=&#32;nbitsfree;
<anchor xml:id="__x_buffer_8cpp_source_1l02923"/>02923 
<anchor xml:id="__x_buffer_8cpp_source_1l02924"/>02924 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02925"/>02925 }
<anchor xml:id="__x_buffer_8cpp_source_1l02926"/>02926 
<anchor xml:id="__x_buffer_8cpp_source_1l02927"/>02927 
<anchor xml:id="__x_buffer_8cpp_source_1l02939"/><link linkend="_group___x_u_t_i_l_s_1gafdcaba31a1f968d78d0c5ba3c481e6fc">02939</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gafdcaba31a1f968d78d0c5ba3c481e6fc">XBUFFER::ConvertFromBase64</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;in_stringbase64)
<anchor xml:id="__x_buffer_8cpp_source_1l02940"/>02940 {
<anchor xml:id="__x_buffer_8cpp_source_1l02941"/>02941 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;in_stringbase64.<link linkend="_group___x_u_t_i_l_s_1ga1c68558db6e3e6cc5ffa5eabf54b7f2f">ConvertBase64ToBinary</link>((*<emphasis role="keyword">this</emphasis>));
<anchor xml:id="__x_buffer_8cpp_source_1l02942"/>02942 }
<anchor xml:id="__x_buffer_8cpp_source_1l02943"/>02943 
<anchor xml:id="__x_buffer_8cpp_source_1l02944"/>02944 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02956"/><link linkend="_group___x_u_t_i_l_s_1gab7805e30032bd7d9d149edf1dfb5b39c">02956</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gab7805e30032bd7d9d149edf1dfb5b39c">XBUFFER::ConvertToBase64</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;out_stringbase64)
<anchor xml:id="__x_buffer_8cpp_source_1l02957"/>02957 {
<anchor xml:id="__x_buffer_8cpp_source_1l02958"/>02958 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out_stringbase64.<link linkend="_group___x_u_t_i_l_s_1ga61dbc7f33192259807766c84302d00ba">ConvertBinaryToBase64</link>((*<emphasis role="keyword">this</emphasis>));
<anchor xml:id="__x_buffer_8cpp_source_1l02959"/>02959 }
<anchor xml:id="__x_buffer_8cpp_source_1l02960"/>02960 
<anchor xml:id="__x_buffer_8cpp_source_1l02961"/>02961 
<anchor xml:id="__x_buffer_8cpp_source_1l02974"/><link linkend="_group___x_u_t_i_l_s_1ga3c41a101ef869b1d34cc6baf2be58d3e">02974</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_group___x_u_t_i_l_s_1ga3c41a101ef869b1d34cc6baf2be58d3e">XBUFFER::DecodeBCD</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize)
<anchor xml:id="__x_buffer_8cpp_source_1l02975"/>02975 {
<anchor xml:id="__x_buffer_8cpp_source_1l02976"/>02976 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;result&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02977"/>02977 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;position&#32;=&#32;ppos;
<anchor xml:id="__x_buffer_8cpp_source_1l02978"/>02978 
<anchor xml:id="__x_buffer_8cpp_source_1l02979"/>02979 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(psize--)
<anchor xml:id="__x_buffer_8cpp_source_1l02980"/>02980 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02981"/>02981 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;nibble1&#32;=&#32;(&#32;buffer[position]&#32;&amp;&#32;0x0F);
<anchor xml:id="__x_buffer_8cpp_source_1l02982"/>02982 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;nibble2&#32;=&#32;((buffer[position]&#32;&amp;&#32;0xF0)&gt;&gt;4);
<anchor xml:id="__x_buffer_8cpp_source_1l02983"/>02983 
<anchor xml:id="__x_buffer_8cpp_source_1l02984"/>02984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nibble1&#32;&gt;&#32;9)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02985"/>02985 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nibble2&#32;&gt;&#32;9)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02986"/>02986 
<anchor xml:id="__x_buffer_8cpp_source_1l02987"/>02987 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;(result&#32;*&#32;100)&#32;+&#32;((buffer[position]&#32;&gt;&gt;&#32;4)&#32;*&#32;10)&#32;+&#32;(buffer[position]&#32;&amp;&#32;0x0F);
<anchor xml:id="__x_buffer_8cpp_source_1l02988"/>02988 &#32;&#32;&#32;&#32;&#32;&#32;position++;
<anchor xml:id="__x_buffer_8cpp_source_1l02989"/>02989 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02990"/>02990 
<anchor xml:id="__x_buffer_8cpp_source_1l02991"/>02991 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__x_buffer_8cpp_source_1l02992"/>02992 }
<anchor xml:id="__x_buffer_8cpp_source_1l02993"/>02993 
<anchor xml:id="__x_buffer_8cpp_source_1l02994"/>02994 
<anchor xml:id="__x_buffer_8cpp_source_1l03007"/><link linkend="_group___x_u_t_i_l_s_1gaaac92b3ebc2f24d48c96336ff457770b">03007</link> <link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;<link linkend="_group___x_u_t_i_l_s_1gaaac92b3ebc2f24d48c96336ff457770b">XBUFFER::DecodeBCDLong</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize)
<anchor xml:id="__x_buffer_8cpp_source_1l03008"/>03008 {
<anchor xml:id="__x_buffer_8cpp_source_1l03009"/>03009 &#32;&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;result&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03010"/>03010 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;position&#32;=&#32;ppos;
<anchor xml:id="__x_buffer_8cpp_source_1l03011"/>03011 
<anchor xml:id="__x_buffer_8cpp_source_1l03012"/>03012 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(psize--)
<anchor xml:id="__x_buffer_8cpp_source_1l03013"/>03013 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03014"/>03014 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;nibble1&#32;=&#32;(&#32;buffer[position]&#32;&amp;&#32;0x0F);
<anchor xml:id="__x_buffer_8cpp_source_1l03015"/>03015 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;nibble2&#32;=&#32;((buffer[position]&#32;&amp;&#32;0xF0)&gt;&gt;4);
<anchor xml:id="__x_buffer_8cpp_source_1l03016"/>03016 
<anchor xml:id="__x_buffer_8cpp_source_1l03017"/>03017 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nibble1&#32;&gt;&#32;9)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03018"/>03018 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nibble2&#32;&gt;&#32;9)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03019"/>03019 
<anchor xml:id="__x_buffer_8cpp_source_1l03020"/>03020 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;&#32;=&#32;(result&#32;*&#32;100);
<anchor xml:id="__x_buffer_8cpp_source_1l03021"/>03021 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;((buffer[position]&#32;&gt;&gt;&#32;4)&#32;*&#32;10);
<anchor xml:id="__x_buffer_8cpp_source_1l03022"/>03022 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;(buffer[position]&#32;&amp;&#32;0x0F);
<anchor xml:id="__x_buffer_8cpp_source_1l03023"/>03023 
<anchor xml:id="__x_buffer_8cpp_source_1l03024"/>03024 &#32;&#32;&#32;&#32;&#32;&#32;position++;
<anchor xml:id="__x_buffer_8cpp_source_1l03025"/>03025 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03026"/>03026 
<anchor xml:id="__x_buffer_8cpp_source_1l03027"/>03027 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__x_buffer_8cpp_source_1l03028"/>03028 }
<anchor xml:id="__x_buffer_8cpp_source_1l03029"/>03029 
<anchor xml:id="__x_buffer_8cpp_source_1l03030"/>03030 
<anchor xml:id="__x_buffer_8cpp_source_1l03040"/><link linkend="_group___x_u_t_i_l_s_1ga4212724c3aee3949a771c17ff36f1387">03040</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga4212724c3aee3949a771c17ff36f1387">XBUFFER::GetGlobalHardwareUseLittleEndian</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l03041"/>03041 {
<anchor xml:id="__x_buffer_8cpp_source_1l03042"/>03042 &#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;XBUFFER::globalhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l03043"/>03043 }
<anchor xml:id="__x_buffer_8cpp_source_1l03044"/>03044 
<anchor xml:id="__x_buffer_8cpp_source_1l03045"/>03045 
<anchor xml:id="__x_buffer_8cpp_source_1l03055"/><link linkend="_group___x_u_t_i_l_s_1gac95db3e8f5e7039ae31ceec8cdead6e0">03055</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gac95db3e8f5e7039ae31ceec8cdead6e0">XBUFFER::SetGlobalHardwareUseLittleEndian</link>(<emphasis role="keywordtype">bool</emphasis>&#32;globalhardwareuselittleendian)
<anchor xml:id="__x_buffer_8cpp_source_1l03056"/>03056 {
<anchor xml:id="__x_buffer_8cpp_source_1l03057"/>03057 &#32;&#32;XBUFFER::globalhardwareuselittleendian&#32;=&#32;globalhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l03058"/>03058 }
<anchor xml:id="__x_buffer_8cpp_source_1l03059"/>03059 
<anchor xml:id="__x_buffer_8cpp_source_1l03060"/>03060 
<anchor xml:id="__x_buffer_8cpp_source_1l03070"/><link linkend="_group___x_u_t_i_l_s_1gaa0dd34f8ec0e800a96622c42c6e6ccf1">03070</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gaa0dd34f8ec0e800a96622c42c6e6ccf1">XBUFFER::GetLocalHardwareUseLittleEndian</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l03071"/>03071 {
<anchor xml:id="__x_buffer_8cpp_source_1l03072"/>03072 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;localhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l03073"/>03073 }
<anchor xml:id="__x_buffer_8cpp_source_1l03074"/>03074 
<anchor xml:id="__x_buffer_8cpp_source_1l03075"/>03075 
<anchor xml:id="__x_buffer_8cpp_source_1l03085"/><link linkend="_group___x_u_t_i_l_s_1ga0db241bb6c353478652138e31b798696">03085</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga0db241bb6c353478652138e31b798696">XBUFFER::SetLocalHardwareUseLittleEndian</link>(<emphasis role="keywordtype">bool</emphasis>&#32;localhardwareuselittleendian)
<anchor xml:id="__x_buffer_8cpp_source_1l03086"/>03086 {
<anchor xml:id="__x_buffer_8cpp_source_1l03087"/>03087 &#32;&#32;this-&gt;localhardwareuselittleendian&#32;=&#32;localhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l03088"/>03088 }
<anchor xml:id="__x_buffer_8cpp_source_1l03089"/>03089 
<anchor xml:id="__x_buffer_8cpp_source_1l03090"/>03090 
<anchor xml:id="__x_buffer_8cpp_source_1l03104"/>03104 <emphasis role="keywordtype">bool</emphasis>&#32;XBUFFER::AddXBufferWithMask(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l03105"/>03105 {
<anchor xml:id="__x_buffer_8cpp_source_1l03106"/>03106 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03107"/>03107 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask[0])&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03108"/>03108 
<anchor xml:id="__x_buffer_8cpp_source_1l03109"/>03109 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03110"/>03110 
<anchor xml:id="__x_buffer_8cpp_source_1l03111"/>03111 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(mask[c])
<anchor xml:id="__x_buffer_8cpp_source_1l03112"/>03112 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03113"/>03113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(mask[c])
<anchor xml:id="__x_buffer_8cpp_source_1l03114"/>03114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03115"/>03115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;B&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;bvar&#32;&#32;=&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)va_arg(arg,&#32;<emphasis role="keywordtype">int</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l03116"/>03116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)bvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03117"/>03117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03118"/>03118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03119"/>03119 
<anchor xml:id="__x_buffer_8cpp_source_1l03120"/>03120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;W&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;wvar&#32;&#32;=&#32;(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>)va_arg(arg,&#32;<emphasis role="keywordtype">int</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l03121"/>03121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>)wvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03122"/>03122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03123"/>03123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03124"/>03124 
<anchor xml:id="__x_buffer_8cpp_source_1l03125"/>03125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;D&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;dvar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03126"/>03126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)dvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03127"/>03127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03128"/>03128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03129"/>03129 
<anchor xml:id="__x_buffer_8cpp_source_1l03130"/>03130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;Q&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;dvar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03131"/>03131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)dvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03132"/>03132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03133"/>03133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03134"/>03134 
<anchor xml:id="__x_buffer_8cpp_source_1l03135"/>03135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>:&#32;{&#32;<emphasis role="keywordtype">float</emphasis>&#32;fvar&#32;=&#32;(float)va_arg(arg,&#32;<emphasis role="keywordtype">double</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l03136"/>03136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<emphasis role="keywordtype">float</emphasis>)fvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03137"/>03137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03138"/>03138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03139"/>03139 
<anchor xml:id="__x_buffer_8cpp_source_1l03140"/>03140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>:&#32;{&#32;<emphasis role="keywordtype">double</emphasis>&#32;lvar&#32;=&#32;va_arg(arg,&#32;<emphasis role="keywordtype">double</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l03141"/>03141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<emphasis role="keywordtype">double</emphasis>)lvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03142"/>03142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03143"/>03143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03144"/>03144 
<anchor xml:id="__x_buffer_8cpp_source_1l03145"/>03145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;O&apos;</emphasis>:&#32;{&#32;<emphasis role="keywordtype">int</emphasis>&#32;_bvar&#32;=&#32;va_arg(arg,&#32;<emphasis role="keywordtype">int</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l03146"/>03146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;bvar&#32;&#32;=&#32;(_bvar?1:0);
<anchor xml:id="__x_buffer_8cpp_source_1l03147"/>03147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)bvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03148"/>03148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03149"/>03149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03150"/>03150 
<anchor xml:id="__x_buffer_8cpp_source_1l03151"/>03151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;avar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03152"/>03152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;size;
<anchor xml:id="__x_buffer_8cpp_source_1l03153"/>03153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03154"/>03154 
<anchor xml:id="__x_buffer_8cpp_source_1l03155"/>03155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(mask[c]==<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;X&apos;</emphasis>))
<anchor xml:id="__x_buffer_8cpp_source_1l03156"/>03156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03157"/>03157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03158"/>03158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03159"/>03159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03160"/>03160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03161"/>03161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;sizestr;
<anchor xml:id="__x_buffer_8cpp_source_1l03162"/>03162 
<anchor xml:id="__x_buffer_8cpp_source_1l03163"/>03163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>((mask[c]&gt;=<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;0&apos;</emphasis>))&#32;&amp;&amp;&#32;(mask[c]&lt;=<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;9&apos;</emphasis>)))
<anchor xml:id="__x_buffer_8cpp_source_1l03164"/>03164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03165"/>03165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizestr.<link linkend="_group___x_u_t_i_l_s_1gae19f84471c20a914d10a8ac757cacb9a">Add</link>(mask[c]);
<anchor xml:id="__x_buffer_8cpp_source_1l03166"/>03166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03167"/>03167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03168"/>03168 
<anchor xml:id="__x_buffer_8cpp_source_1l03169"/>03169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c--;
<anchor xml:id="__x_buffer_8cpp_source_1l03170"/>03170 
<anchor xml:id="__x_buffer_8cpp_source_1l03171"/>03171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;sizestr.<link linkend="_group___x_u_t_i_l_s_1gaf09eaeaee7d47050a5c75303f3ae842c">ConvertToInt</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03172"/>03172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03173"/>03173 
<anchor xml:id="__x_buffer_8cpp_source_1l03174"/>03174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(size&#32;&amp;&amp;&#32;avar)&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(avar,&#32;size);
<anchor xml:id="__x_buffer_8cpp_source_1l03175"/>03175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03176"/>03176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03177"/>03177 
<anchor xml:id="__x_buffer_8cpp_source_1l03178"/>03178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;S&apos;</emphasis>:&#32;{&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;&#32;svar&#32;=&#32;va_arg(arg,&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l03179"/>03179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;&#32;&#32;bufferexchange;
<anchor xml:id="__x_buffer_8cpp_source_1l03180"/>03180 
<anchor xml:id="__x_buffer_8cpp_source_1l03181"/>03181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*svar).ConvertToExchangeXBuffer(bufferexchange);
<anchor xml:id="__x_buffer_8cpp_source_1l03182"/>03182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(bufferexchange);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l03183"/>03183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03184"/>03184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03185"/>03185 
<anchor xml:id="__x_buffer_8cpp_source_1l03186"/>03186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;V&apos;</emphasis>:&#32;{&#32;<link linkend="_class_x_v_a_r_i_a_n_t">XVARIANT</link>*&#32;svar&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;va_arg(arg,&#32;<link linkend="_class_x_v_a_r_i_a_n_t">XVARIANT</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03187"/>03187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;svar-&gt;<link linkend="_group___x_u_t_i_l_s_1ga70075e357dea2d13c7e1763e8800cbc6">GetType</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03188"/>03188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;&#32;&#32;isnull&#32;&#32;&#32;&#32;&#32;&#32;=&#32;svar-&gt;<link linkend="_group___x_u_t_i_l_s_1ga3665b76bdc25dc4eb46822842dd2de3f">IsNull</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03189"/>03189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;sizevariant&#32;=&#32;svar-&gt;<link linkend="_group___x_u_t_i_l_s_1ga155144d7ff244a740241cda1c50ed624">GetSize</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03190"/>03190 
<anchor xml:id="__x_buffer_8cpp_source_1l03191"/>03191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)type);
<anchor xml:id="__x_buffer_8cpp_source_1l03192"/>03192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)isnull);
<anchor xml:id="__x_buffer_8cpp_source_1l03193"/>03193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)sizevariant);
<anchor xml:id="__x_buffer_8cpp_source_1l03194"/>03194 
<anchor xml:id="__x_buffer_8cpp_source_1l03195"/>03195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(svar-&gt;<link linkend="_group___x_u_t_i_l_s_1gabcac61acd6c466f93f23e9881f2a6742">GetData</link>()&#32;&amp;&amp;&#32;sizevariant)&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)svar-&gt;<link linkend="_group___x_u_t_i_l_s_1gabcac61acd6c466f93f23e9881f2a6742">GetData</link>(),&#32;sizevariant);
<anchor xml:id="__x_buffer_8cpp_source_1l03196"/>03196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03197"/>03197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03198"/>03198 
<anchor xml:id="__x_buffer_8cpp_source_1l03199"/>03199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03200"/>03200 
<anchor xml:id="__x_buffer_8cpp_source_1l03201"/>03201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03202"/>03202 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03203"/>03203 
<anchor xml:id="__x_buffer_8cpp_source_1l03204"/>03204 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>()?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03205"/>03205 }
<anchor xml:id="__x_buffer_8cpp_source_1l03206"/>03206 
<anchor xml:id="__x_buffer_8cpp_source_1l03207"/>03207 
<anchor xml:id="__x_buffer_8cpp_source_1l03221"/>03221 <emphasis role="keywordtype">bool</emphasis>&#32;XBUFFER::AddXBufferWithMask(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer,&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l03222"/>03222 {
<anchor xml:id="__x_buffer_8cpp_source_1l03223"/>03223 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03224"/>03224 
<anchor xml:id="__x_buffer_8cpp_source_1l03225"/>03225 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;AddXBufferWithMask(xbuffer,&#32;mask-&gt;<link linkend="_group___x_u_t_i_l_s_1gad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l03226"/>03226 }
<anchor xml:id="__x_buffer_8cpp_source_1l03227"/>03227 
<anchor xml:id="__x_buffer_8cpp_source_1l03228"/>03228 
<anchor xml:id="__x_buffer_8cpp_source_1l03243"/>03243 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;XBUFFER::CalculeExtractSizeArgWithMask(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l03244"/>03244 {
<anchor xml:id="__x_buffer_8cpp_source_1l03245"/>03245 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03246"/>03246 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask[0])&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03247"/>03247 
<anchor xml:id="__x_buffer_8cpp_source_1l03248"/>03248 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03249"/>03249 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03250"/>03250 
<anchor xml:id="__x_buffer_8cpp_source_1l03251"/>03251 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(mask[c])
<anchor xml:id="__x_buffer_8cpp_source_1l03252"/>03252 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03253"/>03253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(mask[c])
<anchor xml:id="__x_buffer_8cpp_source_1l03254"/>03254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03255"/>03255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;B&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//XBYTE*&#32;bvar&#32;&#32;=&#32;va_arg(arg,&#32;XBYTE*);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03256"/>03256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03257"/>03257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03258"/>03258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03259"/>03259 
<anchor xml:id="__x_buffer_8cpp_source_1l03260"/>03260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;W&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//XWORD&#32;wvar&#32;&#32;=&#32;(XWORD)va_arg(arg,&#32;int);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03261"/>03261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03262"/>03262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03263"/>03263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03264"/>03264 
<anchor xml:id="__x_buffer_8cpp_source_1l03265"/>03265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;D&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//XDWORD&#32;dvar&#32;=&#32;va_arg(arg,&#32;XDWORD);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03266"/>03266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03267"/>03267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03268"/>03268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03269"/>03269 
<anchor xml:id="__x_buffer_8cpp_source_1l03270"/>03270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;Q&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//XQWORD&#32;dvar&#32;=&#32;va_arg(arg,&#32;XQWORD);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03271"/>03271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03272"/>03272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03273"/>03273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03274"/>03274 
<anchor xml:id="__x_buffer_8cpp_source_1l03275"/>03275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//float&#32;fvar&#32;=&#32;(float)va_arg(arg,&#32;double);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03276"/>03276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(double);
<anchor xml:id="__x_buffer_8cpp_source_1l03277"/>03277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03278"/>03278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03279"/>03279 
<anchor xml:id="__x_buffer_8cpp_source_1l03280"/>03280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//double&#32;lvar&#32;=&#32;va_arg(arg,&#32;double);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03281"/>03281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(double);
<anchor xml:id="__x_buffer_8cpp_source_1l03282"/>03282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03283"/>03283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03284"/>03284 
<anchor xml:id="__x_buffer_8cpp_source_1l03285"/>03285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;O&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//int&#32;bvar&#32;=&#32;va_arg(arg,&#32;int);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03286"/>03286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03287"/>03287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03288"/>03288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03289"/>03289 
<anchor xml:id="__x_buffer_8cpp_source_1l03290"/>03290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//XBYTE*&#32;avar&#32;=&#32;va_arg(arg,&#32;XBYTE*);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03291"/>03291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sizearray&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03292"/>03292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03293"/>03293 
<anchor xml:id="__x_buffer_8cpp_source_1l03294"/>03294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(mask[c]==<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;X&apos;</emphasis>))
<anchor xml:id="__x_buffer_8cpp_source_1l03295"/>03295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03296"/>03296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;dvar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03297"/>03297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dvar)&#32;sizearray&#32;=&#32;dvar;
<anchor xml:id="__x_buffer_8cpp_source_1l03298"/>03298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03299"/>03299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03300"/>03300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03301"/>03301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;sizestr;
<anchor xml:id="__x_buffer_8cpp_source_1l03302"/>03302 
<anchor xml:id="__x_buffer_8cpp_source_1l03303"/>03303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>((mask[c]&gt;=<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;0&apos;</emphasis>))&#32;&amp;&amp;&#32;(mask[c]&lt;=<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;9&apos;</emphasis>)))
<anchor xml:id="__x_buffer_8cpp_source_1l03304"/>03304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03305"/>03305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizestr.<link linkend="_group___x_u_t_i_l_s_1gae19f84471c20a914d10a8ac757cacb9a">Add</link>(mask[c]);
<anchor xml:id="__x_buffer_8cpp_source_1l03306"/>03306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03307"/>03307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03308"/>03308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c--;
<anchor xml:id="__x_buffer_8cpp_source_1l03309"/>03309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizearray&#32;=&#32;sizestr.<link linkend="_group___x_u_t_i_l_s_1gaf09eaeaee7d47050a5c75303f3ae842c">ConvertToInt</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03310"/>03310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03311"/>03311 
<anchor xml:id="__x_buffer_8cpp_source_1l03312"/>03312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;sizearray;
<anchor xml:id="__x_buffer_8cpp_source_1l03313"/>03313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03314"/>03314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03315"/>03315 
<anchor xml:id="__x_buffer_8cpp_source_1l03316"/>03316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;S&apos;</emphasis>:&#32;{&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;svar&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;va_arg(arg,&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03317"/>03317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;sizestring&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03318"/>03318 
<anchor xml:id="__x_buffer_8cpp_source_1l03319"/>03319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(svar)
<anchor xml:id="__x_buffer_8cpp_source_1l03320"/>03320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03321"/>03321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizestring&#32;&#32;=&#32;<link linkend="_group___x_u_t_i_l_s_1ga7c3fa0dd7b650399470c76192fbd4916">XSTRING::GetSize</link>((<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>*)(&amp;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[frompos&#32;+&#32;size]));
<anchor xml:id="__x_buffer_8cpp_source_1l03322"/>03322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizestring&#32;+=&#32;1;
<anchor xml:id="__x_buffer_8cpp_source_1l03323"/>03323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizestring&#32;*=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03324"/>03324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03325"/>03325 
<anchor xml:id="__x_buffer_8cpp_source_1l03326"/>03326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;sizestring;
<anchor xml:id="__x_buffer_8cpp_source_1l03327"/>03327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03328"/>03328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03329"/>03329 
<anchor xml:id="__x_buffer_8cpp_source_1l03330"/>03330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;V&apos;</emphasis>:&#32;{&#32;<link linkend="_class_x_v_a_r_i_a_n_t">XVARIANT</link>*&#32;svar&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;va_arg(arg,&#32;<link linkend="_class_x_v_a_r_i_a_n_t">XVARIANT</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03331"/>03331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;sizevariant&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03332"/>03332 
<anchor xml:id="__x_buffer_8cpp_source_1l03333"/>03333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizevariant&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03334"/>03334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizevariant&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03335"/>03335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizevariant&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03336"/>03336 
<anchor xml:id="__x_buffer_8cpp_source_1l03337"/>03337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(svar)&#32;sizevariant&#32;+=&#32;svar-&gt;<link linkend="_group___x_u_t_i_l_s_1ga155144d7ff244a740241cda1c50ed624">GetSize</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03338"/>03338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;sizevariant;
<anchor xml:id="__x_buffer_8cpp_source_1l03339"/>03339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03340"/>03340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03341"/>03341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03342"/>03342 
<anchor xml:id="__x_buffer_8cpp_source_1l03343"/>03343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03344"/>03344 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03345"/>03345 
<anchor xml:id="__x_buffer_8cpp_source_1l03346"/>03346 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;size;
<anchor xml:id="__x_buffer_8cpp_source_1l03347"/>03347 }
<anchor xml:id="__x_buffer_8cpp_source_1l03348"/>03348 
<anchor xml:id="__x_buffer_8cpp_source_1l03349"/>03349 
<anchor xml:id="__x_buffer_8cpp_source_1l03363"/>03363 <emphasis role="keywordtype">bool</emphasis>&#32;XBUFFER::ExtractXBufferWithMask(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l03364"/>03364 {
<anchor xml:id="__x_buffer_8cpp_source_1l03365"/>03365 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03366"/>03366 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask[0])&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03367"/>03367 
<anchor xml:id="__x_buffer_8cpp_source_1l03368"/>03368 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03369"/>03369 
<anchor xml:id="__x_buffer_8cpp_source_1l03370"/>03370 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(mask[c])
<anchor xml:id="__x_buffer_8cpp_source_1l03371"/>03371 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03372"/>03372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(mask[c])
<anchor xml:id="__x_buffer_8cpp_source_1l03373"/>03373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03374"/>03374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;B&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;bvar&#32;&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03375"/>03375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&amp;)(*bvar));
<anchor xml:id="__x_buffer_8cpp_source_1l03376"/>03376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03377"/>03377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03378"/>03378 
<anchor xml:id="__x_buffer_8cpp_source_1l03379"/>03379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;W&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>*&#32;wvar&#32;&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03380"/>03380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&amp;)(*wvar));
<anchor xml:id="__x_buffer_8cpp_source_1l03381"/>03381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03382"/>03382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03383"/>03383 
<anchor xml:id="__x_buffer_8cpp_source_1l03384"/>03384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;D&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*&#32;dvar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03385"/>03385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&amp;)(*dvar));
<anchor xml:id="__x_buffer_8cpp_source_1l03386"/>03386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03387"/>03387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03388"/>03388 
<anchor xml:id="__x_buffer_8cpp_source_1l03389"/>03389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;Q&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>*&#32;dvar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03390"/>03390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&amp;)(*dvar));
<anchor xml:id="__x_buffer_8cpp_source_1l03391"/>03391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03392"/>03392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03393"/>03393 
<anchor xml:id="__x_buffer_8cpp_source_1l03394"/>03394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>:&#32;{&#32;<emphasis role="keywordtype">double</emphasis>*&#32;fvar&#32;=&#32;va_arg(arg,&#32;<emphasis role="keywordtype">double</emphasis>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03395"/>03395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<emphasis role="keywordtype">float</emphasis>&amp;)(*fvar),&#32;0);
<anchor xml:id="__x_buffer_8cpp_source_1l03396"/>03396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03397"/>03397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03398"/>03398 
<anchor xml:id="__x_buffer_8cpp_source_1l03399"/>03399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>:&#32;{&#32;<emphasis role="keywordtype">double</emphasis>*&#32;dvar&#32;=&#32;va_arg(arg,&#32;<emphasis role="keywordtype">double</emphasis>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03400"/>03400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<emphasis role="keywordtype">double</emphasis>&amp;)(*dvar),&#32;0);
<anchor xml:id="__x_buffer_8cpp_source_1l03401"/>03401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03402"/>03402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03403"/>03403 
<anchor xml:id="__x_buffer_8cpp_source_1l03404"/>03404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;O&apos;</emphasis>:&#32;{&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;&#32;bvar&#32;&#32;=&#32;va_arg(arg,&#32;<emphasis role="keywordtype">bool</emphasis>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03405"/>03405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;_bvar&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03406"/>03406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(_bvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03407"/>03407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*bvar)&#32;=&#32;_bvar?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03408"/>03408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03409"/>03409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03410"/>03410 
<anchor xml:id="__x_buffer_8cpp_source_1l03411"/>03411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;avar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03412"/>03412 
<anchor xml:id="__x_buffer_8cpp_source_1l03413"/>03413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03414"/>03414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03415"/>03415 
<anchor xml:id="__x_buffer_8cpp_source_1l03416"/>03416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(mask[c]==<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;X&apos;</emphasis>))
<anchor xml:id="__x_buffer_8cpp_source_1l03417"/>03417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03418"/>03418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;dvar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03419"/>03419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dvar)&#32;size&#32;=&#32;dvar;
<anchor xml:id="__x_buffer_8cpp_source_1l03420"/>03420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03421"/>03421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03422"/>03422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03423"/>03423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;sizestr;
<anchor xml:id="__x_buffer_8cpp_source_1l03424"/>03424 
<anchor xml:id="__x_buffer_8cpp_source_1l03425"/>03425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>((mask[c]&gt;=<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;0&apos;</emphasis>))&#32;&amp;&amp;&#32;(mask[c]&lt;=<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;9&apos;</emphasis>)))
<anchor xml:id="__x_buffer_8cpp_source_1l03426"/>03426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03427"/>03427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizestr.<link linkend="_group___x_u_t_i_l_s_1gae19f84471c20a914d10a8ac757cacb9a">Add</link>(mask[c]);
<anchor xml:id="__x_buffer_8cpp_source_1l03428"/>03428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03429"/>03429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03430"/>03430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c--;
<anchor xml:id="__x_buffer_8cpp_source_1l03431"/>03431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;sizestr.<link linkend="_group___x_u_t_i_l_s_1gaf09eaeaee7d47050a5c75303f3ae842c">ConvertToInt</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03432"/>03432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03433"/>03433 
<anchor xml:id="__x_buffer_8cpp_source_1l03434"/>03434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(size&#32;&amp;&amp;&#32;avar)&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(avar,&#32;0,&#32;size);
<anchor xml:id="__x_buffer_8cpp_source_1l03435"/>03435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03436"/>03436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03437"/>03437 
<anchor xml:id="__x_buffer_8cpp_source_1l03438"/>03438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;S&apos;</emphasis>:&#32;{&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;svar&#32;=&#32;va_arg(arg,&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03439"/>03439 
<anchor xml:id="__x_buffer_8cpp_source_1l03440"/>03440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;svar-&gt;<link linkend="_group___x_u_t_i_l_s_1ga4e97e075650e9bc8cfb7deb28e4c9ce4">Set</link>((<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>*)(xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()));
<anchor xml:id="__x_buffer_8cpp_source_1l03441"/>03441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;(svar-&gt;<link linkend="_group___x_u_t_i_l_s_1ga7c3fa0dd7b650399470c76192fbd4916">GetSize</link>()+1)*<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03442"/>03442 
<anchor xml:id="__x_buffer_8cpp_source_1l03443"/>03443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;0,&#32;size);
<anchor xml:id="__x_buffer_8cpp_source_1l03444"/>03444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03445"/>03445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03446"/>03446 
<anchor xml:id="__x_buffer_8cpp_source_1l03447"/>03447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;V&apos;</emphasis>:&#32;{&#32;<link linkend="_class_x_v_a_r_i_a_n_t">XVARIANT</link>*&#32;svar&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;va_arg(arg,&#32;<link linkend="_class_x_v_a_r_i_a_n_t">XVARIANT</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03448"/>03448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03449"/>03449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;&#32;&#32;isnull&#32;&#32;&#32;&#32;&#32;&#32;=&#32;svar-&gt;<link linkend="_group___x_u_t_i_l_s_1ga3665b76bdc25dc4eb46822842dd2de3f">IsNull</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03450"/>03450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;sizevariant&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03451"/>03451 
<anchor xml:id="__x_buffer_8cpp_source_1l03452"/>03452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(type);
<anchor xml:id="__x_buffer_8cpp_source_1l03453"/>03453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(isnull);
<anchor xml:id="__x_buffer_8cpp_source_1l03454"/>03454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(sizevariant);
<anchor xml:id="__x_buffer_8cpp_source_1l03455"/>03455 
<anchor xml:id="__x_buffer_8cpp_source_1l03456"/>03456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Imanol&#32;:&#32;if&#32;xbuffer.GetSize()&#32;-&#32;9&#32;!=&#32;sizevariant&#32;something&#32;went&#32;wront&#32;and&#32;this&#32;variant&#32;might&#32;not&#32;be&#32;complete(but&#32;a&#32;full&#32;data&#32;array&#32;is&#32;allocated&#32;anyways)</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03457"/>03457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;svar-&gt;<link linkend="_group___x_u_t_i_l_s_1ga238f6ef465ea6b1cc7f9882aee8c868f">Set</link>((<link linkend="__x_variant_8h_1ae6ba470d0708534cb56c359929a9eb30">XVARIANT_TYPE</link>)type,&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;sizevariant);
<anchor xml:id="__x_buffer_8cpp_source_1l03458"/>03458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(sizevariant)&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1gaa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;0,&#32;sizevariant);
<anchor xml:id="__x_buffer_8cpp_source_1l03459"/>03459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03460"/>03460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03461"/>03461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03462"/>03462 
<anchor xml:id="__x_buffer_8cpp_source_1l03463"/>03463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03464"/>03464 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03465"/>03465 
<anchor xml:id="__x_buffer_8cpp_source_1l03466"/>03466 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xbuffer.<link linkend="_group___x_u_t_i_l_s_1ga0007f465be1385ea663397e502c5280e">IsEmpty</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03467"/>03467 }
<anchor xml:id="__x_buffer_8cpp_source_1l03468"/>03468 
<anchor xml:id="__x_buffer_8cpp_source_1l03469"/>03469 
<anchor xml:id="__x_buffer_8cpp_source_1l03483"/>03483 <emphasis role="keywordtype">bool</emphasis>&#32;XBUFFER::ExtractXBufferWithMask(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer,&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l03484"/>03484 {
<anchor xml:id="__x_buffer_8cpp_source_1l03485"/>03485 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03486"/>03486 
<anchor xml:id="__x_buffer_8cpp_source_1l03487"/>03487 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ExtractXBufferWithMask(xbuffer,&#32;mask-&gt;<link linkend="_group___x_u_t_i_l_s_1gad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l03488"/>03488 }
<anchor xml:id="__x_buffer_8cpp_source_1l03489"/>03489 
<anchor xml:id="__x_buffer_8cpp_source_1l03490"/>03490 
<anchor xml:id="__x_buffer_8cpp_source_1l03499"/>03499 <emphasis role="keywordtype">void</emphasis>&#32;XBUFFER::Clean()
<anchor xml:id="__x_buffer_8cpp_source_1l03500"/>03500 {
<anchor xml:id="__x_buffer_8cpp_source_1l03501"/>03501 &#32;&#32;buffer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l03502"/>03502 &#32;&#32;size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03503"/>03503 &#32;&#32;sizeassign&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03504"/>03504 &#32;&#32;position&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03505"/>03505 
<anchor xml:id="__x_buffer_8cpp_source_1l03506"/>03506 &#32;&#32;nbits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03507"/>03507 &#32;&#32;nbitsfree&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03508"/>03508 
<anchor xml:id="__x_buffer_8cpp_source_1l03509"/>03509 &#32;&#32;paddingtype&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35aa2fccdb92c2ee954bbdf4083351347de">XBUFFER_PADDINGTYPE_NONE</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l03510"/>03510 &#32;&#32;paddinghas&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03511"/>03511 &#32;&#32;paddingbitadjust&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03512"/>03512 &#32;&#32;paddingsize&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03513"/>03513 
<anchor xml:id="__x_buffer_8cpp_source_1l03514"/>03514 &#32;&#32;xmutex&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l03515"/>03515 
<anchor xml:id="__x_buffer_8cpp_source_1l03516"/>03516 &#32;&#32;localhardwareuselittleendian&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03517"/>03517 }
<anchor xml:id="__x_buffer_8cpp_source_1l03518"/>03518 
<anchor xml:id="__x_buffer_8cpp_source_1l03519"/>03519 
<anchor xml:id="__x_buffer_8cpp_source_1l03520"/>03520 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03521"/>03521 
</programlisting></section>
