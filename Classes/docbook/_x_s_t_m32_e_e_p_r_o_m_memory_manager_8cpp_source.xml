<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source" xml:lang="en-US">
<title>XSTM32EEPROMMemoryManager.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Platforms/Microcontrollers/STM32/XSTM32EEPROMMemoryManager.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;CONTROL&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00030"/>00030 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00031"/>00031 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00032"/>00032 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00034"/>00034 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00036"/>00036 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00038"/>00038 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00039"/>00039 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h">XSTM32EEPROMMemoryManager.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00040"/>00040 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00041"/>00041 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00042"/>00042 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00043"/>00043 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00044"/>00044 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00045"/>00045 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00046"/>00046 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00047"/>00047 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00055"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gad3c7d34ed1e024fcb54613c4d82ef514">00055</link> <link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gad3c7d34ed1e024fcb54613c4d82ef514">XSTM32EEPROMMEMORYMANAGER::XSTM32EEPROMMEMORYMANAGER</link>()
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00056"/>00056 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00057"/>00057 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00058"/>00058 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00059"/>00059 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00060"/>00060 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00061"/>00061 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00070"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga60a57bed6750b67061e61a0c979a8c52">00070</link> <link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga60a57bed6750b67061e61a0c979a8c52">XSTM32EEPROMMEMORYMANAGER::~XSTM32EEPROMMEMORYMANAGER</link>()
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00071"/>00071 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00072"/>00072 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00073"/>00073 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00074"/>00074 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00075"/>00075 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00076"/>00076 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00086"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gacb115ad7f1d9503c5d46e1beab7cc351">00086</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gacb115ad7f1d9503c5d46e1beab7cc351">XSTM32EEPROMMEMORYMANAGER::Ini</link>()
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00087"/>00087 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00088"/>00088 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00089"/>00089 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00090"/>00090 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00091"/>00091 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00092"/>00092 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00102"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gac5f5e2a6d3e0228ab0c9490797010c2a">00102</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gac5f5e2a6d3e0228ab0c9490797010c2a">XSTM32EEPROMMEMORYMANAGER::End</link>()
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00103"/>00103 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00104"/>00104 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00105"/>00105 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00106"/>00106 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00107"/>00107 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00108"/>00108 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00122"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga1e8d2851e2c159a6700815bc5109eaca">00122</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga1e8d2851e2c159a6700815bc5109eaca">XSTM32EEPROMMEMORYMANAGER::Read</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;offset,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00123"/>00123 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00124"/>00124 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((offset&#32;+&#32;size)&#32;&gt;&#32;<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h_1a4bf1ca078e9b1842df8bae0c69a46bf7">XSTM32EEPROMMEMORYMANAGER_MAXSIZE</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00125"/>00125 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00126"/>00126 <emphasis role="preprocessor">&#32;&#32;#if&#32;defined(STM32F407xx)&#32;||&#32;defined(STM32F446xx)</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00127"/>00127 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00128"/>00128 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;size;&#32;c++)
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;(*(data+c))&#32;=&#32;(*(__IO&#32;uint8_t&#32;*)(<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h_1a48dbb7f1b388ce11738dc904702c26d9">XSTM32EEPROMMEMORYMANAGER_BASE</link>+offset+c));
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00132"/>00132 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00133"/>00133 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00134"/>00134 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00135"/>00135 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00136"/>00136 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00137"/>00137 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00138"/>00138 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00139"/>00139 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00153"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga8d88c574495fdfb4ed722e6c6ea66e54">00153</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga8d88c574495fdfb4ed722e6c6ea66e54">XSTM32EEPROMMEMORYMANAGER::Write</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;offset,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00154"/>00154 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00155"/>00155 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((offset&#32;+&#32;size)&#32;&gt;&#32;<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h_1a4bf1ca078e9b1842df8bae0c69a46bf7">XSTM32EEPROMMEMORYMANAGER_MAXSIZE</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00156"/>00156 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00157"/>00157 <emphasis role="preprocessor">&#32;&#32;#if&#32;defined(STM32F407xx)&#32;||&#32;defined(STM32F446xx)</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00158"/>00158 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00159"/>00159 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;size;&#32;c++)
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;(*(__IO&#32;uint8_t&#32;*)(<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h_1a48dbb7f1b388ce11738dc904702c26d9">XSTM32EEPROMMEMORYMANAGER_BASE</link>+offset+c))&#32;=&#32;(*(data+c));
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00163"/>00163 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00164"/>00164 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00165"/>00165 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00166"/>00166 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00167"/>00167 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00168"/>00168 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00169"/>00169 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00170"/>00170 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00180"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga46df2096d7eee3304fcd816bc6622231">00180</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga46df2096d7eee3304fcd816bc6622231">XSTM32EEPROMMEMORYMANAGER::EraseAll</link>()
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00181"/>00181 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00182"/>00182 <emphasis role="preprocessor">&#32;&#32;#if&#32;defined(STM32F407xx)&#32;||&#32;defined(STM32F446xx)</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00183"/>00183 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00184"/>00184 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h_1a4bf1ca078e9b1842df8bae0c69a46bf7">XSTM32EEPROMMEMORYMANAGER_MAXSIZE</link>;&#32;c++)
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;(*(__IO&#32;uint8_t&#32;*)(<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h_1a48dbb7f1b388ce11738dc904702c26d9">XSTM32EEPROMMEMORYMANAGER_BASE</link>+c))=&#32;0;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00188"/>00188 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00189"/>00189 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00190"/>00190 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00191"/>00191 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00192"/>00192 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00193"/>00193 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00194"/>00194 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00195"/>00195 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00196"/>00196 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00197"/>00197 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00198"/>00198 
</programlisting></section>
