<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__hash_s_h_a2_8cpp_source" xml:lang="en-US">
<title>HashSHA2.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Cipher/HashSHA2.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__hash_s_h_a2_8cpp_source_1l00001"/>00001 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;INCLUDES&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;region&#32;PRECOMPILATION_INCLUDES</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00031"/>00031 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00033"/>00033 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00035"/>00035 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00036"/>00036 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00037"/>00037 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#pragma&#32;region&#32;INCLUDES</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00039"/>00039 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__hash_s_h_a2_8h">HashSHA2.h</link>&quot;</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00041"/>00041 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00042"/>00042 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00043"/>00043 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00044"/>00044 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_buffer_8h">XBuffer.h</link>&quot;</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00045"/>00045 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00046"/>00046 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00047"/>00047 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00048"/>00048 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00049"/>00049 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00050"/>00050 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00051"/>00051 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00052"/>00052 <emphasis role="preprocessor">#pragma&#32;region&#32;GENERAL_VARIABLE</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00053"/>00053 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00054"/>00054 <emphasis role="preprocessor">#if&#32;0</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00055"/>00055 <emphasis role="preprocessor">#define&#32;UNROLL_LOOPS&#32;</emphasis><emphasis role="comment">/*&#32;Enable&#32;loops&#32;unrolling&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00056"/>00056 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00057"/>00057 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00058"/><link linkend="__hash_s_h_a2_8cpp_1acc641515f6ae08cf5aa06660b7485dce">00058</link> <emphasis role="preprocessor">#define&#32;SHFR(x,&#32;n)&#32;&#32;&#32;&#32;(x&#32;&gt;&gt;&#32;n)</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00059"/><link linkend="__hash_s_h_a2_8cpp_1a47a06d6e229d50d2b1a326ec58123cae">00059</link> <emphasis role="preprocessor">#define&#32;ROTR(x,&#32;n)&#32;&#32;&#32;((x&#32;&gt;&gt;&#32;n)&#32;|&#32;(x&#32;&lt;&lt;&#32;((sizeof(x)&#32;&lt;&lt;&#32;3)&#32;-&#32;n)))</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00060"/><link linkend="__hash_s_h_a2_8cpp_1a8ee96ab6efdf0c56da9f847181b48fa3">00060</link> <emphasis role="preprocessor">#define&#32;ROTL(x,&#32;n)&#32;&#32;&#32;((x&#32;&lt;&lt;&#32;n)&#32;|&#32;(x&#32;&gt;&gt;&#32;((sizeof(x)&#32;&lt;&lt;&#32;3)&#32;-&#32;n)))</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00061"/><link linkend="__hash_s_h_a2_8cpp_1a0ed6c9c714485592a8c317a8ad91c83b">00061</link> <emphasis role="preprocessor">#define&#32;CH(x,&#32;y,&#32;z)&#32;&#32;((x&#32;&amp;&#32;y)&#32;^&#32;(~x&#32;&amp;&#32;z))</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00062"/><link linkend="__hash_s_h_a2_8cpp_1ae2f6c7a0b4fdb15387259356b16854c9">00062</link> <emphasis role="preprocessor">#define&#32;MAJ(x,&#32;y,&#32;z)&#32;((x&#32;&amp;&#32;y)&#32;^&#32;(x&#32;&amp;&#32;z)&#32;^&#32;(y&#32;&amp;&#32;z))</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00063"/>00063 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00064"/><link linkend="__hash_s_h_a2_8cpp_1a0ae1b70e2104958a43d1d8f32cb79eb6">00064</link> <emphasis role="preprocessor">#define&#32;SHA256_F1(x)&#32;(ROTR(x,&#32;&#32;2)&#32;^&#32;ROTR(x,&#32;13)&#32;^&#32;ROTR(x,&#32;22))</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00065"/><link linkend="__hash_s_h_a2_8cpp_1afc002a02aab7533fb0bfe557a25266e1">00065</link> <emphasis role="preprocessor">#define&#32;SHA256_F2(x)&#32;(ROTR(x,&#32;&#32;6)&#32;^&#32;ROTR(x,&#32;11)&#32;^&#32;ROTR(x,&#32;25))</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00066"/><link linkend="__hash_s_h_a2_8cpp_1a9435ee6ad07985796b91077d13eaf7a0">00066</link> <emphasis role="preprocessor">#define&#32;SHA256_F3(x)&#32;(ROTR(x,&#32;&#32;7)&#32;^&#32;ROTR(x,&#32;18)&#32;^&#32;SHFR(x,&#32;&#32;3))</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00067"/><link linkend="__hash_s_h_a2_8cpp_1afc7152c6ff0146084db95994f2852b56">00067</link> <emphasis role="preprocessor">#define&#32;SHA256_F4(x)&#32;(ROTR(x,&#32;17)&#32;^&#32;ROTR(x,&#32;19)&#32;^&#32;SHFR(x,&#32;10))</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00068"/>00068 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00069"/><link linkend="__hash_s_h_a2_8cpp_1a8c65d2c0860cf623b5607b2aec6a870a">00069</link> <emphasis role="preprocessor">#define&#32;SHA512_F1(x)&#32;(ROTR(x,&#32;28)&#32;^&#32;ROTR(x,&#32;34)&#32;^&#32;ROTR(x,&#32;39))</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00070"/><link linkend="__hash_s_h_a2_8cpp_1a41b8a672f8ed1a11ea49acb032550fa6">00070</link> <emphasis role="preprocessor">#define&#32;SHA512_F2(x)&#32;(ROTR(x,&#32;14)&#32;^&#32;ROTR(x,&#32;18)&#32;^&#32;ROTR(x,&#32;41))</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00071"/><link linkend="__hash_s_h_a2_8cpp_1a278e83abc8c71fec8a719065e5d51106">00071</link> <emphasis role="preprocessor">#define&#32;SHA512_F3(x)&#32;(ROTR(x,&#32;&#32;1)&#32;^&#32;ROTR(x,&#32;&#32;8)&#32;^&#32;SHFR(x,&#32;&#32;7))</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00072"/><link linkend="__hash_s_h_a2_8cpp_1ad6d26f67626668a9ec4f113bd05bee2b">00072</link> <emphasis role="preprocessor">#define&#32;SHA512_F4(x)&#32;(ROTR(x,&#32;19)&#32;^&#32;ROTR(x,&#32;61)&#32;^&#32;SHFR(x,&#32;&#32;6))</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00073"/>00073 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00074"/><link linkend="__hash_s_h_a2_8cpp_1a8923e6bd4439211a8ed92391c4b2267f">00074</link> <emphasis role="preprocessor">#define&#32;UNPACK32(x,&#32;str)&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00075"/>00075 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*((str)&#32;+&#32;3)&#32;=&#32;(XBYTE)&#32;((x)&#32;&#32;&#32;&#32;&#32;&#32;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00076"/>00076 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*((str)&#32;+&#32;2)&#32;=&#32;(XBYTE)&#32;((x)&#32;&gt;&gt;&#32;&#32;8);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00077"/>00077 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*((str)&#32;+&#32;1)&#32;=&#32;(XBYTE)&#32;((x)&#32;&gt;&gt;&#32;16);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00078"/>00078 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*((str)&#32;+&#32;0)&#32;=&#32;(XBYTE)&#32;((x)&#32;&gt;&gt;&#32;24);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00079"/>00079 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00080"/>00080 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00081"/><link linkend="__hash_s_h_a2_8cpp_1a89eeb08963c3208783d3bd6e956fa51c">00081</link> <emphasis role="preprocessor">#define&#32;PACK32(str,&#32;x)&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00082"/>00082 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(x)&#32;=&#32;&#32;&#32;((XDWORD)&#32;*((str)&#32;+&#32;3)&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00083"/>00083 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((XDWORD)&#32;*((str)&#32;+&#32;2)&#32;&lt;&lt;&#32;&#32;8)&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00084"/>00084 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((XDWORD)&#32;*((str)&#32;+&#32;1)&#32;&lt;&lt;&#32;16)&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00085"/>00085 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((XDWORD)&#32;*((str)&#32;+&#32;0)&#32;&lt;&lt;&#32;24);&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00086"/>00086 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00087"/>00087 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00088"/><link linkend="__hash_s_h_a2_8cpp_1abd089610ff5cefb1d50203d733de5f7e">00088</link> <emphasis role="preprocessor">#define&#32;UNPACK64(x,&#32;str)&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00089"/>00089 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*((str)&#32;+&#32;7)&#32;=&#32;(XBYTE)&#32;((x)&#32;&#32;&#32;&#32;&#32;&#32;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00090"/>00090 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*((str)&#32;+&#32;6)&#32;=&#32;(XBYTE)&#32;((x)&#32;&gt;&gt;&#32;&#32;8);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00091"/>00091 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*((str)&#32;+&#32;5)&#32;=&#32;(XBYTE)&#32;((x)&#32;&gt;&gt;&#32;16);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00092"/>00092 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*((str)&#32;+&#32;4)&#32;=&#32;(XBYTE)&#32;((x)&#32;&gt;&gt;&#32;24);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00093"/>00093 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*((str)&#32;+&#32;3)&#32;=&#32;(XBYTE)&#32;((x)&#32;&gt;&gt;&#32;32);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00094"/>00094 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*((str)&#32;+&#32;2)&#32;=&#32;(XBYTE)&#32;((x)&#32;&gt;&gt;&#32;40);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00095"/>00095 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*((str)&#32;+&#32;1)&#32;=&#32;(XBYTE)&#32;((x)&#32;&gt;&gt;&#32;48);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00096"/>00096 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*((str)&#32;+&#32;0)&#32;=&#32;(XBYTE)&#32;((x)&#32;&gt;&gt;&#32;56);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00097"/>00097 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00098"/>00098 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00099"/><link linkend="__hash_s_h_a2_8cpp_1ae0527f961e4ceaeb5bdb8bb75f693cde">00099</link> <emphasis role="preprocessor">#define&#32;PACK64(str,&#32;x)&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00100"/>00100 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(x)&#32;=&#32;&#32;&#32;((XQWORD)&#32;*((str)&#32;+&#32;7)&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00101"/>00101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((XQWORD)&#32;*((str)&#32;+&#32;6)&#32;&lt;&lt;&#32;&#32;8)&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00102"/>00102 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((XQWORD)&#32;*((str)&#32;+&#32;5)&#32;&lt;&lt;&#32;16)&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00103"/>00103 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((XQWORD)&#32;*((str)&#32;+&#32;4)&#32;&lt;&lt;&#32;24)&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00104"/>00104 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((XQWORD)&#32;*((str)&#32;+&#32;3)&#32;&lt;&lt;&#32;32)&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00105"/>00105 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((XQWORD)&#32;*((str)&#32;+&#32;2)&#32;&lt;&lt;&#32;40)&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00106"/>00106 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((XQWORD)&#32;*((str)&#32;+&#32;1)&#32;&lt;&lt;&#32;48)&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00107"/>00107 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((XQWORD)&#32;*((str)&#32;+&#32;0)&#32;&lt;&lt;&#32;56);&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00108"/>00108 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00109"/>00109 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00110"/>00110 <emphasis role="comment">/*&#32;Macros&#32;used&#32;for&#32;loops&#32;unrolling&#32;*/</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00111"/>00111 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00112"/><link linkend="__hash_s_h_a2_8cpp_1a42448a03f957fed4ed4b8d6a7b178f29">00112</link> <emphasis role="preprocessor">#define&#32;SHA256_SCR(i)&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00113"/>00113 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w[i]&#32;=&#32;&#32;SHA256_F4(w[i&#32;-&#32;&#32;2])&#32;+&#32;w[i&#32;-&#32;&#32;7]&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00114"/>00114 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;SHA256_F3(w[i&#32;-&#32;15])&#32;+&#32;w[i&#32;-&#32;16];&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00115"/>00115 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00116"/>00116 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00117"/><link linkend="__hash_s_h_a2_8cpp_1a579b95d2c45f72a9e6cd59eb81627926">00117</link> <emphasis role="preprocessor">#define&#32;SHA512_SCR(i)&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00118"/>00118 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w[i]&#32;=&#32;&#32;SHA512_F4(w[i&#32;-&#32;&#32;2])&#32;+&#32;w[i&#32;-&#32;&#32;7]&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00119"/>00119 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;SHA512_F3(w[i&#32;-&#32;15])&#32;+&#32;w[i&#32;-&#32;16];&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00120"/>00120 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00121"/>00121 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00122"/><link linkend="__hash_s_h_a2_8cpp_1ab8a6f2451d7c54b4cb271bc5a79e1a8a">00122</link> <emphasis role="preprocessor">#define&#32;SHA256_EXP(a,&#32;b,&#32;c,&#32;d,&#32;e,&#32;f,&#32;g,&#32;h,&#32;j)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00123"/>00123 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t1&#32;=&#32;wv[h]&#32;+&#32;SHA256_F2(wv[e])&#32;+&#32;CH(wv[e],&#32;wv[f],&#32;wv[g])&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00124"/>00124 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;sha256_k[j]&#32;+&#32;w[j];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00125"/>00125 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t2&#32;=&#32;SHA256_F1(wv[a])&#32;+&#32;MAJ(wv[a],&#32;wv[b],&#32;wv[c]);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00126"/>00126 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[d]&#32;+=&#32;t1;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00127"/>00127 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[h]&#32;=&#32;t1&#32;+&#32;t2;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00128"/>00128 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00129"/>00129 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00130"/><link linkend="__hash_s_h_a2_8cpp_1abb76fb30c8a7cda2ef2a3378db302d05">00130</link> <emphasis role="preprocessor">#define&#32;SHA512_EXP(a,&#32;b,&#32;c,&#32;d,&#32;e,&#32;f,&#32;g&#32;,h,&#32;j)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00131"/>00131 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t1&#32;=&#32;wv[h]&#32;+&#32;SHA512_F2(wv[e])&#32;+&#32;CH(wv[e],&#32;wv[f],&#32;wv[g])&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00132"/>00132 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;sha512_k[j]&#32;+&#32;w[j];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00133"/>00133 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t2&#32;=&#32;SHA512_F1(wv[a])&#32;+&#32;MAJ(wv[a],&#32;wv[b],&#32;wv[c]);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00134"/>00134 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[d]&#32;+=&#32;t1;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00135"/>00135 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[h]&#32;=&#32;t1&#32;+&#32;t2;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00136"/>00136 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00137"/>00137 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00138"/>00138 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00139"/>00139 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;HASHSHA2::Sha224_h0[8]&#32;=&#32;&#32;&#32;{&#32;0xc1059ed8,&#32;0x367cd507,&#32;0x3070dd17,&#32;0xf70e5939,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xffc00b31,&#32;0x68581511,&#32;0x64f98fa7,&#32;0xbefa4fa4
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00142"/>00142 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00143"/>00143 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;HASHSHA2::Sha256_h0[8]&#32;=&#32;&#32;&#32;{&#32;0x6a09e667,&#32;0xbb67ae85,&#32;0x3c6ef372,&#32;0xa54ff53a,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x510e527f,&#32;0x9b05688c,&#32;0x1f83d9ab,&#32;0x5be0cd19
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00146"/>00146 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00147"/>00147 <link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;HASHSHA2::Sha384_h0[8]&#32;=&#32;&#32;&#32;{&#32;0xcbbb9d5dc1059ed8ULL,&#32;0x629a292a367cd507ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x9159015a3070dd17ULL,&#32;0x152fecd8f70e5939ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x67332667ffc00b31ULL,&#32;0x8eb44a8768581511ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xdb0c2e0d64f98fa7ULL,&#32;0x47b5481dbefa4fa4ULL
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00152"/>00152 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00153"/>00153 <link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;HASHSHA2::Sha512_h0[8]&#32;=&#32;&#32;&#32;{&#32;0x6a09e667f3bcc908ULL,&#32;0xbb67ae8584caa73bULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x3c6ef372fe94f82bULL,&#32;0xa54ff53a5f1d36f1ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x510e527fade682d1ULL,&#32;0x9b05688c2b3e6c1fULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x1f83d9abfb41bd6bULL,&#32;0x5be0cd19137e2179ULL
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00158"/>00158 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00159"/>00159 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;HASHSHA2::Sha256_k[64]&#32;=&#32;&#32;&#32;{&#32;0x428a2f98,&#32;0x71374491,&#32;0xb5c0fbcf,&#32;0xe9b5dba5,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x3956c25b,&#32;0x59f111f1,&#32;0x923f82a4,&#32;0xab1c5ed5,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xd807aa98,&#32;0x12835b01,&#32;0x243185be,&#32;0x550c7dc3,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x72be5d74,&#32;0x80deb1fe,&#32;0x9bdc06a7,&#32;0xc19bf174,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xe49b69c1,&#32;0xefbe4786,&#32;0x0fc19dc6,&#32;0x240ca1cc,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x2de92c6f,&#32;0x4a7484aa,&#32;0x5cb0a9dc,&#32;0x76f988da,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x983e5152,&#32;0xa831c66d,&#32;0xb00327c8,&#32;0xbf597fc7,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xc6e00bf3,&#32;0xd5a79147,&#32;0x06ca6351,&#32;0x14292967,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x27b70a85,&#32;0x2e1b2138,&#32;0x4d2c6dfc,&#32;0x53380d13,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x650a7354,&#32;0x766a0abb,&#32;0x81c2c92e,&#32;0x92722c85,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xa2bfe8a1,&#32;0xa81a664b,&#32;0xc24b8b70,&#32;0xc76c51a3,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xd192e819,&#32;0xd6990624,&#32;0xf40e3585,&#32;0x106aa070,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x19a4c116,&#32;0x1e376c08,&#32;0x2748774c,&#32;0x34b0bcb5,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x391c0cb3,&#32;0x4ed8aa4a,&#32;0x5b9cca4f,&#32;0x682e6ff3,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x748f82ee,&#32;0x78a5636f,&#32;0x84c87814,&#32;0x8cc70208,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x90befffa,&#32;0xa4506ceb,&#32;0xbef9a3f7,&#32;0xc67178f2
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00176"/>00176 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00177"/>00177 &#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;HASHSHA2::Sha512_k[80]&#32;=&#32;&#32;{&#32;0x428a2f98d728ae22ULL,&#32;0x7137449123ef65cdULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xb5c0fbcfec4d3b2fULL,&#32;0xe9b5dba58189dbbcULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x3956c25bf348b538ULL,&#32;0x59f111f1b605d019ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x923f82a4af194f9bULL,&#32;0xab1c5ed5da6d8118ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xd807aa98a3030242ULL,&#32;0x12835b0145706fbeULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x243185be4ee4b28cULL,&#32;0x550c7dc3d5ffb4e2ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x72be5d74f27b896fULL,&#32;0x80deb1fe3b1696b1ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x9bdc06a725c71235ULL,&#32;0xc19bf174cf692694ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xe49b69c19ef14ad2ULL,&#32;0xefbe4786384f25e3ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0fc19dc68b8cd5b5ULL,&#32;0x240ca1cc77ac9c65ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x2de92c6f592b0275ULL,&#32;0x4a7484aa6ea6e483ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x5cb0a9dcbd41fbd4ULL,&#32;0x76f988da831153b5ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x983e5152ee66dfabULL,&#32;0xa831c66d2db43210ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xb00327c898fb213fULL,&#32;0xbf597fc7beef0ee4ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xc6e00bf33da88fc2ULL,&#32;0xd5a79147930aa725ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x06ca6351e003826fULL,&#32;0x142929670a0e6e70ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x27b70a8546d22ffcULL,&#32;0x2e1b21385c26c926ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x4d2c6dfc5ac42aedULL,&#32;0x53380d139d95b3dfULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x650a73548baf63deULL,&#32;0x766a0abb3c77b2a8ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x81c2c92e47edaee6ULL,&#32;0x92722c851482353bULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xa2bfe8a14cf10364ULL,&#32;0xa81a664bbc423001ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xc24b8b70d0f89791ULL,&#32;0xc76c51a30654be30ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xd192e819d6ef5218ULL,&#32;0xd69906245565a910ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xf40e35855771202aULL,&#32;0x106aa07032bbd1b8ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x19a4c116b8d2d0c8ULL,&#32;0x1e376c085141ab53ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x2748774cdf8eeb99ULL,&#32;0x34b0bcb5e19b48a8ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x391c0cb3c5c95a63ULL,&#32;0x4ed8aa4ae3418acbULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x5b9cca4f7763e373ULL,&#32;0x682e6ff3d6b2b8a3ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x748f82ee5defb2fcULL,&#32;0x78a5636f43172f60ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x84c87814a1f0ab72ULL,&#32;0x8cc702081a6439ecULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x90befffa23631e28ULL,&#32;0xa4506cebde82bde9ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xbef9a3f7b2c67915ULL,&#32;0xc67178f2e372532bULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xca273eceea26619cULL,&#32;0xd186b8c721c0c207ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xeada7dd6cde0eb1eULL,&#32;0xf57d4f7fee6ed178ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x06f067aa72176fbaULL,&#32;0x0a637dc5a2c898a6ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x113f9804bef90daeULL,&#32;0x1b710b35131c471bULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x28db77f523047d84ULL,&#32;0x32caab7b40c72493ULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x3c9ebe0a15c9bebcULL,&#32;0x431d67c49c100d4cULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x4cc5d4becb3e42b6ULL,&#32;0x597f299cfc657e2aULL,
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x5fcb6fab3ad6faecULL,&#32;0x6c44198c4a475817ULL
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00218"/>00218 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00219"/>00219 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00220"/>00220 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00221"/>00221 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00222"/>00222 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_MEMBERS</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00223"/>00223 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00224"/>00224 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00234"/><link linkend="_group___c_i_p_h_e_r_1ga9bf98da7829bc4de2f12a7c17f625355">00234</link> <link linkend="_group___c_i_p_h_e_r_1ga9bf98da7829bc4de2f12a7c17f625355">HASHSHA2::HASHSHA2</link>(<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecd">HASHSHA2TYPE</link>&#32;type)&#32;:&#32;<link linkend="_class_h_a_s_h">HASH</link>()
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00235"/>00235 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00236"/>00236 &#32;&#32;Clean();
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00237"/>00237 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00238"/>00238 &#32;&#32;typesha2&#32;=&#32;<link linkend="_class_h_a_s_h_1ad5af89903501908c4dcda95b37a5a785">type</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00239"/>00239 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00240"/>00240 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(typesha2)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecdaa63addc8ab51728b4d604f5d7b077731">HASHSHA2TYPE_224</link>&#32;&#32;&#32;&#32;:&#32;this-&gt;type&#32;=&#32;<link linkend="__hash_8h_1acf4dd3cf891bcd5c364340e2828a7ec9afdbfd9503b145ccfc4010a10f29bae8c">HASHTYPE_SHA224</link>;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecda1d3274b0b61cc911aebe36eb965498d5">HASHSHA2TYPE_256</link>&#32;&#32;&#32;&#32;:&#32;this-&gt;type&#32;=&#32;<link linkend="__hash_8h_1acf4dd3cf891bcd5c364340e2828a7ec9af5c954c90ae727fcd68cc29079c567ea">HASHTYPE_SHA256</link>;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecda72d2128cb516c1e3b3637d42a0aff080">HASHSHA2TYPE_384</link>&#32;&#32;&#32;&#32;:&#32;this-&gt;type&#32;=&#32;<link linkend="__hash_8h_1acf4dd3cf891bcd5c364340e2828a7ec9a2cdaadb133b8281a2e040c9455553ea8">HASHTYPE_SHA384</link>;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecda0ecef2c9ca825926f1556dec462f4e67">HASHSHA2TYPE_512</link>&#32;&#32;&#32;&#32;:&#32;this-&gt;type&#32;=&#32;<link linkend="__hash_8h_1acf4dd3cf891bcd5c364340e2828a7ec9afe2d5cf6c3cc45acac128c97f934c27f">HASHTYPE_SHA512</link>;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00248"/>00248 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00249"/>00249 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00250"/>00250 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00259"/><link linkend="_group___c_i_p_h_e_r_1ga1270326a184e1f0efc630a0da5f0642a">00259</link> <link linkend="_group___c_i_p_h_e_r_1ga1270326a184e1f0efc630a0da5f0642a">HASHSHA2::~HASHSHA2</link>()
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00260"/>00260 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00261"/>00261 &#32;&#32;Clean();
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00262"/>00262 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00263"/>00263 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00264"/>00264 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00277"/><link linkend="_group___c_i_p_h_e_r_1ga063d774fe1903bc51a00509b197c10a7">00277</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___c_i_p_h_e_r_1ga063d774fe1903bc51a00509b197c10a7">HASHSHA2::Do</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;size)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00278"/>00278 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00279"/>00279 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;digest[128];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00280"/>00280 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00281"/>00281 &#32;&#32;memset(digest&#32;,&#32;0,&#32;128);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00282"/>00282 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00283"/>00283 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(typesha2)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecdade145e41716235be055b500696dc8d57">HASHSHA2TYPE_UNKNOWN</link>&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00286"/>00286 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecdaa63addc8ab51728b4d604f5d7b077731">HASHSHA2TYPE_224</link>&#32;&#32;&#32;&#32;&#32;:&#32;Sha2_224(input,&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)size,&#32;digest);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_h_a_s_h_1ae0e98c634df2385915a73f5226864094">result</link>-&gt;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(digest,&#32;&#32;<link linkend="__hash_s_h_a2_8h_1a3c722b6d42ad021d4fe4797396ca2a3d">HASHSHA2_224_DIGEST_SIZE</link>);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00290"/>00290 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecda1d3274b0b61cc911aebe36eb965498d5">HASHSHA2TYPE_256</link>&#32;&#32;&#32;&#32;&#32;:&#32;Sha2_256(input,&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)size,&#32;digest);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_h_a_s_h_1ae0e98c634df2385915a73f5226864094">result</link>-&gt;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(digest,&#32;&#32;<link linkend="__hash_s_h_a2_8h_1ab86ae925ef934011b1c1fea55c84dfce">HASHSHA2_256_DIGEST_SIZE</link>);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00294"/>00294 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecda72d2128cb516c1e3b3637d42a0aff080">HASHSHA2TYPE_384</link>&#32;&#32;&#32;&#32;&#32;:&#32;Sha2_384(input,&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)size,&#32;digest);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_h_a_s_h_1ae0e98c634df2385915a73f5226864094">result</link>-&gt;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(digest,&#32;&#32;<link linkend="__hash_s_h_a2_8h_1a4fec97a40198a40fb47ec7f0744a712c">HASHSHA2_384_DIGEST_SIZE</link>);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00298"/>00298 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecda0ecef2c9ca825926f1556dec462f4e67">HASHSHA2TYPE_512</link>&#32;&#32;&#32;&#32;&#32;:&#32;Sha2_512(input,&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)size,&#32;digest);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_h_a_s_h_1ae0e98c634df2385915a73f5226864094">result</link>-&gt;<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(digest,&#32;&#32;<link linkend="__hash_s_h_a2_8h_1a46d58a335b8b30af51f911a7a6c3ad1c">HASHSHA2_512_DIGEST_SIZE</link>);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00302"/>00302 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00305"/>00305 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00306"/>00306 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00307"/>00307 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00308"/>00308 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00309"/>00309 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00319"/><link linkend="_group___c_i_p_h_e_r_1ga0a2bd8d54e00bf7453285d6f16ccf79f">00319</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_group___c_i_p_h_e_r_1ga0a2bd8d54e00bf7453285d6f16ccf79f">HASHSHA2::GetDefaultSize</link>()
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00320"/>00320 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00321"/>00321 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(typesha2)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecdaa63addc8ab51728b4d604f5d7b077731">HASHSHA2TYPE_224</link>&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a3c722b6d42ad021d4fe4797396ca2a3d">HASHSHA2_224_DIGEST_SIZE</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecda1d3274b0b61cc911aebe36eb965498d5">HASHSHA2TYPE_256</link>&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1ab86ae925ef934011b1c1fea55c84dfce">HASHSHA2_256_DIGEST_SIZE</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecda72d2128cb516c1e3b3637d42a0aff080">HASHSHA2TYPE_384</link>&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4fec97a40198a40fb47ec7f0744a712c">HASHSHA2_384_DIGEST_SIZE</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecda0ecef2c9ca825926f1556dec462f4e67">HASHSHA2TYPE_512</link>&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a46d58a335b8b30af51f911a7a6c3ad1c">HASHSHA2_512_DIGEST_SIZE</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__hash_s_h_a2_8h_1a4482c4d172927d1e5ad4ee64bb029ecdade145e41716235be055b500696dc8d57">HASHSHA2TYPE_UNKNOWN</link>&#32;:
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00330"/>00330 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00331"/>00331 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00332"/>00332 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00344"/>00344 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_256_Transf(<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x">HASHSHA2_256_CTX</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;blocknb)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00345"/>00345 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00346"/>00346 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;w[64];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00347"/>00347 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;wv[8];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00348"/>00348 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;t1;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00349"/>00349 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;t2;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00350"/>00350 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;&#32;subblock;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00351"/>00351 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;i;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00352"/>00352 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;j;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00353"/>00353 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00354"/>00354 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0;&#32;i&lt;(int)blocknb;&#32;i++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00355"/>00355 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;subblock&#32;=&#32;input&#32;+&#32;(i&#32;&lt;&lt;&#32;6);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00357"/>00357 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(j=0;&#32;j&lt;16;&#32;j++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__hash_s_h_a2_8cpp_1a89eeb08963c3208783d3bd6e956fa51c">PACK32</link>(&amp;subblock[j&#32;&lt;&lt;&#32;2],&#32;&amp;w[j]);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00362"/>00362 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(j=16;&#32;j&lt;64;&#32;j++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__hash_s_h_a2_8cpp_1a42448a03f957fed4ed4b8d6a7b178f29">SHA256_SCR</link>(j);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00367"/>00367 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(j=0;&#32;j&lt;8;&#32;j++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[j]&#32;=&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1af4e584662dbeba5e6f9a1f923ede53e4">h</link>[j];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00372"/>00372 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(j=0;&#32;j&lt;64;&#32;j++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t1&#32;=&#32;wv[7]&#32;+&#32;<link linkend="__hash_s_h_a2_8cpp_1afc002a02aab7533fb0bfe557a25266e1">SHA256_F2</link>(wv[4])&#32;+&#32;<link linkend="__hash_s_h_a2_8cpp_1a0ed6c9c714485592a8c317a8ad91c83b">CH</link>(wv[4],&#32;wv[5],&#32;wv[6])&#32;+&#32;Sha256_k[j]&#32;+&#32;w[j];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t2&#32;=&#32;<link linkend="__hash_s_h_a2_8cpp_1a0ae1b70e2104958a43d1d8f32cb79eb6">SHA256_F1</link>(wv[0])&#32;+&#32;<link linkend="__hash_s_h_a2_8cpp_1ae2f6c7a0b4fdb15387259356b16854c9">MAJ</link>(wv[0],&#32;wv[1],&#32;wv[2]);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00377"/>00377 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[7]&#32;=&#32;wv[6];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[6]&#32;=&#32;wv[5];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[5]&#32;=&#32;wv[4];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[4]&#32;=&#32;wv[3]&#32;+&#32;t1;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[3]&#32;=&#32;wv[2];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[2]&#32;=&#32;wv[1];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[1]&#32;=&#32;wv[0];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[0]&#32;=&#32;t1&#32;+&#32;t2;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00387"/>00387 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(j=0;&#32;j&lt;8;&#32;j++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1af4e584662dbeba5e6f9a1f923ede53e4">h</link>[j]&#32;+=&#32;wv[j];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00392"/>00392 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00393"/>00393 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00394"/>00394 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00395"/>00395 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00407"/>00407 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_256(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;digest)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00408"/>00408 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00409"/>00409 &#32;&#32;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x">HASHSHA2_256_CTX</link>&#32;ctx;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00410"/>00410 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00411"/>00411 &#32;&#32;Sha2_256_Ini(&amp;ctx);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00412"/>00412 &#32;&#32;Sha2_256_Update(&amp;ctx,&#32;input,&#32;size);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00413"/>00413 &#32;&#32;Sha2_256_End(&amp;ctx,&#32;digest);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00414"/>00414 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00415"/>00415 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00416"/>00416 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00426"/>00426 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_256_Ini(<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x">HASHSHA2_256_CTX</link>*&#32;ctx)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00427"/>00427 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00428"/>00428 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00429"/>00429 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00430"/>00430 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0;&#32;i&lt;8;&#32;i++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00431"/>00431 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1af4e584662dbeba5e6f9a1f923ede53e4">h</link>[i]&#32;=&#32;Sha256_h0[i];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00433"/>00433 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00434"/>00434 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00435"/>00435 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00436"/>00436 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ac3c503ad968ed7b01977f06ef1acec66">totalsize</link>&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00437"/>00437 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00438"/>00438 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00439"/>00439 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00451"/>00451 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_256_Update(<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x">HASHSHA2_256_CTX</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00452"/>00452 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00453"/>00453 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;blocknb;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00454"/>00454 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;new_len,&#32;rem_len,&#32;tmp_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00455"/>00455 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;&#32;shifted_input;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00456"/>00456 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00457"/>00457 &#32;&#32;tmp_len&#32;=&#32;<link linkend="__hash_s_h_a2_8h_1a54ae2b58657ffa4f532c9c2c50c60d5c">HASHSHA2_256_BLOCK_SIZE</link>&#32;-&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00458"/>00458 &#32;&#32;rem_len&#32;=&#32;size&#32;&lt;&#32;tmp_len&#32;?&#32;size&#32;:&#32;tmp_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00459"/>00459 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00460"/>00460 &#32;&#32;memcpy(&amp;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>[ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>],&#32;input,&#32;rem_len);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00461"/>00461 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00462"/>00462 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>&#32;+&#32;size&#32;&lt;&#32;<link linkend="__hash_s_h_a2_8h_1a54ae2b58657ffa4f532c9c2c50c60d5c">HASHSHA2_256_BLOCK_SIZE</link>)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00463"/>00463 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>&#32;+=&#32;size;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00466"/>00466 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00467"/>00467 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00468"/>00468 &#32;&#32;new_len&#32;=&#32;size&#32;-&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00469"/>00469 &#32;&#32;blocknb&#32;=&#32;new_len&#32;/&#32;<link linkend="__hash_s_h_a2_8h_1a54ae2b58657ffa4f532c9c2c50c60d5c">HASHSHA2_256_BLOCK_SIZE</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00470"/>00470 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00471"/>00471 &#32;&#32;shifted_input&#32;=&#32;input&#32;+&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00472"/>00472 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00473"/>00473 &#32;&#32;Sha2_256_Transf(ctx,&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>,&#32;1);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00474"/>00474 &#32;&#32;Sha2_256_Transf(ctx,&#32;shifted_input,&#32;blocknb);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00475"/>00475 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00476"/>00476 &#32;&#32;rem_len&#32;=&#32;new_len&#32;%&#32;<link linkend="__hash_s_h_a2_8h_1a54ae2b58657ffa4f532c9c2c50c60d5c">HASHSHA2_256_BLOCK_SIZE</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00477"/>00477 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00478"/>00478 &#32;&#32;memcpy(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>,&#32;&amp;shifted_input[blocknb&#32;&lt;&lt;&#32;6],&#32;rem_len);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00479"/>00479 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00480"/>00480 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00481"/>00481 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ac3c503ad968ed7b01977f06ef1acec66">totalsize</link>&#32;+=&#32;(blocknb&#32;+&#32;1)&#32;&lt;&lt;&#32;6;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00482"/>00482 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00483"/>00483 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00484"/>00484 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00495"/>00495 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_256_End(<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x">HASHSHA2_256_CTX</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;digest)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00496"/>00496 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00497"/>00497 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;blocknb;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00498"/>00498 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;pm_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00499"/>00499 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;len_b;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00500"/>00500 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;i;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00501"/>00501 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00502"/>00502 &#32;&#32;blocknb&#32;=&#32;(1&#32;+&#32;((<link linkend="__hash_s_h_a2_8h_1a54ae2b58657ffa4f532c9c2c50c60d5c">HASHSHA2_256_BLOCK_SIZE</link>&#32;-&#32;9)&#32;&lt;&#32;(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>&#32;%&#32;<link linkend="__hash_s_h_a2_8h_1a54ae2b58657ffa4f532c9c2c50c60d5c">HASHSHA2_256_BLOCK_SIZE</link>)));
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00503"/>00503 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00504"/>00504 &#32;&#32;len_b&#32;&#32;=&#32;(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ac3c503ad968ed7b01977f06ef1acec66">totalsize</link>&#32;+&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>)&#32;&lt;&lt;&#32;3;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00505"/>00505 &#32;&#32;pm_len&#32;=&#32;blocknb&#32;&lt;&lt;&#32;6;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00506"/>00506 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00507"/>00507 &#32;&#32;memset(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>&#32;+&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>,&#32;0,&#32;pm_len&#32;-&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00508"/>00508 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>[ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>]&#32;=&#32;0x80;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00509"/>00509 &#32;&#32;<link linkend="__hash_s_h_a2_8cpp_1a8923e6bd4439211a8ed92391c4b2267f">UNPACK32</link>(len_b,&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>&#32;+&#32;pm_len&#32;-&#32;4);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00510"/>00510 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00511"/>00511 &#32;&#32;Sha2_256_Transf(ctx,&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>,&#32;blocknb);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00512"/>00512 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00513"/>00513 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0&#32;;&#32;i&lt;8;&#32;i++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00514"/>00514 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__hash_s_h_a2_8cpp_1a8923e6bd4439211a8ed92391c4b2267f">UNPACK32</link>(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1af4e584662dbeba5e6f9a1f923ede53e4">h</link>[i],&#32;&amp;digest[i&#32;&lt;&lt;&#32;2]);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00516"/>00516 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00517"/>00517 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00518"/>00518 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00519"/>00519 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00520"/>00520 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00532"/>00532 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_512_Transf(<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x">HASHSHA2_512_CTX</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;blocknb)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00533"/>00533 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00534"/>00534 &#32;&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;&#32;w[80];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00535"/>00535 &#32;&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;&#32;wv[8];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00536"/>00536 &#32;&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;&#32;t1;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00537"/>00537 &#32;&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;&#32;t2;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00538"/>00538 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;&#32;sub_block;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00539"/>00539 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;i;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00540"/>00540 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;j;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00541"/>00541 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00542"/>00542 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0;&#32;i&lt;(int)blocknb;&#32;i++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00543"/>00543 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;sub_block&#32;=&#32;input&#32;+&#32;(i&#32;&lt;&lt;&#32;7);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00545"/>00545 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(j=0;&#32;j&lt;16;&#32;j++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00547"/>00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__hash_s_h_a2_8cpp_1ae0527f961e4ceaeb5bdb8bb75f693cde">PACK64</link>(&amp;sub_block[j&#32;&lt;&lt;&#32;3],&#32;&amp;w[j]);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00550"/>00550 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00551"/>00551 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(j=16;&#32;j&lt;80;&#32;j++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__hash_s_h_a2_8cpp_1a579b95d2c45f72a9e6cd59eb81627926">SHA512_SCR</link>(j);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00555"/>00555 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(j=0;&#32;j&lt;8;&#32;j++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00557"/>00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[j]&#32;=&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a50369439affe8da15fd683a2388f82d9">h</link>[j];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00559"/>00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00560"/>00560 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00561"/>00561 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(j=0;&#32;j&lt;80;&#32;j++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00562"/>00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00563"/>00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t1&#32;=&#32;wv[7]&#32;+&#32;<link linkend="__hash_s_h_a2_8cpp_1a41b8a672f8ed1a11ea49acb032550fa6">SHA512_F2</link>(wv[4])&#32;+&#32;<link linkend="__hash_s_h_a2_8cpp_1a0ed6c9c714485592a8c317a8ad91c83b">CH</link>(wv[4],&#32;wv[5],&#32;wv[6])&#32;+&#32;Sha512_k[j]&#32;+&#32;w[j];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t2&#32;=&#32;<link linkend="__hash_s_h_a2_8cpp_1a8c65d2c0860cf623b5607b2aec6a870a">SHA512_F1</link>(wv[0])&#32;+&#32;<link linkend="__hash_s_h_a2_8cpp_1ae2f6c7a0b4fdb15387259356b16854c9">MAJ</link>(wv[0],&#32;wv[1],&#32;wv[2]);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00565"/>00565 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00566"/>00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[7]&#32;=&#32;wv[6];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00567"/>00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[6]&#32;=&#32;wv[5];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00568"/>00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[5]&#32;=&#32;wv[4];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00569"/>00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[4]&#32;=&#32;wv[3]&#32;+&#32;t1;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00570"/>00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[3]&#32;=&#32;wv[2];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00571"/>00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[2]&#32;=&#32;wv[1];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00572"/>00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[1]&#32;=&#32;wv[0];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00573"/>00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wv[0]&#32;=&#32;t1&#32;+&#32;t2;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00574"/>00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00575"/>00575 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(j=0;&#32;j&lt;8;&#32;j++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a50369439affe8da15fd683a2388f82d9">h</link>[j]&#32;+=&#32;wv[j];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00579"/>00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00580"/>00580 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00581"/>00581 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00582"/>00582 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00583"/>00583 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00595"/>00595 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_512(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;digest)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00596"/>00596 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00597"/>00597 &#32;&#32;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x">HASHSHA2_512_CTX</link>&#32;ctx;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00598"/>00598 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00599"/>00599 &#32;&#32;Sha2_512_Ini(&amp;ctx);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00600"/>00600 &#32;&#32;Sha2_512_Update(&amp;ctx,&#32;input,&#32;size);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00601"/>00601 &#32;&#32;Sha2_512_End(&amp;ctx,&#32;digest);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00602"/>00602 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00603"/>00603 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00604"/>00604 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00614"/>00614 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_512_Ini(<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x">HASHSHA2_512_CTX</link>*&#32;ctx)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00615"/>00615 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00616"/>00616 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00617"/>00617 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00618"/>00618 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0;&#32;i&lt;8;&#32;i++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00619"/>00619 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00620"/>00620 &#32;&#32;&#32;&#32;&#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a50369439affe8da15fd683a2388f82d9">h</link>[i]&#32;=&#32;Sha512_h0[i];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00621"/>00621 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00622"/>00622 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00623"/>00623 &#32;&#32;&#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00624"/>00624 &#32;&#32;&#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a77bab90c6921a17608c891e19a205c23">totalsize</link>&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00625"/>00625 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00626"/>00626 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00627"/>00627 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00639"/>00639 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_512_Update(<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x">HASHSHA2_512_CTX</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00640"/>00640 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00641"/>00641 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;blocknb;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00642"/>00642 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;new_len,&#32;rem_len,&#32;tmp_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00643"/>00643 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;shifted_input;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00644"/>00644 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00645"/>00645 &#32;&#32;tmp_len&#32;=&#32;<link linkend="__hash_s_h_a2_8h_1afb65640e2c9203f102b897476f463b99">HASHSHA2_512_BLOCK_SIZE</link>&#32;-&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00646"/>00646 &#32;&#32;rem_len&#32;=&#32;size&#32;&lt;&#32;tmp_len&#32;?&#32;size&#32;:&#32;tmp_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00647"/>00647 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00648"/>00648 &#32;&#32;memcpy(&amp;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>[ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>],&#32;input,&#32;rem_len);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00649"/>00649 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00650"/>00650 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>&#32;+&#32;size&#32;&lt;&#32;<link linkend="__hash_s_h_a2_8h_1afb65640e2c9203f102b897476f463b99">HASHSHA2_512_BLOCK_SIZE</link>)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00651"/>00651 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00652"/>00652 &#32;&#32;&#32;&#32;&#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>&#32;+=&#32;size;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00653"/>00653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00654"/>00654 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00655"/>00655 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00656"/>00656 &#32;&#32;new_len&#32;=&#32;size&#32;-&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00657"/>00657 &#32;&#32;blocknb&#32;=&#32;new_len&#32;/&#32;<link linkend="__hash_s_h_a2_8h_1afb65640e2c9203f102b897476f463b99">HASHSHA2_512_BLOCK_SIZE</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00658"/>00658 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00659"/>00659 &#32;&#32;shifted_input&#32;=&#32;input&#32;+&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00660"/>00660 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00661"/>00661 &#32;&#32;Sha2_512_Transf(ctx,&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>,&#32;1);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00662"/>00662 &#32;&#32;Sha2_512_Transf(ctx,&#32;shifted_input,&#32;blocknb);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00663"/>00663 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00664"/>00664 &#32;&#32;rem_len&#32;=&#32;new_len&#32;%&#32;<link linkend="__hash_s_h_a2_8h_1afb65640e2c9203f102b897476f463b99">HASHSHA2_512_BLOCK_SIZE</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00665"/>00665 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00666"/>00666 &#32;&#32;memcpy(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>,&#32;&amp;shifted_input[blocknb&#32;&lt;&lt;&#32;7],&#32;rem_len);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00667"/>00667 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00668"/>00668 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>&#32;=&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00669"/>00669 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a77bab90c6921a17608c891e19a205c23">totalsize</link>&#32;+=&#32;(blocknb&#32;+&#32;1)&#32;&lt;&lt;&#32;7;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00670"/>00670 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00671"/>00671 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00672"/>00672 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00683"/>00683 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_512_End(<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x">HASHSHA2_512_CTX</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;digest)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00684"/>00684 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00685"/>00685 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;blocknb;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00686"/>00686 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;pm_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00687"/>00687 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;len_b;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00688"/>00688 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;i;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00689"/>00689 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00690"/>00690 &#32;&#32;blocknb&#32;=&#32;1&#32;+&#32;((<link linkend="__hash_s_h_a2_8h_1afb65640e2c9203f102b897476f463b99">HASHSHA2_512_BLOCK_SIZE</link>&#32;-&#32;17)&#32;&lt;&#32;(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>&#32;%&#32;<link linkend="__hash_s_h_a2_8h_1afb65640e2c9203f102b897476f463b99">HASHSHA2_512_BLOCK_SIZE</link>));
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00691"/>00691 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00692"/>00692 &#32;&#32;len_b&#32;=&#32;(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a77bab90c6921a17608c891e19a205c23">totalsize</link>&#32;+&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>)&#32;&lt;&lt;&#32;3;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00693"/>00693 &#32;&#32;pm_len&#32;=&#32;blocknb&#32;&lt;&lt;&#32;7;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00694"/>00694 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00695"/>00695 &#32;&#32;memset(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>&#32;+&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>,&#32;0,&#32;pm_len&#32;-&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00696"/>00696 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>[ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>]&#32;=&#32;0x80;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00697"/>00697 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00698"/>00698 &#32;&#32;<link linkend="__hash_s_h_a2_8cpp_1a8923e6bd4439211a8ed92391c4b2267f">UNPACK32</link>(len_b,&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>&#32;+&#32;pm_len&#32;-&#32;4);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00699"/>00699 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00700"/>00700 &#32;&#32;Sha2_512_Transf(ctx,&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>,&#32;blocknb);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00701"/>00701 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00702"/>00702 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0&#32;;&#32;i&lt;8;&#32;i++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00703"/>00703 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00704"/>00704 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__hash_s_h_a2_8cpp_1abd089610ff5cefb1d50203d733de5f7e">UNPACK64</link>(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a50369439affe8da15fd683a2388f82d9">h</link>[i],&#32;&amp;digest[i&#32;&lt;&lt;&#32;3]);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00705"/>00705 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00706"/>00706 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00707"/>00707 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00708"/>00708 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00720"/>00720 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_384(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;digest)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00721"/>00721 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00722"/>00722 &#32;&#32;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x">HASHSHA2_384_CTX</link>&#32;ctx;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00723"/>00723 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00724"/>00724 &#32;&#32;Sha2_384_Ini(&amp;ctx);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00725"/>00725 &#32;&#32;Sha2_384_Update(&amp;ctx,&#32;input,&#32;size);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00726"/>00726 &#32;&#32;Sha2_384_End(&amp;ctx,&#32;digest);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00727"/>00727 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00728"/>00728 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00729"/>00729 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00739"/>00739 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_384_Ini(<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x">HASHSHA2_384_CTX</link>*&#32;ctx)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00740"/>00740 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00741"/>00741 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00742"/>00742 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00743"/>00743 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0;&#32;i&lt;8;&#32;i++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00744"/>00744 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00745"/>00745 &#32;&#32;&#32;&#32;&#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a50369439affe8da15fd683a2388f82d9">h</link>[i]&#32;=&#32;Sha384_h0[i];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00746"/>00746 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00747"/>00747 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00748"/>00748 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00749"/>00749 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a77bab90c6921a17608c891e19a205c23">totalsize</link>&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00750"/>00750 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00751"/>00751 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00752"/>00752 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00764"/>00764 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_384_Update(<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x">HASHSHA2_384_CTX</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;len)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00765"/>00765 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00766"/>00766 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;block_nb;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00767"/>00767 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;new_len,&#32;rem_len,&#32;tmp_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00768"/>00768 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;shifted_input;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00769"/>00769 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00770"/>00770 &#32;&#32;tmp_len&#32;=&#32;<link linkend="__hash_s_h_a2_8h_1ada7556403549fdbcc286d285ab5c83c9">HASHSHA2_384_BLOCK_SIZE</link>&#32;-&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00771"/>00771 &#32;&#32;rem_len&#32;=&#32;len&#32;&lt;&#32;tmp_len&#32;?&#32;len&#32;:&#32;tmp_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00772"/>00772 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00773"/>00773 &#32;&#32;memcpy(&amp;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>[ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>],&#32;input,&#32;rem_len);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00774"/>00774 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00775"/>00775 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>&#32;+&#32;len&#32;&lt;&#32;<link linkend="__hash_s_h_a2_8h_1ada7556403549fdbcc286d285ab5c83c9">HASHSHA2_384_BLOCK_SIZE</link>)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00776"/>00776 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00777"/>00777 &#32;&#32;&#32;&#32;&#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>&#32;+=&#32;len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00778"/>00778 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00779"/>00779 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00780"/>00780 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00781"/>00781 &#32;&#32;new_len&#32;=&#32;len&#32;-&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00782"/>00782 &#32;&#32;block_nb&#32;=&#32;new_len&#32;/&#32;<link linkend="__hash_s_h_a2_8h_1ada7556403549fdbcc286d285ab5c83c9">HASHSHA2_384_BLOCK_SIZE</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00783"/>00783 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00784"/>00784 &#32;&#32;shifted_input&#32;=&#32;input&#32;+&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00785"/>00785 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00786"/>00786 &#32;&#32;Sha2_512_Transf(ctx,&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>,&#32;1);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00787"/>00787 &#32;&#32;Sha2_512_Transf(ctx,&#32;shifted_input,&#32;block_nb);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00788"/>00788 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00789"/>00789 &#32;&#32;rem_len&#32;=&#32;new_len&#32;%&#32;<link linkend="__hash_s_h_a2_8h_1ada7556403549fdbcc286d285ab5c83c9">HASHSHA2_384_BLOCK_SIZE</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00790"/>00790 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00791"/>00791 &#32;&#32;memcpy(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>,&#32;&amp;shifted_input[block_nb&#32;&lt;&lt;&#32;7],&#32;rem_len);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00792"/>00792 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00793"/>00793 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00794"/>00794 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a77bab90c6921a17608c891e19a205c23">totalsize</link>&#32;+=&#32;(block_nb&#32;+&#32;1)&#32;&lt;&lt;&#32;7;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00795"/>00795 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00796"/>00796 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00797"/>00797 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00808"/>00808 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_384_End(<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x">HASHSHA2_384_CTX</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;digest)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00809"/>00809 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00810"/>00810 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;block_nb;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00811"/>00811 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;pm_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00812"/>00812 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;len_b;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00813"/>00813 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;i;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00814"/>00814 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00815"/>00815 &#32;&#32;block_nb&#32;=&#32;(1&#32;+&#32;((<link linkend="__hash_s_h_a2_8h_1ada7556403549fdbcc286d285ab5c83c9">HASHSHA2_384_BLOCK_SIZE</link>&#32;-&#32;17)&#32;&lt;&#32;(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>&#32;%&#32;<link linkend="__hash_s_h_a2_8h_1ada7556403549fdbcc286d285ab5c83c9">HASHSHA2_384_BLOCK_SIZE</link>)));
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00816"/>00816 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00817"/>00817 &#32;&#32;len_b&#32;=&#32;(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a77bab90c6921a17608c891e19a205c23">totalsize</link>&#32;+&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>)&#32;&lt;&lt;&#32;3;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00818"/>00818 &#32;&#32;pm_len&#32;=&#32;block_nb&#32;&lt;&lt;&#32;7;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00819"/>00819 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00820"/>00820 &#32;&#32;memset(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>&#32;+&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>,&#32;0,&#32;pm_len&#32;-&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00821"/>00821 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>[ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1ac2d26eea0d7d00bc56f7d77336f6f9ad">size</link>]&#32;=&#32;0x80;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00822"/>00822 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00823"/>00823 &#32;&#32;<link linkend="__hash_s_h_a2_8cpp_1a8923e6bd4439211a8ed92391c4b2267f">UNPACK32</link>(len_b,&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>&#32;+&#32;pm_len&#32;-&#32;4);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00824"/>00824 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00825"/>00825 &#32;&#32;Sha2_512_Transf(ctx,&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a49d12e90944e5597345291e68ebce531">block</link>,&#32;block_nb);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00826"/>00826 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00827"/>00827 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0&#32;;&#32;i&lt;6;&#32;i++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00828"/>00828 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00829"/>00829 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__hash_s_h_a2_8cpp_1abd089610ff5cefb1d50203d733de5f7e">UNPACK64</link>(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__512___c_t_x_1a50369439affe8da15fd683a2388f82d9">h</link>[i],&#32;&amp;digest[i&#32;&lt;&lt;&#32;3]);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00830"/>00830 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00831"/>00831 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00832"/>00832 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00833"/>00833 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00845"/>00845 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_224(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;len,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;digest)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00846"/>00846 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00847"/>00847 &#32;&#32;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x">HASHSHA2_224_CTX</link>&#32;ctx;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00848"/>00848 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00849"/>00849 &#32;&#32;Sha2_224_Ini(&amp;ctx);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00850"/>00850 &#32;&#32;Sha2_224_Update(&amp;ctx,&#32;input,&#32;len);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00851"/>00851 &#32;&#32;Sha2_224_End(&amp;ctx,&#32;digest);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00852"/>00852 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00853"/>00853 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00854"/>00854 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00864"/>00864 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_224_Ini(<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x">HASHSHA2_224_CTX</link>*&#32;ctx)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00865"/>00865 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00866"/>00866 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00867"/>00867 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00868"/>00868 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0;&#32;i&lt;8;&#32;i++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00869"/>00869 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00870"/>00870 &#32;&#32;&#32;&#32;&#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1af4e584662dbeba5e6f9a1f923ede53e4">h</link>[i]&#32;=&#32;Sha224_h0[i];
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00871"/>00871 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00872"/>00872 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00873"/>00873 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00874"/>00874 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ac3c503ad968ed7b01977f06ef1acec66">totalsize</link>&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00875"/>00875 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00876"/>00876 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00877"/>00877 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00889"/>00889 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_224_Update(<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x">HASHSHA2_224_CTX</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;len)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00890"/>00890 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00891"/>00891 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;block_nb;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00892"/>00892 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;new_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00893"/>00893 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00894"/>00894 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;tmp_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00895"/>00895 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;&#32;shifted_input;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00896"/>00896 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00897"/>00897 &#32;&#32;tmp_len&#32;=&#32;<link linkend="__hash_s_h_a2_8h_1a2187a3b58e7634e7a9172984c9fff76d">HASHSHA2_224_BLOCK_SIZE</link>&#32;-&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00898"/>00898 &#32;&#32;rem_len&#32;=&#32;len&#32;&lt;&#32;tmp_len&#32;?&#32;len&#32;:&#32;tmp_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00899"/>00899 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00900"/>00900 &#32;&#32;memcpy(&amp;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>[ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>],&#32;input,&#32;rem_len);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00901"/>00901 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00902"/>00902 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>&#32;+&#32;len&#32;&lt;&#32;<link linkend="__hash_s_h_a2_8h_1a2187a3b58e7634e7a9172984c9fff76d">HASHSHA2_224_BLOCK_SIZE</link>)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00903"/>00903 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00904"/>00904 &#32;&#32;&#32;&#32;&#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>&#32;+=&#32;len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00905"/>00905 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00906"/>00906 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00907"/>00907 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00908"/>00908 &#32;&#32;new_len&#32;=&#32;len&#32;-&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00909"/>00909 &#32;&#32;block_nb&#32;=&#32;new_len&#32;/&#32;<link linkend="__hash_s_h_a2_8h_1a2187a3b58e7634e7a9172984c9fff76d">HASHSHA2_224_BLOCK_SIZE</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00910"/>00910 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00911"/>00911 &#32;&#32;shifted_input&#32;=&#32;input&#32;+&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00912"/>00912 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00913"/>00913 &#32;&#32;Sha2_256_Transf(ctx,&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>,&#32;1);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00914"/>00914 &#32;&#32;Sha2_256_Transf(ctx,&#32;shifted_input,&#32;block_nb);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00915"/>00915 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00916"/>00916 &#32;&#32;rem_len&#32;=&#32;new_len&#32;%&#32;<link linkend="__hash_s_h_a2_8h_1a2187a3b58e7634e7a9172984c9fff76d">HASHSHA2_224_BLOCK_SIZE</link>;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00917"/>00917 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00918"/>00918 &#32;&#32;memcpy(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>,&#32;&amp;shifted_input[block_nb&#32;&lt;&lt;&#32;6],&#32;rem_len);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00919"/>00919 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00920"/>00920 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;rem_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00921"/>00921 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ac3c503ad968ed7b01977f06ef1acec66">totalsize</link>&#32;+=&#32;(block_nb&#32;+&#32;1)&#32;&lt;&lt;&#32;6;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00922"/>00922 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00923"/>00923 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00924"/>00924 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00935"/>00935 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Sha2_224_End(<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x">HASHSHA2_224_CTX</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;digest)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00936"/>00936 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00937"/>00937 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;block_nb;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00938"/>00938 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;pm_len;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00939"/>00939 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;len_b;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00940"/>00940 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;i;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00941"/>00941 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00942"/>00942 &#32;&#32;block_nb&#32;=&#32;(1&#32;+&#32;((<link linkend="__hash_s_h_a2_8h_1a2187a3b58e7634e7a9172984c9fff76d">HASHSHA2_224_BLOCK_SIZE</link>&#32;-&#32;9)&#32;&lt;&#32;(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>&#32;%&#32;<link linkend="__hash_s_h_a2_8h_1a2187a3b58e7634e7a9172984c9fff76d">HASHSHA2_224_BLOCK_SIZE</link>)));
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00943"/>00943 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00944"/>00944 &#32;&#32;len_b&#32;=&#32;(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ac3c503ad968ed7b01977f06ef1acec66">totalsize</link>&#32;+&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>)&#32;&lt;&lt;&#32;3;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00945"/>00945 &#32;&#32;pm_len&#32;=&#32;block_nb&#32;&lt;&lt;&#32;6;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00946"/>00946 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00947"/>00947 &#32;&#32;memset(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>&#32;+&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>,&#32;0,&#32;pm_len&#32;-&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00948"/>00948 &#32;&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>[ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1a0e049f830fa207871edd84659497eca5">size</link>]&#32;=&#32;0x80;
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00949"/>00949 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00950"/>00950 &#32;&#32;<link linkend="__hash_s_h_a2_8cpp_1a8923e6bd4439211a8ed92391c4b2267f">UNPACK32</link>(len_b,&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>&#32;+&#32;pm_len&#32;-&#32;4);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00951"/>00951 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00952"/>00952 &#32;&#32;Sha2_256_Transf(ctx,&#32;ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1ae939b942c5d20740bf7a8677e6ca138b">block</link>,&#32;block_nb);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00953"/>00953 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00954"/>00954 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0&#32;;&#32;i&lt;7;&#32;i++)
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00955"/>00955 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00956"/>00956 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__hash_s_h_a2_8cpp_1a8923e6bd4439211a8ed92391c4b2267f">UNPACK32</link>(ctx-&gt;<link linkend="_struct_h_a_s_h_s_h_a2__256___c_t_x_1af4e584662dbeba5e6f9a1f923ede53e4">h</link>[i],&#32;&amp;digest[i&#32;&lt;&lt;&#32;2]);
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00957"/>00957 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00958"/>00958 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00959"/>00959 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00960"/>00960 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00969"/>00969 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA2::Clean()
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00970"/>00970 {
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00971"/>00971 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00972"/>00972 }
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00973"/>00973 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00974"/>00974 
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00975"/>00975 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__hash_s_h_a2_8cpp_source_1l00976"/>00976 
</programlisting></section>
