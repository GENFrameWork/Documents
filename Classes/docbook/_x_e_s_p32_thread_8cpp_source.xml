<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_e_s_p32_thread_8cpp_source" xml:lang="en-US">
<title>XESP32Thread.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Platforms/Microcontrollers/ESP32/XESP32Thread.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;INCLUDES&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;region&#32;PRECOMPILATION_INCLUDES</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00031"/>00031 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00036"/>00036 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00037"/>00037 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#pragma&#32;region&#32;INCLUDES</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00039"/>00039 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_e_s_p32_thread_8h">XESP32Thread.h</link>&quot;</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00041"/>00041 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00042"/>00042 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_sleep_8h">XSleep.h</link>&quot;</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_trace_8h">XTrace.h</link>&quot;</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00044"/>00044 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_thread_list_non_preemptive_8h">XThreadListNonPreemptive.h</link>&quot;</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00045"/>00045 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00046"/>00046 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00047"/>00047 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00048"/>00048 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00049"/>00049 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00050"/>00050 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00051"/>00051 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00052"/>00052 <emphasis role="preprocessor">#pragma&#32;region&#32;GENERAL_VARIABLE</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00053"/>00053 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00054"/>00054 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00055"/>00055 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00056"/>00056 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00057"/>00057 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00058"/>00058 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_MEMBERS</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00059"/>00059 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00060"/>00060 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00061"/>00061 <emphasis role="comment">/*----&#32;CLASS&#32;ESP32MUTEX&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00062"/>00062 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_ESP32MUTEX</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00063"/>00063 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00064"/>00064 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00072"/><link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1gabc91f1c195616a0852f7aaef17c82818">00072</link> <link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1gabc91f1c195616a0852f7aaef17c82818">XESP32MUTEX::XESP32MUTEX</link>()
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00073"/>00073 {
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00074"/>00074 &#32;&#32;<link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga81675a8133a755f8af9200876094db3a">Clean</link>();
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00075"/>00075 }
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00076"/>00076 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00077"/>00077 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00086"/><link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga4f8bbd9667c2e6580dfe91c20c80cc7a">00086</link> <link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga4f8bbd9667c2e6580dfe91c20c80cc7a">XESP32MUTEX::~XESP32MUTEX</link>()
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00087"/>00087 {
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00088"/>00088 &#32;&#32;<link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga81675a8133a755f8af9200876094db3a">Clean</link>();
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00089"/>00089 }
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00090"/>00090 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00091"/>00091 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00101"/><link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga1d18947602a5dda1a5e5c8207e2dafd2">00101</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga1d18947602a5dda1a5e5c8207e2dafd2">XESP32MUTEX::Lock</link>()
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00102"/>00102 {
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00103"/>00103 &#32;&#32;<link linkend="_class_x_e_s_p32_m_u_t_e_x_1a9b665812190779f715c901997aac6940">counterlock</link>++;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00104"/>00104 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_class_x_e_s_p32_m_u_t_e_x_1a9b665812190779f715c901997aac6940">counterlock</link>)&#32;<link linkend="_class_x_m_u_t_e_x_1a784c2288217c31d8d78bf60f90ff8338">islock</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00105"/>00105 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00106"/>00106 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00107"/>00107 }
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00108"/>00108 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00109"/>00109 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00119"/><link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga76ed39b887ac103387eae54689820266">00119</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga76ed39b887ac103387eae54689820266">XESP32MUTEX::UnLock</link>()
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00120"/>00120 {
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00121"/>00121 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_e_s_p32_m_u_t_e_x_1a9b665812190779f715c901997aac6940">counterlock</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00122"/>00122 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00123"/>00123 &#32;&#32;<link linkend="_class_x_e_s_p32_m_u_t_e_x_1a9b665812190779f715c901997aac6940">counterlock</link>--;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00124"/>00124 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_e_s_p32_m_u_t_e_x_1a9b665812190779f715c901997aac6940">counterlock</link>)&#32;&#32;<link linkend="_class_x_m_u_t_e_x_1a784c2288217c31d8d78bf60f90ff8338">islock</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00125"/>00125 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00126"/>00126 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00127"/>00127 }
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00128"/>00128 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00129"/>00129 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00138"/><link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga81675a8133a755f8af9200876094db3a">00138</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga81675a8133a755f8af9200876094db3a">XESP32MUTEX::Clean</link>()
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00139"/>00139 {
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00140"/>00140 &#32;&#32;<link linkend="_class_x_e_s_p32_m_u_t_e_x_1a9b665812190779f715c901997aac6940">counterlock</link>&#32;&#32;=&#32;0;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00141"/>00141 }
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00142"/>00142 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00143"/>00143 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00144"/>00144 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00145"/>00145 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00146"/>00146 <emphasis role="comment">/*----&#32;CLASS&#32;ESP32THREAD&#32;---------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00147"/>00147 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_ESP32THREAD</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00148"/>00148 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00149"/>00149 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00162"/><link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga4eaef44f180663d34787cac810971447">00162</link> <link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga4eaef44f180663d34787cac810971447">XESP32THREAD::XESP32THREAD</link>(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;ID,&#32;<link linkend="__x_thread_8h_1a75cd5e654ca0f2255ae2473172af98d6">XTHREADFUNCTION</link>&#32;function,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;data)&#32;:&#32;<link linkend="_class_x_t_h_r_e_a_d">XTHREAD</link>(groupID,&#32;ID,&#32;function,&#32;data)
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00163"/>00163 {
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00164"/>00164 &#32;&#32;Clean();
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00165"/>00165 }
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00166"/>00166 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00167"/>00167 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00176"/><link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1gaf669a96608e4e9a712e0ece63e6dcd58">00176</link> <link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1gaf669a96608e4e9a712e0ece63e6dcd58">XESP32THREAD::~XESP32THREAD</link>()
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00177"/>00177 {
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00178"/>00178 &#32;&#32;<link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga0fcb59e400e5f1296860ff2aa5c71138">End</link>();
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00179"/>00179 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00180"/>00180 &#32;&#32;Clean();
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00181"/>00181 }
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00182"/>00182 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00183"/>00183 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00195"/><link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga8fb0e89f6c6f02d00e0784938e9b96db">00195</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga8fb0e89f6c6f02d00e0784938e9b96db">XESP32THREAD::Ini</link>(<emphasis role="keywordtype">bool</emphasis>&#32;run)
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00196"/>00196 {
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00197"/>00197 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(run)
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_group___x_u_t_i_l_s_1ga777dc032596d071d63fc47d55b8e6b04">Run</link>(<emphasis role="keyword">true</emphasis>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="_class_x_t_h_r_e_a_d_1ab906a8f23382bdc51d83df77f02ea13d">statusfunc</link>&#32;=&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a38a37e3fa13a372c1389ecbfa4b8af62">XTHREADSTATUS_STOP</link>;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00202"/>00202 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00203"/>00203 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="comment">//XTHREADLISTNONPREEMPTIVE::GetInstance().AddThread(this);</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00204"/>00204 }
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00205"/>00205 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00206"/>00206 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00218"/><link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1gaa6b710313e9d21e76109da2331a0d6c0">00218</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1gaa6b710313e9d21e76109da2331a0d6c0">XESP32THREAD::Wait</link>(<emphasis role="keywordtype">int</emphasis>&#32;miliseconds)
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00219"/>00219 {
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00220"/>00220 &#32;&#32;GEN_XSLEEP.MilliSeconds(miliseconds);
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00221"/>00221 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00222"/>00222 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00223"/>00223 }
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00224"/>00224 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00225"/>00225 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00235"/><link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga0fcb59e400e5f1296860ff2aa5c71138">00235</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___e_s_p32_1ga0fcb59e400e5f1296860ff2aa5c71138">XESP32THREAD::End</link>()
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00236"/>00236 {
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00237"/>00237 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_class_x_t_h_r_e_a_d_1ab906a8f23382bdc51d83df77f02ea13d">statusfunc</link>&#32;==&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a0810d58d25021355fa8ae7bf348ed610">XTHREADSTATUS_END</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00238"/>00238 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00239"/>00239 &#32;&#32;<link linkend="_class_x_t_h_r_e_a_d_1ab906a8f23382bdc51d83df77f02ea13d">statusfunc</link>&#32;=&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a93f78a60f2a85c943ec7559ae1893aec">XTHREADSTATUS_EXIT</link>;
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00240"/>00240 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00241"/>00241 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="comment">//XTHREADLISTNONPREEMPTIVE::GetInstance().DeleteThread(this);</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00242"/>00242 }
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00243"/>00243 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00244"/>00244 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00253"/>00253 <emphasis role="keywordtype">void</emphasis>&#32;XESP32THREAD::Clean()
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00254"/>00254 {
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00255"/>00255 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00256"/>00256 }
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00257"/>00257 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00258"/>00258 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00259"/>00259 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00260"/>00260 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00261"/>00261 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00262"/>00262 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00263"/>00263 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00264"/>00264 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00265"/>00265 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00266"/>00266 
<anchor xml:id="__x_e_s_p32_thread_8cpp_source_1l00267"/>00267 
</programlisting></section>
