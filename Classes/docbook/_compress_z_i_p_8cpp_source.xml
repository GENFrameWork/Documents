<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__compress_z_i_p_8cpp_source" xml:lang="en-US">
<title>CompressZIP.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Compress/CompressZIP.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__compress_z_i_p_8cpp_source_1l00001"/>00001 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;INCLUDES&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;region&#32;PRECOMPILATION_INCLUDES</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00031"/>00031 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00033"/>00033 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00035"/>00035 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00036"/>00036 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00037"/>00037 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#pragma&#32;region&#32;INCLUDES</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00039"/>00039 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__compress_z_i_p_8h">CompressZIP.h</link>&quot;</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00041"/>00041 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00042"/>00042 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00044"/>00044 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#include&#32;&lt;zlib.h&gt;</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00046"/>00046 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00047"/>00047 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_buffer_8h">XBuffer.h</link>&quot;</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00048"/>00048 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00049"/>00049 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00050"/>00050 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00051"/>00051 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00052"/>00052 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00053"/>00053 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00054"/>00054 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00055"/>00055 <emphasis role="preprocessor">#pragma&#32;region&#32;GENERAL_VARIABLE</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00056"/>00056 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00057"/>00057 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00058"/>00058 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00059"/>00059 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00060"/>00060 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00061"/>00061 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_MEMBERS</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00062"/>00062 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00063"/>00063 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00071"/><link linkend="_group___c_o_m_p_r_e_s_s_1ga4e2aac56cb16d466069ea1ab3d9caab0">00071</link> <link linkend="_group___c_o_m_p_r_e_s_s_1ga4e2aac56cb16d466069ea1ab3d9caab0">COMPRESS_ZIP::COMPRESS_ZIP</link>()&#32;:&#32;<link linkend="_class_c_o_m_p_r_e_s_s_b_a_s_e">COMPRESSBASE</link>()
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00072"/>00072 {
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00073"/>00073 &#32;&#32;Clean();
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00074"/>00074 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00075"/>00075 &#32;&#32;<link linkend="_group___c_o_m_p_r_e_s_s_1ga9a7d68961c2af05ba8e21f6584cde06f">SetType</link>(<link linkend="__compress_base_8h_1ae531f940df1055ce7c28e7cbc784a22fa9438c2ed0a009fc2c34ea854915e3c1d">COMPRESSBASE_TYPE_ZIP</link>);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00076"/>00076 }
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00077"/>00077 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00078"/>00078 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00087"/><link linkend="_group___c_o_m_p_r_e_s_s_1ga8ed93199cba1ebc6af5c65af868e9bec">00087</link> <link linkend="_group___c_o_m_p_r_e_s_s_1ga8ed93199cba1ebc6af5c65af868e9bec">COMPRESS_ZIP::~COMPRESS_ZIP</link>()
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00088"/>00088 {
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00089"/>00089 &#32;&#32;Clean();
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00090"/>00090 }
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00091"/>00091 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00092"/>00092 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00106"/><link linkend="_group___c_o_m_p_r_e_s_s_1gadc99544a9131a4546a8a0918cb463acb">00106</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___c_o_m_p_r_e_s_s_1gadc99544a9131a4546a8a0918cb463acb">COMPRESS_ZIP::Compress</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;source,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>*&#32;xbuffer)
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00107"/>00107 {
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00108"/>00108 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!source)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00109"/>00109 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!size)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00110"/>00110 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xbuffer)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00111"/>00111 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00112"/>00112 &#32;&#32;xbuffer-&gt;<link linkend="_group___x_u_t_i_l_s_1ga0395231705663a2aeeee3b4be9d292bb">Delete</link>();
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00113"/>00113 &#32;&#32;xbuffer-&gt;<link linkend="_group___x_u_t_i_l_s_1gacf69e379f1d0bf812ae9c1157eac172c">Resize</link>(size);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00114"/>00114 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00115"/>00115 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;csize&#32;=&#32;size;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00116"/>00116 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00117"/>00117 &#32;&#32;ZCompress(xbuffer-&gt;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;&amp;csize,&#32;source,&#32;size);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00118"/>00118 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00119"/>00119 &#32;&#32;xbuffer-&gt;<link linkend="_group___x_u_t_i_l_s_1gacf69e379f1d0bf812ae9c1157eac172c">Resize</link>(csize);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00120"/>00120 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00121"/>00121 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00122"/>00122 }
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00123"/>00123 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00124"/>00124 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00138"/><link linkend="_group___c_o_m_p_r_e_s_s_1gaa05a323d6736f2c4ad7941efe600f04e">00138</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___c_o_m_p_r_e_s_s_1gaa05a323d6736f2c4ad7941efe600f04e">COMPRESS_ZIP::Decompress</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;source,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>*&#32;xbuffer)
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00139"/>00139 {
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00140"/>00140 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!source)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00141"/>00141 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!size)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00142"/>00142 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xbuffer)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00143"/>00143 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00144"/>00144 &#32;&#32;<emphasis role="comment">//xbuffer-&gt;Delete();</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00145"/>00145 &#32;&#32;<emphasis role="comment">//xbuffer-&gt;Resize(xbuffer-&gt;size);</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00146"/>00146 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00147"/>00147 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;csize&#32;=&#32;xbuffer-&gt;<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>();
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00148"/>00148 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00149"/>00149 &#32;&#32;ZDecompress(xbuffer-&gt;<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;&amp;csize,&#32;source,&#32;size);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00150"/>00150 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00151"/>00151 &#32;&#32;<emphasis role="comment">//xbuffer-&gt;Resize(csize);</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00152"/>00152 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00153"/>00153 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00154"/>00154 }
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00155"/>00155 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00156"/>00156 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00171"/>00171 <emphasis role="keywordtype">int</emphasis>&#32;COMPRESS_ZIP::ZCompress(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;target,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*&#32;targetsize,<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;source,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sourcesize)
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00172"/>00172 {
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00173"/>00173 &#32;&#32;z_stream&#32;stream;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00174"/>00174 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;err;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00175"/>00175 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;nExtraChunks;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00176"/>00176 &#32;&#32;uInt&#32;&#32;&#32;&#32;&#32;destlen;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00177"/>00177 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00178"/>00178 &#32;&#32;stream.next_in&#32;&#32;=&#32;(Bytef*)source;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00179"/>00179 &#32;&#32;stream.avail_in&#32;=&#32;(uInt)sourcesize;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00180"/>00180 &#32;&#32;destlen&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(uInt)*targetsize;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00181"/>00181 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00182"/>00182 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((uLong)destlen&#32;!=&#32;(uLong)*targetsize)&#32;<emphasis role="keywordflow">return</emphasis>&#32;Z_BUF_ERROR;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00183"/>00183 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00184"/>00184 &#32;&#32;stream.zalloc&#32;=&#32;(alloc_func)0;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00185"/>00185 &#32;&#32;stream.zfree&#32;=&#32;(free_func)0;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00186"/>00186 &#32;&#32;stream.opaque&#32;=&#32;(voidpf)0;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00187"/>00187 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00188"/>00188 &#32;&#32;err&#32;=&#32;deflateInit(&amp;stream,&#32;Z_DEFAULT_COMPRESSION);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00189"/>00189 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;Z_OK)&#32;<emphasis role="keywordflow">return</emphasis>&#32;err;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00190"/>00190 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00191"/>00191 &#32;&#32;nExtraChunks&#32;=&#32;0;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00192"/>00192 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00193"/>00193 &#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;stream.next_out&#32;=&#32;target;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;stream.avail_out&#32;=&#32;destlen;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00195"/>00195 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;deflate(&amp;stream,&#32;Z_FINISH);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(err==Z_STREAM_END)&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00198"/>00198 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;Z_OK)
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deflateEnd(&amp;stream);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00204"/>00204 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;nExtraChunks&#32;+=&#32;1;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00206"/>00206 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;}<emphasis role="keywordflow">while</emphasis>(stream.avail_out&#32;==&#32;0);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00208"/>00208 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00209"/>00209 &#32;*targetsize&#32;=&#32;stream.total_out;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00210"/>00210 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00211"/>00211 &#32;err&#32;=&#32;deflateEnd(&amp;stream);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00212"/>00212 &#32;<emphasis role="keywordflow">if</emphasis>(err!=&#32;Z_OK)&#32;<emphasis role="keywordflow">return</emphasis>&#32;err;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00213"/>00213 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00214"/>00214 &#32;<emphasis role="keywordflow">return</emphasis>&#32;nExtraChunks&#32;?&#32;Z_BUF_ERROR&#32;:&#32;Z_OK;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00215"/>00215 }
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00216"/>00216 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00217"/>00217 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00232"/>00232 <emphasis role="keywordtype">int</emphasis>&#32;COMPRESS_ZIP::ZDecompress(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;target,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*&#32;targetsize,<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;source,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sourcesize)
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00233"/>00233 {
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00234"/>00234 &#32;&#32;z_stream&#32;stream;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00235"/>00235 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00236"/>00236 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00237"/>00237 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nExtraChunks;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00238"/>00238 &#32;&#32;uInt&#32;destlen;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00239"/>00239 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00240"/>00240 &#32;&#32;stream.next_in&#32;=&#32;(Bytef*)source;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00241"/>00241 &#32;&#32;stream.avail_in&#32;=&#32;(uInt)sourcesize;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00242"/>00242 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00243"/>00243 &#32;&#32;<emphasis role="comment">/*&#32;Check&#32;for&#32;source&#32;&gt;&#32;64K&#32;on&#32;16-bit&#32;machine:&#32;*/</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00244"/>00244 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((uLong)stream.avail_in&#32;!=&#32;(uLong)sourcesize)&#32;<emphasis role="keywordflow">return</emphasis>&#32;Z_BUF_ERROR;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00245"/>00245 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00246"/>00246 &#32;&#32;destlen&#32;=&#32;(uInt)*targetsize;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00247"/>00247 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((uLong)destlen&#32;!=&#32;(uLong)*targetsize)&#32;<emphasis role="keywordflow">return</emphasis>&#32;Z_BUF_ERROR;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00248"/>00248 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00249"/>00249 &#32;&#32;stream.zalloc&#32;=&#32;(alloc_func)0;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00250"/>00250 &#32;&#32;stream.zfree&#32;=&#32;(free_func)0;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00251"/>00251 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00252"/>00252 &#32;&#32;err&#32;=&#32;inflateInit(&amp;stream);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00253"/>00253 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;Z_OK)&#32;<emphasis role="keywordflow">return</emphasis>&#32;err;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00254"/>00254 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00255"/>00255 &#32;&#32;nExtraChunks&#32;=&#32;0;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00256"/>00256 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00257"/>00257 &#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;stream.next_out&#32;=&#32;target;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;stream.avail_out&#32;=&#32;destlen;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;inflate(&amp;stream,&#32;Z_FINISH);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(err==Z_STREAM_END)&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00261"/>00261 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(err&#32;==&#32;Z_NEED_DICT&#32;||&#32;(err&#32;==&#32;Z_BUF_ERROR&#32;&amp;&amp;&#32;stream.avail_in&#32;==&#32;0))&#32;err&#32;=&#32;Z_DATA_ERROR;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00263"/>00263 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(err!=Z_BUF_ERROR)
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inflateEnd(&amp;stream);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00269"/>00269 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;nExtraChunks&#32;+=&#32;1;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00271"/>00271 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(stream.avail_out&#32;==&#32;0);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00273"/>00273 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00274"/>00274 &#32;&#32;*targetsize&#32;=&#32;stream.total_out;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00275"/>00275 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00276"/>00276 &#32;&#32;err&#32;=&#32;inflateEnd(&amp;stream);
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00277"/>00277 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(err!=Z_OK)&#32;<emphasis role="keywordflow">return</emphasis>&#32;err;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00278"/>00278 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00279"/>00279 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nExtraChunks&#32;?&#32;Z_BUF_ERROR&#32;:&#32;Z_OK;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00280"/>00280 }
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00281"/>00281 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00282"/>00282 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00291"/>00291 <emphasis role="keywordtype">void</emphasis>&#32;COMPRESS_ZIP::Clean()
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00292"/>00292 {
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00293"/>00293 &#32;&#32;<link linkend="_class_c_o_m_p_r_e_s_s_b_a_s_e_1a912f2c51ea571d790654cebe7754c772">param1</link>&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00294"/>00294 }
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00295"/>00295 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00296"/>00296 
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00297"/>00297 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__compress_z_i_p_8cpp_source_1l00298"/>00298 
</programlisting></section>
