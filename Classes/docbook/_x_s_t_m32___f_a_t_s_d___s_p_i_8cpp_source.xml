<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source" xml:lang="en-US">
<title>XSTM32_FATSD_SPI.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Platforms/Microcontrollers/STM32/XSTM32_FATSD_SPI.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;CONTROL&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00030"/>00030 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00031"/>00031 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00032"/>00032 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00034"/>00034 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00036"/>00036 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h">XSTM32_FATSD_SPI.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00037"/>00037 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00039"/>00039 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00040"/>00040 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00041"/>00041 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00042"/>00042 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00043"/>00043 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00044"/>00044 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00045"/>00045 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00046"/>00046 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00054"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga57facf92de109e2ab005a9a595bd8035">00054</link> <link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga57facf92de109e2ab005a9a595bd8035">XSTM32_FATSD_SPI::XSTM32_FATSD_SPI</link>()&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00055"/>00055 {&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00056"/>00056 &#32;&#32;Clean();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00057"/>00057 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00058"/>00058 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00059"/>00059 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00060"/>00060 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00069"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gade10692466872bd7bf1c5ff8781ee2d9">00069</link> <link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gade10692466872bd7bf1c5ff8781ee2d9">XSTM32_FATSD_SPI::~XSTM32_FATSD_SPI</link>()&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00070"/>00070 {&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00071"/>00071 &#32;&#32;Clean();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00072"/>00072 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00073"/>00073 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00074"/>00074 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00075"/>00075 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00090"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga757f5f80503ed3efa19b5322a0dfc8d7">00090</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga757f5f80503ed3efa19b5322a0dfc8d7">XSTM32_FATSD_SPI::Ini</link>(SPI_HandleTypeDef*&#32;handleSPI,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;GPIOentryID_CS,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;GPIOentryID_switch,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="__x_l_i_n_u_x_system_8cpp_1a493b57f443cc38b3d3df9c1e584d9d82">timeout</link>)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00091"/>00091 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00092"/>00092 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!handleSPI)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00093"/>00093 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00094"/>00094 &#32;&#32;this-&gt;GPIOentryID_CS&#32;&#32;&#32;&#32;&#32;&#32;=&#32;GPIOentryID_CS;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00095"/>00095 &#32;&#32;this-&gt;GPIOentryID_switch&#32;&#32;=&#32;GPIOentryID_switch;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00096"/>00096 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00097"/>00097 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GPIOentryID_CS&#32;&#32;&#32;&#32;&#32;!=&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>)&#32;&#32;&#32;GEN_DIOGPIO.SetMode(GPIOentryID_CS&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="__d_i_o_g_p_i_o_8h_1af43e26d0701212b8857b22becaa4c416">DIOGPIO_MODE_OUTPUT</link>);&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00098"/>00098 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GPIOentryID_switch&#32;!=&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>)&#32;&#32;&#32;GEN_DIOGPIO.SetMode(GPIOentryID_switch&#32;,&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a35602bfdf7d8cd6a558027a378f50041">DIOGPIO_MODE_INPUT</link>);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00099"/>00099 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00100"/>00100 &#32;&#32;this-&gt;handleSPI&#32;=&#32;handleSPI;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00101"/>00101 &#32;&#32;this-&gt;timeout&#32;&#32;&#32;=&#32;<link linkend="__x_l_i_n_u_x_system_8cpp_1a493b57f443cc38b3d3df9c1e584d9d82">timeout</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00102"/>00102 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00103"/>00103 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00104"/>00104 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00105"/>00105 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00106"/>00106 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00107"/>00107 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00117"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga8c12f0d99a4098167353bc21b917018c">00117</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga8c12f0d99a4098167353bc21b917018c">XSTM32_FATSD_SPI::GetGPIOEntryID_CS</link>()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00118"/>00118 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00119"/>00119 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GPIOentryID_CS;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00120"/>00120 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00121"/>00121 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00122"/>00122 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00123"/>00123 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00133"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gaee284e69090a86a9c5a1b84676ccd2d4">00133</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gaee284e69090a86a9c5a1b84676ccd2d4">XSTM32_FATSD_SPI::SetGPIOEntryID_CS</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;GPIOentryID)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00134"/>00134 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00135"/>00135 &#32;&#32;GPIOentryID_CS&#32;=&#32;GPIOentryID;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00136"/>00136 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00137"/>00137 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00139"/>00139 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00149"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gaa6de702f982209643f50fd87e12c0693">00149</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gaa6de702f982209643f50fd87e12c0693">XSTM32_FATSD_SPI::GetGPIOEntryID_Switch</link>()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00150"/>00150 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00151"/>00151 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GPIOentryID_switch;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00152"/>00152 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00153"/>00153 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00154"/>00154 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00155"/>00155 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00156"/>00156 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00166"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga51e995b5e983ba159bdcd0fd1a640338">00166</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga51e995b5e983ba159bdcd0fd1a640338">XSTM32_FATSD_SPI::SetGPIOEntryID_Switch</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;GPIOentryID)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00167"/>00167 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00168"/>00168 &#32;&#32;GPIOentryID_switch&#32;=&#32;GPIOentryID;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00169"/>00169 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00170"/>00170 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00171"/>00171 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00172"/>00172 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00182"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gad9a86e5abe645d9723f4944f398dd44c">00182</link> SPI_HandleTypeDef*&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gad9a86e5abe645d9723f4944f398dd44c">XSTM32_FATSD_SPI::GetHandleSPI</link>()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00183"/>00183 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00184"/>00184 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleSPI;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00185"/>00185 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00186"/>00186 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00187"/>00187 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00188"/>00188 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00189"/>00189 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00199"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga51066f29afe40b1de444b7b85f3f2d54">00199</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga51066f29afe40b1de444b7b85f3f2d54">XSTM32_FATSD_SPI::SetHandleSPI</link>(SPI_HandleTypeDef*&#32;handleSPI)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00200"/>00200 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00201"/>00201 &#32;&#32;this-&gt;handleSPI&#32;=&#32;handleSPI;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00202"/>00202 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00203"/>00203 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00204"/>00204 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00205"/>00205 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00215"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga4624eb00eea320602ab12c5a2b938a8d">00215</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga4624eb00eea320602ab12c5a2b938a8d">XSTM32_FATSD_SPI::Disk_IsInserted</link>()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00216"/>00216 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00217"/>00217 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GPIOentryID_switch&#32;==&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00218"/>00218 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00219"/>00219 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GEN_DIOGPIO.GetValue(GPIOentryID_switch);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00220"/>00220 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00221"/>00221 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00222"/>00222 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00223"/>00223 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00235"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga3d8b1467193885f3e017eacbb4046026">00235</link> DSTATUS&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga3d8b1467193885f3e017eacbb4046026">XSTM32_FATSD_SPI::Disk_Initialize</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;drive)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00236"/>00236 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00237"/>00237 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;n;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00238"/>00238 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;type;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00239"/>00239 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;ocr[4];
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00240"/>00240 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00241"/>00241 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(drive)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STA_NOINIT;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00242"/>00242 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;&amp;&#32;STA_NODISK)&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00243"/>00243 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00244"/>00244 &#32;&#32;<emphasis role="comment">//&#32;SD&#32;Power&#32;On&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00245"/>00245 &#32;&#32;SD_PowerOn();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00246"/>00246 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00247"/>00247 &#32;&#32;<emphasis role="comment">//&#32;SPI&#32;Chip&#32;Select&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00248"/>00248 &#32;&#32;CS_Select();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00249"/>00249 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00250"/>00250 &#32;&#32;type&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00251"/>00251 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00252"/>00252 &#32;&#32;<emphasis role="comment">//&#32;Idle&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00253"/>00253 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1aafaa9f000d0fc2a3720d8d3f15a10fc1">XSTM32_FATSD_SPI_CMD0</link>,&#32;0)&#32;==&#32;1)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;timer1&#32;=&#32;100;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ac8ffb2f5bfe8bc93a06fb491931a7f83">XSTM32_FATSD_SPI_CMD8</link>,&#32;0x1AA)&#32;==&#32;1)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SDC&#32;Ver2+&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(n=0;&#32;n&lt;4;&#32;n++)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ocr[n]&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00264"/>00264 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(ocr[2]&#32;==&#32;0x01&#32;&amp;&amp;&#32;ocr[3]&#32;==&#32;0xAA)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2.7-3.6V&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a6fa5eb81b6e5d8e32de4b523fb824d16">XSTM32_FATSD_SPI_CMD55</link>,&#32;0)&#32;&lt;=&#32;1&#32;&amp;&amp;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1aeeb02cecc6925708aeb25a7afd98415b">XSTM32_FATSD_SPI_CMD41</link>,&#32;1UL&#32;&lt;&lt;&#32;30)&#32;==&#32;0)&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;<emphasis role="comment">//&#32;ACMD41&#32;with&#32;HCS&#32;bit&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00269"/>00269 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(timer1);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00271"/>00271 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(timer1&#32;&amp;&amp;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a83200676164221b35b4de8184310c48f">XSTM32_FATSD_SPI_CMD58</link>,&#32;0)&#32;==&#32;0)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;CCS&#32;bit&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(n=0;&#32;n&lt;4;&#32;n++)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ocr[n]&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00279"/>00279 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;=&#32;(ocr[0]&#32;&amp;&#32;0x40)&#32;?&#32;6&#32;:&#32;2;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SDC&#32;Ver1&#32;or&#32;MMC&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;=&#32;(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a6fa5eb81b6e5d8e32de4b523fb824d16">XSTM32_FATSD_SPI_CMD55</link>,&#32;0)&#32;&lt;=&#32;1&#32;&amp;&amp;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1aeeb02cecc6925708aeb25a7afd98415b">XSTM32_FATSD_SPI_CMD41</link>,&#32;0)&#32;&lt;=&#32;1)&#32;?&#32;2&#32;:&#32;1;&#32;<emphasis role="comment">//&#32;SDC&#32;:&#32;MMC&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00288"/>00288 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;<emphasis role="keywordflow">if</emphasis>(type&#32;==&#32;2)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a6fa5eb81b6e5d8e32de4b523fb824d16">XSTM32_FATSD_SPI_CMD55</link>,&#32;0)&#32;&lt;=&#32;1&#32;&amp;&amp;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1aeeb02cecc6925708aeb25a7afd98415b">XSTM32_FATSD_SPI_CMD41</link>,&#32;0)&#32;==&#32;0)&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;<emphasis role="comment">//&#32;ACMD41&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1abd62f15996b505d5d0c492154f59dea9">XSTM32_FATSD_SPI_CMD1</link>,&#32;0)&#32;==&#32;0)&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;<emphasis role="comment">//&#32;CMD1&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00297"/>00297 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(timer1);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00299"/>00299 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!timer1&#32;||&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a25125ae37bd37bad1ad604acf1939c24">XSTM32_FATSD_SPI_CMD16</link>,&#32;512)&#32;!=&#32;0)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00306"/>00306 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00307"/>00307 &#32;&#32;cardtype&#32;=&#32;type;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00308"/>00308 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00309"/>00309 &#32;&#32;CS_Deselect();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00310"/>00310 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00311"/>00311 &#32;&#32;SPI_ReadByte();&#32;<emphasis role="comment">//&#32;Idle&#32;(Release&#32;DO)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00312"/>00312 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00313"/>00313 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(type)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clear&#32;STA_NOINIT&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;status&#32;&amp;=&#32;~STA_NOINIT;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialization&#32;failed&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;SD_PowerOff();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00323"/>00323 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00324"/>00324 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00325"/>00325 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00326"/>00326 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00327"/>00327 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00328"/>00328 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00329"/>00329 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00341"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga33f7b623d82602e71d843e14815dd975">00341</link> DSTATUS&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga33f7b623d82602e71d843e14815dd975">XSTM32_FATSD_SPI::Disk_Status</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;drive)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00342"/>00342 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00343"/>00343 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(drive)&#32;<emphasis role="keywordflow">return</emphasis>&#32;STA_NOINIT;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00344"/>00344 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00345"/>00345 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00346"/>00346 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00347"/>00347 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00348"/>00348 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00349"/>00349 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00364"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga3dbd408bc29e23a8b79e2f67b0433fa5">00364</link> DRESULT&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga3dbd408bc29e23a8b79e2f67b0433fa5">XSTM32_FATSD_SPI::Disk_Read</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;pdrive,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sector,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;count)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00365"/>00365 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00366"/>00366 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pdrive&#32;||&#32;!count)&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_PARERR;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00367"/>00367 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;&amp;&#32;STA_NOINIT)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_NOTRDY;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00368"/>00368 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00369"/>00369 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(cardtype&#32;&amp;&#32;4))&#32;sector&#32;*=&#32;512;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sector&#32;Byte&#32;addresultsing&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00370"/>00370 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00371"/>00371 &#32;&#32;CS_Select();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00372"/>00372 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00373"/>00373 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(count&#32;==&#32;1)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ab4dd7db0cfd814a99d5287b14745f5e6">XSTM32_FATSD_SPI_CMD17</link>,&#32;sector)&#32;==&#32;0)&#32;&amp;&amp;&#32;SD_ReadDataBlock(buffer,&#32;512))&#32;&#32;count&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00376"/>00376 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00377"/>00377 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ac167d8024c4703a2e4fb97349e500e65">XSTM32_FATSD_SPI_CMD18</link>,&#32;sector)&#32;==&#32;0)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;<emphasis role="keywordflow">if</emphasis>(!SD_ReadDataBlock(buffer,&#32;512))&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00382"/>00382 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;+=&#32;512;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00384"/>00384 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(--count);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00386"/>00386 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;STOP_TRANSMISSION&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1adc77e4da2349826e383adae5d2e4a470">XSTM32_FATSD_SPI_CMD12</link>,&#32;0);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00391"/>00391 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00392"/>00392 &#32;&#32;CS_Deselect();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00393"/>00393 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00394"/>00394 &#32;&#32;SPI_ReadByte();&#32;<emphasis role="comment">//&#32;Idle&#32;Release&#32;DO</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00395"/>00395 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00396"/>00396 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count?RES_ERROR:RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00397"/>00397 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00398"/>00398 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00399"/>00399 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00400"/>00400 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00415"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga97629e76cc36206b196bd22a69318df3">00415</link> DRESULT&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga97629e76cc36206b196bd22a69318df3">XSTM32_FATSD_SPI::Disk_Write</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;pdrive,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sector,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;count)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00416"/>00416 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00417"/>00417 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pdrive&#32;||&#32;!count)&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_PARERR;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00418"/>00418 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;&amp;&#32;STA_NOINIT)&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_NOTRDY;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00419"/>00419 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00420"/>00420 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;&amp;&#32;STA_PROTECT)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_WRPRT;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00421"/>00421 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00422"/>00422 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!(cardtype&#32;&amp;&#32;4))&#32;&#32;&#32;&#32;&#32;sector&#32;*=&#32;512;&#32;<emphasis role="comment">/*&#32;지정&#32;sector를&#32;Byte&#32;addresultsing&#32;단위로&#32;변경&#32;*/</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00423"/>00423 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00424"/>00424 &#32;&#32;CS_Select();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00425"/>00425 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00426"/>00426 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(count&#32;==&#32;1)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00427"/>00427 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a0edcf2963865e47006e28ac1e23f2bd2">XSTM32_FATSD_SPI_CMD24</link>,&#32;sector)&#32;==&#32;0)&#32;&amp;&amp;&#32;SD_WriteDataBlock(buffer,&#32;0xFE))&#32;count&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00429"/>00429 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00430"/>00430 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00431"/>00431 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(cardtype&#32;&amp;&#32;2)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a6fa5eb81b6e5d8e32de4b523fb824d16">XSTM32_FATSD_SPI_CMD55</link>,&#32;0);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a6f721e2ebd6df0fec2927a9e282438b9">XSTM32_FATSD_SPI_CMD23</link>,&#32;count);&#32;<emphasis role="comment">/*&#32;ACMD23&#32;*/</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00437"/>00437 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a796d039969a5d8d26a092c24a8d33c27">XSTM32_FATSD_SPI_CMD25</link>,&#32;sector)&#32;==&#32;0)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;<emphasis role="keywordflow">if</emphasis>(!SD_WriteDataBlock(buffer,&#32;0xFC))&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00441"/>00441 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;+=&#32;512;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00443"/>00443 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(--count);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00445"/>00445 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!SD_WriteDataBlock(0,&#32;0xFD))
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count&#32;=&#32;1;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00452"/>00452 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00453"/>00453 &#32;&#32;CS_Deselect();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00454"/>00454 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00455"/>00455 &#32;&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00456"/>00456 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00457"/>00457 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(count?RES_ERROR:RES_OK);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00458"/>00458 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00459"/>00459 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00460"/>00460 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00461"/>00461 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00462"/>00462 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00476"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gaa80b5f2b076ab7672dfbd10dcde56f11">00476</link> DRESULT&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gaa80b5f2b076ab7672dfbd10dcde56f11">XSTM32_FATSD_SPI::Disk_IOTCL</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;drive,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;ctrl,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;buffer)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00477"/>00477 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00478"/>00478 &#32;&#32;DRESULT&#32;result;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00479"/>00479 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;n;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00480"/>00480 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;csd[16];
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00481"/>00481 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;&#32;ptr&#32;=&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)buffer;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00482"/>00482 &#32;&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;&#32;&#32;csize;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00483"/>00483 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00484"/>00484 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(drive)&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_PARERR;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00485"/>00485 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00486"/>00486 &#32;&#32;result&#32;=&#32;RES_ERROR;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00487"/>00487 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00488"/>00488 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(ctrl&#32;==&#32;CTRL_POWER)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00489"/>00489 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(*ptr)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;&#32;0&#32;:&#32;<emphasis role="keywordflow">if</emphasis>(SD_CheckPower())&#32;&#32;SD_PowerOff();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Power&#32;Off&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00495"/>00495 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;&#32;1&#32;:&#32;SD_PowerOn();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Power&#32;On&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00499"/>00499 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;&#32;2&#32;:&#32;*(ptr&#32;+&#32;1)&#32;=&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)&#32;SD_CheckPower();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Power&#32;Check&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00503"/>00503 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;:&#32;result&#32;=&#32;RES_PARERR;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00506"/>00506 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00507"/>00507 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00508"/>00508 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;&amp;&#32;STA_NOINIT)&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_NOTRDY;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00510"/>00510 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;CS_Select();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00512"/>00512 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(ctrl)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;GET_SECTOR_COUNT&#32;&#32;&#32;:&#32;<emphasis role="comment">//&#32;SD&#32;Sector&#32;(DWORD)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ab433dca76abe358286a843f1e944213b">XSTM32_FATSD_SPI_CMD9</link>,&#32;0)&#32;==&#32;0)&#32;&amp;&amp;&#32;SD_ReadDataBlock(csd,&#32;16))
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((csd[0]&#32;&gt;&gt;&#32;6)&#32;==&#32;1)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SDC&#32;ver&#32;2.00&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;csize&#32;=&#32;csd[9]&#32;+&#32;((WORD)&#32;csd[8]&#32;&lt;&lt;&#32;8)&#32;+&#32;1;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(DWORD*)&#32;buffer&#32;=&#32;(DWORD)&#32;csize&#32;&lt;&lt;&#32;10;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00526"/>00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MMC&#32;or&#32;SDC&#32;ver&#32;1.XX&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;(csd[5]&#32;&amp;&#32;15)&#32;+&#32;((csd[10]&#32;&amp;&#32;128)&#32;&gt;&gt;&#32;7)&#32;+&#32;((csd[9]&#32;&amp;&#32;3)&#32;&lt;&lt;&#32;1)&#32;+&#32;2;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;csize&#32;=&#32;(csd[8]&#32;&gt;&gt;&#32;6)&#32;+&#32;((WORD)&#32;csd[7]&#32;&lt;&lt;&#32;2)&#32;+&#32;((WORD)&#32;(csd[6]&#32;&amp;&#32;3)&#32;&lt;&lt;&#32;10)&#32;+&#32;1;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(DWORD*)&#32;buffer&#32;=&#32;(DWORD)&#32;csize&#32;&lt;&lt;&#32;(n&#32;-&#32;9);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00531"/>00531 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00533"/>00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00534"/>00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00535"/>00535 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;GET_SECTOR_SIZE&#32;&#32;&#32;&#32;:&#32;<emphasis role="comment">//&#32;(WORD)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(WORD*)&#32;buffer&#32;=&#32;512;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00538"/>00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00540"/>00540 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00541"/>00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CTRL_SYNC&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">if</emphasis>(SD_ReadyWait()&#32;==&#32;0xFF)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00542"/>00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00544"/>00544 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00545"/>00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;MMC_GET_CSD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="comment">//&#32;CSD&#32;(16&#32;bytes)</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ab433dca76abe358286a843f1e944213b">XSTM32_FATSD_SPI_CMD9</link>,&#32;0)&#32;==&#32;0&#32;&amp;&amp;&#32;SD_ReadDataBlock(ptr,&#32;16))&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00547"/>00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00548"/>00548 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;MMC_GET_CID&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="comment">//&#32;CID&#32;&#32;(16&#32;bytes)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ac19a5745a78ce4ca6abdac9fd8d32106">XSTM32_FATSD_SPI_CMD10</link>,&#32;0)&#32;==&#32;0&#32;&amp;&amp;&#32;SD_ReadDataBlock(ptr,&#32;16))&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00551"/>00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00552"/>00552 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;MMC_GET_OCR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="comment">//&#32;OCR&#32;(4&#32;bytes)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a83200676164221b35b4de8184310c48f">XSTM32_FATSD_SPI_CMD58</link>,&#32;0)&#32;==&#32;0)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;4;&#32;n++)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00557"/>00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*ptr++&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00559"/>00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00560"/>00560 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00561"/>00561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00562"/>00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00563"/>00563 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;&#32;&#32;:&#32;&#32;result&#32;=&#32;RES_PARERR;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00565"/>00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00566"/>00566 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00567"/>00567 &#32;&#32;&#32;&#32;CS_Deselect();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00568"/>00568 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00569"/>00569 &#32;&#32;&#32;&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00570"/>00570 &#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00571"/>00571 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00572"/>00572 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00573"/>00573 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00574"/>00574 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00575"/>00575 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00576"/>00576 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00586"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gaf6ec241464f65cd9442d103502f76308">00586</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gaf6ec241464f65cd9442d103502f76308">XSTM32_FATSD_SPI::End</link>()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00587"/>00587 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00588"/>00588 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00589"/>00589 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00590"/>00590 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00591"/>00591 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00592"/>00592 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00600"/>00600 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32_FATSD_SPI::CS_Select()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00601"/>00601 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00602"/>00602 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GPIOentryID_CS&#32;==&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00603"/>00603 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00604"/>00604 &#32;&#32;GEN_DIOGPIO.SetValue(GPIOentryID_CS,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00605"/>00605 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00606"/>00606 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00607"/>00607 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00608"/>00608 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00616"/>00616 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32_FATSD_SPI::CS_Deselect()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00617"/>00617 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00618"/>00618 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GPIOentryID_CS&#32;==&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00619"/>00619 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00620"/>00620 &#32;&#32;GEN_DIOGPIO.SetValue(GPIOentryID_CS,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00621"/>00621 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00622"/>00622 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00623"/>00623 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00624"/>00624 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00625"/>00625 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00635"/>00635 <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;XSTM32_FATSD_SPI::SPI_ReadByte()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00636"/>00636 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00637"/>00637 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;dummy;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00638"/>00638 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00639"/>00639 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00640"/>00640 &#32;&#32;dummy&#32;=&#32;0xFF;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00641"/>00641 &#32;&#32;data&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00642"/>00642 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00643"/>00643 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((HAL_SPI_GetState(handleSPI)&#32;!=&#32;HAL_SPI_STATE_READY));
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00644"/>00644 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00645"/>00645 &#32;&#32;HAL_SPI_TransmitReceive(handleSPI,&#32;&amp;dummy,&#32;&amp;data,&#32;1,&#32;timeout);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00646"/>00646 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00647"/>00647 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00648"/>00648 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00649"/>00649 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00650"/>00650 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00651"/>00651 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00661"/>00661 <emphasis role="keywordtype">bool</emphasis>&#32;XSTM32_FATSD_SPI::SPI_WriteByte(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00662"/>00662 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00663"/>00663 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!handleSPI)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00664"/>00664 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00665"/>00665 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(HAL_SPI_GetState(handleSPI)&#32;!=&#32;HAL_SPI_STATE_READY);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00666"/>00666 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00667"/>00667 &#32;&#32;HAL_SPI_Transmit(handleSPI,&#32;&amp;data,&#32;1,&#32;timeout);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00668"/>00668 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00669"/>00669 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00670"/>00670 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00671"/>00671 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00672"/>00672 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00682"/>00682 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32_FATSD_SPI::SPI_ReadBytePtr(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00683"/>00683 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00684"/>00684 &#32;&#32;(*buffer)&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00685"/>00685 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00686"/>00686 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00687"/>00687 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00688"/>00688 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00689"/>00689 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00699"/>00699 <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;XSTM32_FATSD_SPI::SD_ReadyWait()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00700"/>00700 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00701"/>00701 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;resultult;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00702"/>00702 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00703"/>00703 &#32;&#32;<emphasis role="comment">//&#32;500ms&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00704"/>00704 &#32;&#32;timer2&#32;=&#32;50;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00705"/>00705 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00706"/>00706 &#32;&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00707"/>00707 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00708"/>00708 &#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;<emphasis role="comment">//&#32;0xFF&#32;SPI&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00709"/>00709 &#32;&#32;&#32;&#32;&#32;&#32;resultult&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00710"/>00710 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00711"/>00711 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;((resultult&#32;!=&#32;0xFF)&#32;&amp;&amp;&#32;timer2);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00712"/>00712 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00713"/>00713 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;resultult;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00714"/>00714 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00715"/>00715 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00716"/>00716 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00717"/>00717 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00725"/>00725 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32_FATSD_SPI::SD_PowerOn()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00726"/>00726 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00727"/>00727 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;&#32;&#32;cmd_arg[6];
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00728"/>00728 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;count&#32;=&#32;0x1FFF;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00729"/>00729 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00730"/>00730 &#32;&#32;CS_Deselect();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00731"/>00731 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00732"/>00732 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;10;&#32;c++)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00733"/>00733 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00734"/>00734 &#32;&#32;&#32;&#32;&#32;&#32;SPI_WriteByte(0xFF);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00735"/>00735 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00736"/>00736 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00737"/>00737 &#32;&#32;<emphasis role="comment">//&#32;SPI&#32;Chips&#32;Select&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00738"/>00738 &#32;&#32;CS_Select();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00739"/>00739 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00740"/>00740 &#32;&#32;<emphasis role="comment">//&#32;GO_IDLE_STATE</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00741"/>00741 &#32;&#32;cmd_arg[0]&#32;=&#32;(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1aafaa9f000d0fc2a3720d8d3f15a10fc1">XSTM32_FATSD_SPI_CMD0</link>&#32;|&#32;0x40);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00742"/>00742 &#32;&#32;cmd_arg[1]&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00743"/>00743 &#32;&#32;cmd_arg[2]&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00744"/>00744 &#32;&#32;cmd_arg[3]&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00745"/>00745 &#32;&#32;cmd_arg[4]&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00746"/>00746 &#32;&#32;cmd_arg[5]&#32;=&#32;0x95;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00747"/>00747 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00748"/>00748 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00749"/>00749 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;6;&#32;c++)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00750"/>00750 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00751"/>00751 &#32;&#32;&#32;&#32;&#32;&#32;SPI_WriteByte(cmd_arg[c]);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00752"/>00752 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00753"/>00753 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00754"/>00754 &#32;&#32;<emphasis role="keywordflow">while</emphasis>((SPI_ReadByte()&#32;!=&#32;0x01)&#32;&amp;&amp;&#32;count)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00755"/>00755 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00756"/>00756 &#32;&#32;&#32;&#32;&#32;&#32;count--;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00757"/>00757 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00758"/>00758 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00759"/>00759 &#32;&#32;CS_Deselect();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00760"/>00760 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00761"/>00761 &#32;&#32;SPI_WriteByte(0XFF);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00762"/>00762 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00763"/>00763 &#32;&#32;powerflag&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00764"/>00764 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00765"/>00765 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00766"/>00766 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00767"/>00767 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00768"/>00768 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00776"/>00776 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32_FATSD_SPI::SD_PowerOff()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00777"/>00777 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00778"/>00778 &#32;&#32;powerflag&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00779"/>00779 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00780"/>00780 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00781"/>00781 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00782"/>00782 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00792"/>00792 <emphasis role="keywordtype">bool</emphasis>&#32;XSTM32_FATSD_SPI::SD_CheckPower()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00793"/>00793 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00794"/>00794 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;powerflag;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00795"/>00795 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00796"/>00796 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00797"/>00797 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00798"/>00798 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00799"/>00799 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00812"/>00812 <emphasis role="keywordtype">bool</emphasis>&#32;XSTM32_FATSD_SPI::SD_ReadDataBlock(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;btr)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00813"/>00813 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00814"/>00814 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;token;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00815"/>00815 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00816"/>00816 &#32;&#32;<emphasis role="comment">//&#32;100ms&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00817"/>00817 &#32;&#32;timer1&#32;=&#32;10;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00818"/>00818 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00819"/>00819 &#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;token&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00820"/>00820 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00821"/>00821 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>((token&#32;==&#32;0xFF)&#32;&amp;&amp;&#32;timer1);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00822"/>00822 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00823"/>00823 &#32;&#32;<emphasis role="comment">//&#32;0xFE&#32;Token</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00824"/>00824 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(token&#32;!=&#32;0xFE)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_s_t_m32___h_a_l_8h_1aa93f0eb578d23995850d61f7d61c55c1">FALSE</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00825"/>00825 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00826"/>00826 &#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;SPI_ReadBytePtr(buffer++);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00827"/>00827 &#32;&#32;&#32;&#32;&#32;&#32;SPI_ReadBytePtr(buffer++);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00828"/>00828 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00829"/>00829 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(btr&#32;-=&#32;2);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00830"/>00830 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00831"/>00831 &#32;&#32;SPI_ReadByte();&#32;<emphasis role="comment">//&#32;CRC</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00832"/>00832 &#32;&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00833"/>00833 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00834"/>00834 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_s_t_m32___h_a_l_8h_1aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00835"/>00835 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00836"/>00836 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00837"/>00837 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00838"/>00838 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00839"/>00839 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00852"/>00852 <emphasis role="keywordtype">bool</emphasis>&#32;XSTM32_FATSD_SPI::SD_WriteDataBlock(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;token)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00853"/>00853 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00854"/>00854 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;resultponse;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00855"/>00855 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;wc;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00856"/>00856 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;i&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00857"/>00857 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00858"/>00858 &#32;&#32;<emphasis role="comment">//&#32;SD&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00859"/>00859 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SD_ReadyWait()&#32;!=&#32;0xFF)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_s_t_m32___h_a_l_8h_1aa93f0eb578d23995850d61f7d61c55c1">FALSE</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00860"/>00860 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00861"/>00861 &#32;&#32;SPI_WriteByte(token);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00862"/>00862 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00863"/>00863 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(token&#32;!=&#32;0xFD)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00864"/>00864 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00865"/>00865 &#32;&#32;&#32;&#32;&#32;&#32;wc&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00866"/>00866 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00867"/>00867 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;512&#32;&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00868"/>00868 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;SPI_WriteByte(*buffer++);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00869"/>00869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SPI_WriteByte(*buffer++);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00870"/>00870 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00871"/>00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(--wc);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00872"/>00872 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00873"/>00873 &#32;&#32;&#32;&#32;&#32;&#32;SPI_ReadByte();&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;CRC&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00874"/>00874 &#32;&#32;&#32;&#32;&#32;&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00875"/>00875 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00876"/>00876 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(i&#32;&lt;=&#32;64)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00877"/>00877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00878"/>00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resultponse&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00879"/>00879 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00880"/>00880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((resultponse&#32;&amp;&#32;0x1F)&#32;==&#32;0x05)&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00881"/>00881 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00882"/>00882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00883"/>00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00884"/>00884 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00885"/>00885 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SPI&#32;Clear&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00886"/>00886 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(SPI_ReadByte()&#32;==&#32;0);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00887"/>00887 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00888"/>00888 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00889"/>00889 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((resultponse&#32;&amp;&#32;0x1F)&#32;==&#32;0x05)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_s_t_m32___h_a_l_8h_1aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</link>;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00890"/>00890 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00891"/>00891 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_s_t_m32___h_a_l_8h_1aa93f0eb578d23995850d61f7d61c55c1">FALSE</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00892"/>00892 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00893"/>00893 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00894"/>00894 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00907"/>00907 <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;XSTM32_FATSD_SPI::SD_SendCmd(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;cmd,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;arg)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00908"/>00908 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00909"/>00909 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;crc;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00910"/>00910 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;resultult;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00911"/>00911 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00912"/>00912 &#32;&#32;<emphasis role="comment">//&#32;SD&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00913"/>00913 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_ReadyWait()&#32;!=&#32;0xFF)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0xFF;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00914"/>00914 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00915"/>00915 &#32;&#32;SPI_WriteByte(cmd);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Command&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00916"/>00916 &#32;&#32;SPI_WriteByte((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)&#32;(arg&#32;&gt;&gt;&#32;24));&#32;&#32;&#32;<emphasis role="comment">//&#32;Argument[31..24]&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00917"/>00917 &#32;&#32;SPI_WriteByte((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)&#32;(arg&#32;&gt;&gt;&#32;16));&#32;&#32;&#32;<emphasis role="comment">//&#32;Argument[23..16]&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00918"/>00918 &#32;&#32;SPI_WriteByte((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)&#32;(arg&#32;&gt;&gt;&#32;8));&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Argument[15..8]&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00919"/>00919 &#32;&#32;SPI_WriteByte((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)&#32;arg);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Argument[7..0]&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00920"/>00920 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00921"/>00921 &#32;&#32;<emphasis role="comment">//&#32;CRC&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00922"/>00922 &#32;&#32;crc&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00923"/>00923 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(cmd&#32;==&#32;<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1aafaa9f000d0fc2a3720d8d3f15a10fc1">XSTM32_FATSD_SPI_CMD0</link>)&#32;&#32;&#32;crc&#32;=&#32;0x95;&#32;<emphasis role="comment">//&#32;CRC&#32;for&#32;CMD0(0)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00924"/>00924 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(cmd&#32;==&#32;<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ac8ffb2f5bfe8bc93a06fb491931a7f83">XSTM32_FATSD_SPI_CMD8</link>)&#32;&#32;&#32;crc&#32;=&#32;0x87;&#32;<emphasis role="comment">//&#32;CRC&#32;for&#32;CMD8(0x1AA)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00925"/>00925 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00926"/>00926 &#32;&#32;<emphasis role="comment">//&#32;CRC&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00927"/>00927 &#32;&#32;SPI_WriteByte(crc);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00928"/>00928 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00929"/>00929 &#32;&#32;<emphasis role="comment">//&#32;CMD12&#32;Stop&#32;Reading&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00930"/>00930 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cmd&#32;==&#32;<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1adc77e4da2349826e383adae5d2e4a470">XSTM32_FATSD_SPI_CMD12</link>)&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00931"/>00931 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00932"/>00932 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;n&#32;=&#32;10;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00933"/>00933 &#32;&#32;<emphasis role="keywordflow">do</emphasis>{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00934"/>00934 &#32;&#32;&#32;&#32;&#32;&#32;resultult&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00935"/>00935 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00936"/>00936 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;((resultult&#32;&amp;&#32;0x80)&#32;&amp;&amp;&#32;--n);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00937"/>00937 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00938"/>00938 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;resultult;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00939"/>00939 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00940"/>00940 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00941"/>00941 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00942"/>00942 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00951"/>00951 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32_FATSD_SPI::Clean()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00952"/>00952 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00953"/>00953 &#32;&#32;GPIOentryID_CS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00954"/>00954 &#32;&#32;GPIOentryID_switch&#32;&#32;&#32;&#32;=&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00955"/>00955 &#32;&#32;handleSPI&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00956"/>00956 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00957"/>00957 &#32;&#32;timeout&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00958"/>00958 &#32;&#32;timer1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00959"/>00959 &#32;&#32;timer2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00960"/>00960 &#32;&#32;status&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;STA_NOINIT;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00961"/>00961 &#32;&#32;powerflag&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00962"/>00962 &#32;&#32;cardtype&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00963"/>00963 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00964"/>00964 
</programlisting></section>
