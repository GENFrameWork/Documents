<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_s_t_m32_thread_8cpp_source" xml:lang="en-US">
<title>XSTM32Thread.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Platforms/Microcontrollers/STM32/XSTM32Thread.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;CONTROL&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00030"/>00030 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00031"/>00031 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00032"/>00032 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00034"/>00034 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00036"/>00036 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_sleep_8h">XSleep.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_trace_8h">XTrace.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_thread_list_non_preemptive_8h">XThreadListNonPreemptive.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00039"/>00039 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_s_t_m32___h_a_l_8h">XSTM32_HAL.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00040"/>00040 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00041"/>00041 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_s_t_m32_thread_8h">XSTM32Thread.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00042"/>00042 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00044"/>00044 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00045"/>00045 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00046"/>00046 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00047"/>00047 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00048"/>00048 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00049"/>00049 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00050"/>00050 <emphasis role="comment">/*--------------------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00051"/>00051 <emphasis role="commentemphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00052"/>00052 <emphasis role="comment">/*--------------------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00053"/>00053 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00054"/>00054 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00055"/>00055 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00063"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gaa6edbc35005599ab52ee72db7631f4ec">00063</link> <link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gaa6edbc35005599ab52ee72db7631f4ec">XSTM32MUTEX::XSTM32MUTEX</link>()
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00064"/>00064 {
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00065"/>00065 &#32;&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga26d6f525b92743e17baf91fb730880e1">Clean</link>();
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00066"/>00066 }
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00067"/>00067 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00068"/>00068 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00069"/>00069 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00078"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga99aac586eefb106036e7da2ddc0b2603">00078</link> <link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga99aac586eefb106036e7da2ddc0b2603">XSTM32MUTEX::~XSTM32MUTEX</link>()
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00079"/>00079 {
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00080"/>00080 &#32;&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga26d6f525b92743e17baf91fb730880e1">Clean</link>();
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00081"/>00081 }
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00082"/>00082 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00083"/>00083 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00084"/>00084 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00094"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gab9f4d584d9ec96c16fea3b083d9d33fb">00094</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gab9f4d584d9ec96c16fea3b083d9d33fb">XSTM32MUTEX::Lock</link>()
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00095"/>00095 {
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00096"/>00096 &#32;&#32;<link linkend="_class_x_s_t_m32_m_u_t_e_x_1a082e1bae18664ef9b03a5e54c04db7f3">counterlock</link>++;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00097"/>00097 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_class_x_s_t_m32_m_u_t_e_x_1a082e1bae18664ef9b03a5e54c04db7f3">counterlock</link>)&#32;<link linkend="_class_x_m_u_t_e_x_1a784c2288217c31d8d78bf60f90ff8338">islock</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00098"/>00098 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00099"/>00099 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00100"/>00100 }
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00101"/>00101 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00102"/>00102 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00103"/>00103 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00113"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga37e73d39e9b58be3949e4c2a7b1b8ab7">00113</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga37e73d39e9b58be3949e4c2a7b1b8ab7">XSTM32MUTEX::UnLock</link>()
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00114"/>00114 {
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00115"/>00115 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_s_t_m32_m_u_t_e_x_1a082e1bae18664ef9b03a5e54c04db7f3">counterlock</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00116"/>00116 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00117"/>00117 &#32;&#32;<link linkend="_class_x_s_t_m32_m_u_t_e_x_1a082e1bae18664ef9b03a5e54c04db7f3">counterlock</link>--;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00118"/>00118 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_s_t_m32_m_u_t_e_x_1a082e1bae18664ef9b03a5e54c04db7f3">counterlock</link>)&#32;&#32;<link linkend="_class_x_m_u_t_e_x_1a784c2288217c31d8d78bf60f90ff8338">islock</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00119"/>00119 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00120"/>00120 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00121"/>00121 }
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00122"/>00122 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00123"/>00123 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00124"/>00124 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00133"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga26d6f525b92743e17baf91fb730880e1">00133</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga26d6f525b92743e17baf91fb730880e1">XSTM32MUTEX::Clean</link>()
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00134"/>00134 {
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00135"/>00135 &#32;&#32;<link linkend="_class_x_s_t_m32_m_u_t_e_x_1a082e1bae18664ef9b03a5e54c04db7f3">counterlock</link>&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00136"/>00136 }
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00137"/>00137 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00138"/>00138 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00139"/>00139 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00140"/>00140 <emphasis role="comment">/*--------------------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00141"/>00141 <emphasis role="commentemphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00142"/>00142 <emphasis role="comment">/*--------------------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00143"/>00143 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00144"/>00144 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00145"/>00145 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00158"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gacd5a35a961122a2acd9bfd7522d0daeb">00158</link> <link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gacd5a35a961122a2acd9bfd7522d0daeb">XSTM32THREAD::XSTM32THREAD</link>(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;ID,&#32;<link linkend="__x_thread_8h_1a75cd5e654ca0f2255ae2473172af98d6">XTHREADFUNCTION</link>&#32;function,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;data)&#32;:&#32;<link linkend="_class_x_t_h_r_e_a_d">XTHREAD</link>(groupID,&#32;ID,&#32;function,&#32;data)
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00159"/>00159 {
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00160"/>00160 &#32;&#32;Clean();
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00161"/>00161 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00162"/>00162 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00163"/>00163 }
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00164"/>00164 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00165"/>00165 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00174"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gaf60912d6c858b9d82f6eae4f85f6a68b">00174</link> <link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gaf60912d6c858b9d82f6eae4f85f6a68b">XSTM32THREAD::~XSTM32THREAD</link>()
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00175"/>00175 {
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00176"/>00176 &#32;&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga79e0f65aa46832ff4678329a0672e378">End</link>();
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00177"/>00177 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00178"/>00178 &#32;&#32;Clean();
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00179"/>00179 }
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00180"/>00180 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00181"/>00181 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00182"/>00182 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00194"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gabaffa4b27635c473802d0748591e3475">00194</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1gabaffa4b27635c473802d0748591e3475">XSTM32THREAD::Ini</link>(<emphasis role="keywordtype">bool</emphasis>&#32;run)
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00195"/>00195 {
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00196"/>00196 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(run)
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_group___x_u_t_i_l_s_1ga777dc032596d071d63fc47d55b8e6b04">Run</link>(<emphasis role="keyword">true</emphasis>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="_class_x_t_h_r_e_a_d_1ab906a8f23382bdc51d83df77f02ea13d">statusfunc</link>&#32;=&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a38a37e3fa13a372c1389ecbfa4b8af62">XTHREADSTATUS_STOP</link>;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00201"/>00201 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00202"/>00202 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga6865277ecc64005706b5cf68b20529fb">XTHREADLISTNONPREEMPTIVE::GetInstance</link>().<link linkend="_group___x_u_t_i_l_s_1ga63793054fabff139698eb9b1f05433cc">AddThread</link>(<emphasis role="keyword">this</emphasis>);
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00203"/>00203 }
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00204"/>00204 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00205"/>00205 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00206"/>00206 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00218"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga12cafdc39c109aba6f4d4986f90a1343">00218</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga12cafdc39c109aba6f4d4986f90a1343">XSTM32THREAD::Wait</link>(<emphasis role="keywordtype">int</emphasis>&#32;miliseconds)
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00219"/>00219 {
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00220"/>00220 &#32;&#32;GEN_XSLEEP.MilliSeconds(miliseconds);
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00221"/>00221 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00222"/>00222 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00223"/>00223 }
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00224"/>00224 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00225"/>00225 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00226"/>00226 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00236"/><link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga79e0f65aa46832ff4678329a0672e378">00236</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___p_l_a_t_f_o_r_m___s_t_m32_1ga79e0f65aa46832ff4678329a0672e378">XSTM32THREAD::End</link>()
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00237"/>00237 {
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00238"/>00238 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_class_x_t_h_r_e_a_d_1ab906a8f23382bdc51d83df77f02ea13d">statusfunc</link>&#32;==&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a0810d58d25021355fa8ae7bf348ed610">XTHREADSTATUS_END</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00239"/>00239 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00240"/>00240 &#32;&#32;<link linkend="_class_x_t_h_r_e_a_d_1ab906a8f23382bdc51d83df77f02ea13d">statusfunc</link>&#32;=&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a93f78a60f2a85c943ec7559ae1893aec">XTHREADSTATUS_EXIT</link>;
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00241"/>00241 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00242"/>00242 &#32;&#32;<emphasis role="comment">//WaitToEnd();</emphasis>
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00243"/>00243 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00244"/>00244 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga6865277ecc64005706b5cf68b20529fb">XTHREADLISTNONPREEMPTIVE::GetInstance</link>().<link linkend="_group___x_u_t_i_l_s_1gad14ac9a4bf1cf279951bb9900e3e0da7">DeleteThread</link>(<emphasis role="keyword">this</emphasis>);
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00245"/>00245 }
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00246"/>00246 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00247"/>00247 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00248"/>00248 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00257"/>00257 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32THREAD::Clean()
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00258"/>00258 {
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00259"/>00259 
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00260"/>00260 }
<anchor xml:id="__x_s_t_m32_thread_8cpp_source_1l00261"/>00261 
</programlisting></section>
