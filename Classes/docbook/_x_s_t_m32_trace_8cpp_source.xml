<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_s_t_m32_trace_8cpp_source" xml:lang="en-US">
<title>XSTM32Trace.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Platforms/Microcontrollers/STM32/XSTM32Trace.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;CONTROL&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00030"/>00030 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00031"/>00031 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00032"/>00032 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#ifdef&#32;XTRACE_ACTIVE</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00036"/>00036 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00037"/>00037 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_base_8h">XBase.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00039"/>00039 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_buffer_8h">XBuffer.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_sleep_8h">XSleep.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00041"/>00041 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_trace_8h">XTrace.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00042"/>00042 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_s_t_m32_date_time_8h">XSTM32DateTime.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00044"/>00044 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_s_t_m32_trace_8h">XSTM32Trace.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00046"/>00046 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00047"/>00047 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00048"/>00048 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00049"/>00049 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00050"/>00050 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00051"/>00051 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00052"/>00052 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00053"/>00053 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00061"/>00061 XSTM32TRACE::XSTM32TRACE()
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00062"/>00062 {
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00063"/>00063 &#32;&#32;Clean();
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00064"/>00064 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00065"/>00065 &#32;&#32;<link linkend="_class_x_t_r_a_c_e_1a04118236a45633e3dec5e02aeafb63ba">XTRACE::instance</link>&#32;=&#32;<emphasis role="keyword">this</emphasis>;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00066"/>00066 }
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00067"/>00067 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00068"/>00068 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00069"/>00069 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00078"/>00078 XSTM32TRACE::~XSTM32TRACE()
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00079"/>00079 {
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00080"/>00080 &#32;&#32;Clean();
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00081"/>00081 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00082"/>00082 &#32;&#32;<link linkend="_class_x_t_r_a_c_e_1a04118236a45633e3dec5e02aeafb63ba">XTRACE::instance</link>&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00083"/>00083 }
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00084"/>00084 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00085"/>00085 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00086"/>00086 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00087"/>00087 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00099"/>00099 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32TRACE::PrintSpecial(<link linkend="_class_x_t_r_a_c_e___t_a_r_g_e_t">XTRACE_TARGET</link>*&#32;target,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;level,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;<emphasis role="keywordtype">string</emphasis>)
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00100"/>00100 {
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00101"/>00101 &#32;&#32;<link linkend="_class_x_s_t_m32_d_a_t_e_t_i_m_e">XSTM32DATETIME</link>&#32;&#32;&#32;xdatetime;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00102"/>00102 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;reenter&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00103"/>00103 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00104"/>00104 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!huart)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00105"/>00105 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00106"/>00106 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(reenter)
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbufferpackettmp;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;&#32;&#32;xbuffercache;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_s_t_m32_d_a_t_e_t_i_m_e">XSTM32DATETIME</link>&#32;&#32;&#32;xdatetime;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00111"/>00111 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;SetTraceTextToXBuffer(0xFFFFFFFF,&#32;0xFFFFFFFF,&#32;level,&#32;sequence,&#32;&amp;xdatetime,&#32;<emphasis role="keywordtype">string</emphasis>,&#32;xbufferpackettmp);&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;xbuffercache.<link linkend="_group___x_u_t_i_l_s_1ga03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(xbufferpackettmp);
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;reenter&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00119"/>00119 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xbuffercache.<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>())
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HAL_UART_Transmit(huart,&#32;(uint8_t*)xbuffercache.<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;(uint16_t)xbuffercache.<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>(),&#32;1000);
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffercache.<link linkend="_group___x_u_t_i_l_s_1ga0395231705663a2aeeee3b4be9d292bb">Delete</link>();
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00125"/>00125 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbufferpacket;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_s_t_m32_d_a_t_e_t_i_m_e">XSTM32DATETIME</link>&#32;&#32;&#32;xdatetime;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00128"/>00128 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;SetTraceTextToXBuffer(0xFFFFFFFF,&#32;0xFFFFFFFF,&#32;level,&#32;sequence,&#32;&amp;xdatetime,&#32;<emphasis role="keywordtype">string</emphasis>,&#32;xbufferpacket);
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;HAL_UART_Transmit(huart,&#32;(uint8_t*)xbufferpacket.<link linkend="_group___x_u_t_i_l_s_1ga59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;(uint16_t)xbufferpacket.<link linkend="_group___x_u_t_i_l_s_1ga726a6143d8a9293a199f8033c8198a0a">GetSize</link>(),&#32;1000);
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00131"/>00131 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;reenter&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00134"/>00134 }
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00135"/>00135 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00136"/>00136 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00137"/>00137 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00147"/>00147 UART_HandleTypeDef*&#32;XSTM32TRACE::GetHuart()
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00148"/>00148 {
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00149"/>00149 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;huart;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00150"/>00150 }
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00151"/>00151 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00152"/>00152 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00153"/>00153 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00163"/>00163 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32TRACE::SetHuart(UART_HandleTypeDef*&#32;huart)
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00164"/>00164 {
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00165"/>00165 &#32;&#32;this-&gt;huart&#32;=&#32;huart;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00166"/>00166 }
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00167"/>00167 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00168"/>00168 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00169"/>00169 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00178"/>00178 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32TRACE::Clean()
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00179"/>00179 {
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00180"/>00180 &#32;&#32;huart&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00181"/>00181 }
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00182"/>00182 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00183"/>00183 
<anchor xml:id="__x_s_t_m32_trace_8cpp_source_1l00184"/>00184 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
