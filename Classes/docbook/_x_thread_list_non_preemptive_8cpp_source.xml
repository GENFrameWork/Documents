<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_thread_list_non_preemptive_8cpp_source" xml:lang="en-US">
<title>XThreadListNonPreemptive.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/XUtils/XThreadListNonPreemptive.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;INCLUDES&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;region&#32;PRECOMPILATION_INCLUDES</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00031"/>00031 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00036"/>00036 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00037"/>00037 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#pragma&#32;region&#32;INCLUDES</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00039"/>00039 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_thread_list_non_preemptive_8h">XThreadListNonPreemptive.h</link>&quot;</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00041"/>00041 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00042"/>00042 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00043"/>00043 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00044"/>00044 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00045"/>00045 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00046"/>00046 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00047"/>00047 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00048"/>00048 <emphasis role="preprocessor">#pragma&#32;region&#32;GENERAL_VARIABLE</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00049"/>00049 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00050"/>00050 <link linkend="_class_x_t_h_r_e_a_d_l_i_s_t_n_o_n_p_r_e_e_m_p_t_i_v_e">XTHREADLISTNONPREEMPTIVE</link>*&#32;XTHREADLISTNONPREEMPTIVE::instance&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00051"/>00051 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00052"/>00052 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00053"/>00053 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00054"/>00054 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00055"/>00055 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00056"/>00056 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_MEMBERS</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00057"/>00057 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00058"/>00058 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00059"/>00059 <emphasis role="comment">/*----&#32;XTHREADLISTNONPREEMPTIVE&#32;CLASS&#32;--------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00060"/>00060 <emphasis role="preprocessor">#pragma&#32;region&#32;XTHREADLISTNONPREEMPTIVE_CLASS</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00061"/>00061 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00062"/>00062 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00072"/><link linkend="_group___x_u_t_i_l_s_1ga6865277ecc64005706b5cf68b20529fb">00072</link> <link linkend="_class_x_t_h_r_e_a_d_l_i_s_t_n_o_n_p_r_e_e_m_p_t_i_v_e">XTHREADLISTNONPREEMPTIVE</link>&amp;&#32;<link linkend="_group___x_u_t_i_l_s_1ga6865277ecc64005706b5cf68b20529fb">XTHREADLISTNONPREEMPTIVE::GetInstance</link>()
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00073"/>00073 {
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00074"/>00074 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!instance)&#32;instance&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_x_t_h_r_e_a_d_l_i_s_t_n_o_n_p_r_e_e_m_p_t_i_v_e">XTHREADLISTNONPREEMPTIVE</link>();
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00075"/>00075 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00076"/>00076 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*instance);
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00077"/>00077 }
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00078"/>00078 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00079"/>00079 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00089"/><link linkend="_group___x_u_t_i_l_s_1gae6bc0f504d6c8090c3df7f56a4416b97">00089</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gae6bc0f504d6c8090c3df7f56a4416b97">XTHREADLISTNONPREEMPTIVE::DelInstance</link>()
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00090"/>00090 {
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00091"/>00091 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(instance)
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;instance;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;instance&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00095"/>00095 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00098"/>00098 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00099"/>00099 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00100"/>00100 }
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00101"/>00101 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00102"/>00102 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00114"/><link linkend="_group___x_u_t_i_l_s_1ga63793054fabff139698eb9b1f05433cc">00114</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga63793054fabff139698eb9b1f05433cc">XTHREADLISTNONPREEMPTIVE::AddThread</link>(<link linkend="_class_x_t_h_r_e_a_d">XTHREAD</link>*&#32;thread)
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00115"/>00115 {
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00116"/>00116 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!thread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00117"/>00117 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xthreadsvector.<link linkend="_class_x_v_e_c_t_o_r_1a51a790aac8efd4603aee608ddcc83423">Add</link>(thread);
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00118"/>00118 }
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00119"/>00119 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00120"/>00120 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00132"/><link linkend="_group___x_u_t_i_l_s_1gad14ac9a4bf1cf279951bb9900e3e0da7">00132</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1gad14ac9a4bf1cf279951bb9900e3e0da7">XTHREADLISTNONPREEMPTIVE::DeleteThread</link>(<link linkend="_class_x_t_h_r_e_a_d">XTHREAD</link>*&#32;thread)
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00133"/>00133 {
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00134"/>00134 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!thread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00135"/>00135 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xthreadsvector.<link linkend="_class_x_v_e_c_t_o_r_1a1b2817263806966a47e30481e1561c27">Delete</link>(thread);
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00136"/>00136 }
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00137"/>00137 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00138"/>00138 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00148"/><link linkend="_group___x_u_t_i_l_s_1ga4646c8c476f0848aabe4142799ac8bcd">00148</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga4646c8c476f0848aabe4142799ac8bcd">XTHREADLISTNONPREEMPTIVE::DeleteAll</link>()
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00149"/>00149 {
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00150"/>00150 &#32;&#32;xthreadsvector.<link linkend="_class_x_v_e_c_t_o_r_1abae5097402824f18f274e21e18b23bea">DeleteContents</link>();
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00151"/>00151 &#32;&#32;xthreadsvector.<link linkend="_class_x_v_e_c_t_o_r_1a57c72ab04fd14c60d1026e0a7b4a1887">DeleteAll</link>();
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00152"/>00152 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00153"/>00153 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00154"/>00154 }
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00155"/>00155 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00156"/>00156 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00166"/><link linkend="_group___x_u_t_i_l_s_1ga92102d25b1d45e5b5efa85ff0776295e">00166</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group___x_u_t_i_l_s_1ga92102d25b1d45e5b5efa85ff0776295e">XTHREADLISTNONPREEMPTIVE::ExecuteFunctions</link>()
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00167"/>00167 {
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00168"/>00168 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xthreadsvector.<link linkend="_class_x_v_e_c_t_o_r_1ab9cec1d9ae7a1f5699f9dde55ccde2bf">GetSize</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00169"/>00169 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00170"/>00170 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=0;&#32;c&lt;xthreadsvector.<link linkend="_class_x_v_e_c_t_o_r_1ab9cec1d9ae7a1f5699f9dde55ccde2bf">GetSize</link>();&#32;c++)
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_t_h_r_e_a_d">XTHREAD</link>*&#32;xthread&#32;&#32;=&#32;xthreadsvector.<link linkend="_class_x_v_e_c_t_o_r_1a2af4855d7fe0bc28201f6967110d064e">Get</link>(c);
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthread)
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(xthread-&gt;<link linkend="_group___x_u_t_i_l_s_1ga9ea720790d56c44ffeabdebb1b78a94c">GetStatusFunc</link>())
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a4e8ecb23b264abef1f4f9bee700b5513">XTHREADSTATUS_RUN</link>&#32;&#32;&#32;&#32;:&#32;xthread-&gt;<link linkend="_group___x_u_t_i_l_s_1ga23bbfb3d1904683d000192f8be0ee3f1">GetFunction</link>()(xthread-&gt;<link linkend="_group___x_u_t_i_l_s_1ga41ddb65bd9de824483bb032895ecdffd">GetParam</link>());
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00179"/>00179 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a93f78a60f2a85c943ec7559ae1893aec">XTHREADSTATUS_EXIT</link>&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00181"/>00181 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00186"/>00186 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00187"/>00187 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00188"/>00188 }
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00189"/>00189 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00190"/>00190 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00191"/>00191 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00192"/>00192 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00193"/>00193 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00194"/>00194 <emphasis role="comment">/*----&#32;XTHREADLISTNONPREEMPTIVE&#32;CLASS&#32;--------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00195"/>00195 <emphasis role="preprocessor">#pragma&#32;region&#32;XTHREADLISTNONPREEMPTIVE_CLASS</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00196"/>00196 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00197"/>00197 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00205"/>00205 XTHREADLISTNONPREEMPTIVE::XTHREADLISTNONPREEMPTIVE()
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00206"/>00206 {
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00207"/>00207 &#32;&#32;Clean();
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00208"/>00208 }
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00209"/>00209 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00210"/>00210 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00219"/>00219 XTHREADLISTNONPREEMPTIVE::~XTHREADLISTNONPREEMPTIVE()
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00220"/>00220 {
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00221"/>00221 &#32;&#32;<link linkend="_group___x_u_t_i_l_s_1ga4646c8c476f0848aabe4142799ac8bcd">DeleteAll</link>();
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00222"/>00222 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00223"/>00223 &#32;&#32;Clean();
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00224"/>00224 }
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00225"/>00225 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00226"/>00226 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00235"/>00235 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADLISTNONPREEMPTIVE::Clean()
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00236"/>00236 {
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00237"/>00237 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00238"/>00238 }
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00239"/>00239 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00240"/>00240 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00241"/>00241 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00242"/>00242 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00243"/>00243 
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00244"/>00244 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_thread_list_non_preemptive_8cpp_source_1l00245"/>00245 
</programlisting></section>
