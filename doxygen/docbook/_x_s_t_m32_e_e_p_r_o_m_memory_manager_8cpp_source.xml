<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source" xml:lang="en-US">
<title>XSTM32EEPROMMemoryManager.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Platforms/Microcontrollers/STM32/XSTM32EEPROMMemoryManager.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;CONTROL&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00030"/>00030 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00031"/>00031 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00032"/>00032 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00034"/>00034 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00036"/>00036 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00038"/>00038 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00039"/>00039 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h">XSTM32EEPROMMemoryManager.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00040"/>00040 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00041"/>00041 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00042"/>00042 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00043"/>00043 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00044"/>00044 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00045"/>00045 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00046"/>00046 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00047"/>00047 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00057"/><link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1ad3c7d34ed1e024fcb54613c4d82ef514">00057</link> <link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1ad3c7d34ed1e024fcb54613c4d82ef514">XSTM32EEPROMMEMORYMANAGER::XSTM32EEPROMMEMORYMANAGER</link>()
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00058"/>00058 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00059"/>00059 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00060"/>00060 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00061"/>00061 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00062"/>00062 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00063"/>00063 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00074"/><link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1a60a57bed6750b67061e61a0c979a8c52">00074</link> <link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1a60a57bed6750b67061e61a0c979a8c52">XSTM32EEPROMMEMORYMANAGER::~XSTM32EEPROMMEMORYMANAGER</link>()
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00075"/>00075 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00076"/>00076 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00077"/>00077 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00078"/>00078 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00079"/>00079 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00080"/>00080 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00090"/><link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1acb115ad7f1d9503c5d46e1beab7cc351">00090</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1acb115ad7f1d9503c5d46e1beab7cc351">XSTM32EEPROMMEMORYMANAGER::Ini</link>()
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00091"/>00091 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00092"/>00092 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00093"/>00093 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00094"/>00094 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00095"/>00095 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00096"/>00096 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00106"/><link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1ac5f5e2a6d3e0228ab0c9490797010c2a">00106</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1ac5f5e2a6d3e0228ab0c9490797010c2a">XSTM32EEPROMMEMORYMANAGER::End</link>()
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00107"/>00107 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00108"/>00108 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00109"/>00109 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00110"/>00110 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00111"/>00111 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00112"/>00112 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00126"/><link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1a1e8d2851e2c159a6700815bc5109eaca">00126</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1a1e8d2851e2c159a6700815bc5109eaca">XSTM32EEPROMMEMORYMANAGER::Read</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;offset,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00127"/>00127 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00128"/>00128 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((offset&#32;+&#32;size)&#32;&gt;&#32;<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h_1a4bf1ca078e9b1842df8bae0c69a46bf7">XSTM32EEPROMMEMORYMANAGER_MAXSIZE</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00129"/>00129 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00130"/>00130 <emphasis role="preprocessor">&#32;&#32;#if&#32;defined(STM32F407xx)&#32;||&#32;defined(STM32F446xx)</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00131"/>00131 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00132"/>00132 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;size;&#32;c++)
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;(*(data+c))&#32;=&#32;(*(__IO&#32;uint8_t&#32;*)(<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h_1a48dbb7f1b388ce11738dc904702c26d9">XSTM32EEPROMMEMORYMANAGER_BASE</link>+offset+c));
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00136"/>00136 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00137"/>00137 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00138"/>00138 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00139"/>00139 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00140"/>00140 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00141"/>00141 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00142"/>00142 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00143"/>00143 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00157"/><link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1a8d88c574495fdfb4ed722e6c6ea66e54">00157</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1a8d88c574495fdfb4ed722e6c6ea66e54">XSTM32EEPROMMEMORYMANAGER::Write</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;offset,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00158"/>00158 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00159"/>00159 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((offset&#32;+&#32;size)&#32;&gt;&#32;<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h_1a4bf1ca078e9b1842df8bae0c69a46bf7">XSTM32EEPROMMEMORYMANAGER_MAXSIZE</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00160"/>00160 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00161"/>00161 <emphasis role="preprocessor">&#32;&#32;#if&#32;defined(STM32F407xx)&#32;||&#32;defined(STM32F446xx)</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00162"/>00162 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00163"/>00163 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;size;&#32;c++)
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;(*(__IO&#32;uint8_t&#32;*)(<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h_1a48dbb7f1b388ce11738dc904702c26d9">XSTM32EEPROMMEMORYMANAGER_BASE</link>+offset+c))&#32;=&#32;(*(data+c));
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00167"/>00167 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00168"/>00168 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00169"/>00169 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00170"/>00170 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00171"/>00171 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00172"/>00172 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00173"/>00173 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00174"/>00174 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00184"/><link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1a46df2096d7eee3304fcd816bc6622231">00184</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_e_e_p_r_o_m_m_e_m_o_r_y_m_a_n_a_g_e_r_1a46df2096d7eee3304fcd816bc6622231">XSTM32EEPROMMEMORYMANAGER::EraseAll</link>()
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00185"/>00185 {
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00186"/>00186 <emphasis role="preprocessor">&#32;&#32;#if&#32;defined(STM32F407xx)&#32;||&#32;defined(STM32F446xx)</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00187"/>00187 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00188"/>00188 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h_1a4bf1ca078e9b1842df8bae0c69a46bf7">XSTM32EEPROMMEMORYMANAGER_MAXSIZE</link>;&#32;c++)
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;(*(__IO&#32;uint8_t&#32;*)(<link linkend="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8h_1a48dbb7f1b388ce11738dc904702c26d9">XSTM32EEPROMMEMORYMANAGER_BASE</link>+c))=&#32;0;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00192"/>00192 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00193"/>00193 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00194"/>00194 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00195"/>00195 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00196"/>00196 }
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00197"/>00197 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00198"/>00198 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00199"/>00199 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00200"/>00200 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00201"/>00201 
<anchor xml:id="__x_s_t_m32_e_e_p_r_o_m_memory_manager_8cpp_source_1l00202"/>00202 
</programlisting></section>
