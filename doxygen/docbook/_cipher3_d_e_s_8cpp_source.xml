<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__cipher3_d_e_s_8cpp_source" xml:lang="en-US">
<title>Cipher3DES.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Cipher/Cipher3DES.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00001"/>00001 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;INCLUDES&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;region&#32;PRECOMPILATION_INCLUDES</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00031"/>00031 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00033"/>00033 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00035"/>00035 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00036"/>00036 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00037"/>00037 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#pragma&#32;region&#32;INCLUDES</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00039"/>00039 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__cipher3_d_e_s_8h">Cipher3DES.h</link>&quot;</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00041"/>00041 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00042"/>00042 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00043"/>00043 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00044"/>00044 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_factory_8h">XFactory.h</link>&quot;</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_buffer_8h">XBuffer.h</link>&quot;</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00046"/>00046 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00047"/>00047 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00048"/>00048 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00049"/>00049 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00050"/>00050 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00051"/>00051 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00052"/>00052 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00053"/>00053 <emphasis role="preprocessor">#pragma&#32;region&#32;GENERAL_VARIABLE</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00054"/>00054 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00055"/>00055 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00056"/>00056 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00057"/>00057 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00058"/>00058 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00059"/>00059 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_MEMBERS</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00060"/>00060 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00061"/>00061 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00071"/><link linkend="_class_c_i_p_h_e_r3_d_e_s_1a8a5ddaa19a2a536c02aa4a86a7f8ad74">00071</link> <link linkend="_class_c_i_p_h_e_r3_d_e_s_1a8a5ddaa19a2a536c02aa4a86a7f8ad74">CIPHER3DES::CIPHER3DES</link>()&#32;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00072"/>00072 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00073"/>00073 &#32;&#32;Clean();
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00074"/>00074 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00075"/>00075 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_1a416572c28446389769158d381de9d24f">type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__cipher_8h_1a52cc908e38756716669a3bcb38a61cf7a3a129ff47467ca4a6aec1dabca8afce3">CIPHERTYPE_3DES</link>;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00076"/>00076 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_1a80d51b9bdea87754bd8144999eeb5f2e">paddingadjustsize</link>&#32;=&#32;16;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00077"/>00077 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00078"/>00078 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00079"/>00079 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00090"/><link linkend="_class_c_i_p_h_e_r3_d_e_s_1ae083baec6a9ddc92ffa3c63b9f9ae5cc">00090</link> <link linkend="_class_c_i_p_h_e_r3_d_e_s_1ae083baec6a9ddc92ffa3c63b9f9ae5cc">CIPHER3DES::~CIPHER3DES</link>()
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00091"/>00091 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00092"/>00092 &#32;&#32;Clean();
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00093"/>00093 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00094"/>00094 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00095"/>00095 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00108"/><link linkend="_class_c_i_p_h_e_r3_d_e_s_1a9557f163805b76f2a4310a02dd002be7">00108</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_i_p_h_e_r3_d_e_s_1a9557f163805b76f2a4310a02dd002be7">CIPHER3DES::Cipher</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00109"/>00109 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00110"/>00110 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!size)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00111"/>00111 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00112"/>00112 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputpadding;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00113"/>00113 &#32;&#32;<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t">CIPHER3DES_CONTEXT</link>&#32;&#32;ctx;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00114"/>00114 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iv[8];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00115"/>00115 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00116"/>00116 &#32;&#32;memset(iv,0,8);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00117"/>00117 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_class_c_i_p_h_e_r_1aaf021d9a81c4cf827bcc1fac1008d15b">inivector</link>&#32;&amp;&amp;&#32;<link linkend="_class_c_i_p_h_e_r_1aaf021d9a81c4cf827bcc1fac1008d15b">inivector</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>()&gt;=8)&#32;memcpy(iv,&#32;<link linkend="_class_c_i_p_h_e_r_1aaf021d9a81c4cf827bcc1fac1008d15b">inivector</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()&#32;,8);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00118"/>00118 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00119"/>00119 &#32;&#32;inputpadding.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(input,&#32;size);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00120"/>00120 &#32;&#32;inputpadding.<link linkend="_class_x_b_u_f_f_e_r_1a5db6b2fa07edc08e214e0543439de409">Padding_Add</link>(<link linkend="_class_c_i_p_h_e_r_1a80d51b9bdea87754bd8144999eeb5f2e">paddingadjustsize</link>,&#32;<link linkend="_class_c_i_p_h_e_r_1a07eb94b4c2c26e21bfa3ec3942777e0c">paddingtype</link>);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00121"/>00121 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00122"/>00122 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_1a81d924a4beba9c1acb6bb56f3fdf181a">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a0395231705663a2aeeee3b4be9d292bb">Delete</link>();
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00123"/>00123 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_1a81d924a4beba9c1acb6bb56f3fdf181a">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(input,&#32;size);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00124"/>00124 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_1a81d924a4beba9c1acb6bb56f3fdf181a">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a5db6b2fa07edc08e214e0543439de409">Padding_Add</link>(<link linkend="_class_c_i_p_h_e_r_1a80d51b9bdea87754bd8144999eeb5f2e">paddingadjustsize</link>,&#32;<link linkend="_class_c_i_p_h_e_r_1a07eb94b4c2c26e21bfa3ec3942777e0c">paddingtype</link>);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00125"/>00125 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00126"/>00126 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_k_e_y_s_y_m_m_e_t_r_i_c_a_l">CIPHERKEYSYMMETRICAL</link>*&#32;key&#32;=&#32;(<link linkend="_class_c_i_p_h_e_r_k_e_y_s_y_m_m_e_t_r_i_c_a_l">CIPHERKEYSYMMETRICAL</link>*)<link linkend="_class_c_i_p_h_e_r_1a617de7ca065e58b8b29d54c246ab7e05">GetKey</link>();
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00127"/>00127 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!key)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00128"/>00128 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!key-&gt;<link linkend="_class_c_i_p_h_e_r_k_e_y_s_y_m_m_e_t_r_i_c_a_l_1a491605bfd782fc1524b9f94d0d982dd2">Get</link>()-&gt;Get())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00129"/>00129 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00130"/>00130 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(key-&gt;<link linkend="_class_c_i_p_h_e_r_k_e_y_s_y_m_m_e_t_r_i_c_a_l_1a491605bfd782fc1524b9f94d0d982dd2">Get</link>()-&gt;GetSize()&#32;&lt;=&#32;16)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DES3Set2KeyCipher(&amp;ctx,&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;*)key-&gt;<link linkend="_class_c_i_p_h_e_r_k_e_y_s_y_m_m_e_t_r_i_c_a_l_1a491605bfd782fc1524b9f94d0d982dd2">Get</link>()-&gt;Get());
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;DES3Set3KeyCipher(&amp;ctx,&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;*)key-&gt;<link linkend="_class_c_i_p_h_e_r_k_e_y_s_y_m_m_e_t_r_i_c_a_l_1a491605bfd782fc1524b9f94d0d982dd2">Get</link>()-&gt;Get());
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00133"/>00133 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00134"/>00134 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00135"/>00135 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00136"/>00136 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(this-&gt;<link linkend="_class_c_i_p_h_e_r_1ac4534db114136a559c8fb09f7c8b42ab">GetChainingMode</link>()&#32;==&#32;<link linkend="__cipher_8h_1ae802f26095cf19cb1a0d793a5156812fa267f1454bea32b8e1d4300e5f6cede10">CIPHERCHAININGMODE_ECB</link>)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;DES3Cipher_ECB(&amp;ctx,&#32;<link linkend="__cipher_d_e_s_8h_1ae0a57b6649c89014dd793c19eb310d09">CIPHERDES_ENCRYPT</link>,&#32;<link linkend="_class_c_i_p_h_e_r_1a81d924a4beba9c1acb6bb56f3fdf181a">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>(),&#32;iv,&#32;inputpadding.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;&#32;<link linkend="_class_c_i_p_h_e_r_1a81d924a4beba9c1acb6bb56f3fdf181a">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>());
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;status&#32;=&#32;DES3Cipher_CBC(&amp;ctx,&#32;<link linkend="__cipher_d_e_s_8h_1ae0a57b6649c89014dd793c19eb310d09">CIPHERDES_ENCRYPT</link>,&#32;<link linkend="_class_c_i_p_h_e_r_1a81d924a4beba9c1acb6bb56f3fdf181a">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>(),&#32;iv,&#32;inputpadding.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;&#32;<link linkend="_class_c_i_p_h_e_r_1a81d924a4beba9c1acb6bb56f3fdf181a">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>());
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00139"/>00139 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00140"/>00140 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00141"/>00141 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00142"/>00142 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00143"/>00143 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00156"/><link linkend="_class_c_i_p_h_e_r3_d_e_s_1a4f1846aa75315a7cbbb1ef55297eef9b">00156</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_i_p_h_e_r3_d_e_s_1a4f1846aa75315a7cbbb1ef55297eef9b">CIPHER3DES::Uncipher</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00157"/>00157 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00158"/>00158 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!size)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00159"/>00159 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00160"/>00160 &#32;&#32;<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t">CIPHER3DES_CONTEXT</link>&#32;ctx;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00161"/>00161 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iv[8];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00162"/>00162 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00163"/>00163 &#32;&#32;memset(iv,0,8);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00164"/>00164 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_class_c_i_p_h_e_r_1aaf021d9a81c4cf827bcc1fac1008d15b">inivector</link>&#32;&amp;&amp;&#32;<link linkend="_class_c_i_p_h_e_r_1aaf021d9a81c4cf827bcc1fac1008d15b">inivector</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>()&gt;=8)&#32;memcpy(iv,&#32;<link linkend="_class_c_i_p_h_e_r_1aaf021d9a81c4cf827bcc1fac1008d15b">inivector</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()&#32;,8);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00165"/>00165 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00166"/>00166 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_1a81d924a4beba9c1acb6bb56f3fdf181a">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a0395231705663a2aeeee3b4be9d292bb">Delete</link>();
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00167"/>00167 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_1a81d924a4beba9c1acb6bb56f3fdf181a">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(input,&#32;size);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00168"/>00168 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00169"/>00169 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_k_e_y_s_y_m_m_e_t_r_i_c_a_l">CIPHERKEYSYMMETRICAL</link>*&#32;key&#32;=&#32;(<link linkend="_class_c_i_p_h_e_r_k_e_y_s_y_m_m_e_t_r_i_c_a_l">CIPHERKEYSYMMETRICAL</link>*)<link linkend="_class_c_i_p_h_e_r_1a617de7ca065e58b8b29d54c246ab7e05">GetKey</link>();
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00170"/>00170 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!key)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00171"/>00171 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!key-&gt;<link linkend="_class_c_i_p_h_e_r_k_e_y_s_y_m_m_e_t_r_i_c_a_l_1a491605bfd782fc1524b9f94d0d982dd2">Get</link>()-&gt;Get())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00172"/>00172 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00173"/>00173 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(key-&gt;<link linkend="_class_c_i_p_h_e_r_k_e_y_s_y_m_m_e_t_r_i_c_a_l_1a491605bfd782fc1524b9f94d0d982dd2">Get</link>()-&gt;GetSize()&#32;&lt;=&#32;16)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DES3Set2KeyUncipher(&amp;ctx,&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;*)key-&gt;<link linkend="_class_c_i_p_h_e_r_k_e_y_s_y_m_m_e_t_r_i_c_a_l_1a491605bfd782fc1524b9f94d0d982dd2">Get</link>()-&gt;Get());
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;DES3Set3KeyUncipher(&amp;ctx,&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;*)key-&gt;<link linkend="_class_c_i_p_h_e_r_k_e_y_s_y_m_m_e_t_r_i_c_a_l_1a491605bfd782fc1524b9f94d0d982dd2">Get</link>()-&gt;Get());
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00176"/>00176 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00177"/>00177 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00178"/>00178 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00179"/>00179 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(this-&gt;<link linkend="_class_c_i_p_h_e_r_1ac4534db114136a559c8fb09f7c8b42ab">GetChainingMode</link>()&#32;==&#32;<link linkend="__cipher_8h_1ae802f26095cf19cb1a0d793a5156812fa267f1454bea32b8e1d4300e5f6cede10">CIPHERCHAININGMODE_ECB</link>)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;DES3Cipher_ECB(&amp;ctx,&#32;&#32;<link linkend="__cipher_d_e_s_8h_1af2c09712676c93950eb7c20809fc32f2">CIPHERDES_DECRYPT</link>,&#32;size,&#32;iv,&#32;input,&#32;&#32;<link linkend="_class_c_i_p_h_e_r_1a81d924a4beba9c1acb6bb56f3fdf181a">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>());
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;status&#32;=&#32;DES3Cipher_CBC(&amp;ctx,&#32;&#32;<link linkend="__cipher_d_e_s_8h_1af2c09712676c93950eb7c20809fc32f2">CIPHERDES_DECRYPT</link>,&#32;size,&#32;iv,&#32;input,&#32;&#32;<link linkend="_class_c_i_p_h_e_r_1a81d924a4beba9c1acb6bb56f3fdf181a">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>());
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00182"/>00182 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00183"/>00183 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_1a81d924a4beba9c1acb6bb56f3fdf181a">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a4c0dba30c747eea8e17417333d4972f7">Padding_Delete</link>();
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00184"/>00184 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00185"/>00185 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00186"/>00186 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00187"/>00187 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00188"/>00188 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00202"/>00202 <emphasis role="keywordtype">void</emphasis>&#32;CIPHER3DES::DES3Set2Key(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;esk[96],&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;dsk[96],&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;key[<link linkend="__cipher_d_e_s_8h_1a192c50a49cffb1d8682754b3ebb29db2">CIPHERDES_KEYSIZE</link>*2])
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00203"/>00203 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00204"/>00204 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_d_e_s_1ab5e2f42faca2228f5f52d18b4a825161">DESSetKey</link>(esk,&#32;key);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00205"/>00205 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00206"/>00206 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_d_e_s_1ab5e2f42faca2228f5f52d18b4a825161">DESSetKey</link>(dsk&#32;+&#32;32,&#32;key&#32;+&#32;8);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00207"/>00207 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00208"/>00208 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;32;&#32;c+=2&#32;)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;dsk[c&#32;&#32;&#32;&#32;&#32;]&#32;=&#32;esk[30&#32;-&#32;c];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;dsk[c&#32;+&#32;&#32;1]&#32;=&#32;esk[31&#32;-&#32;c];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00212"/>00212 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;esk[c&#32;+&#32;32]&#32;=&#32;dsk[62&#32;-&#32;c];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;esk[c&#32;+&#32;33]&#32;=&#32;dsk[63&#32;-&#32;c];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00215"/>00215 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;esk[c&#32;+&#32;64]&#32;=&#32;esk[c&#32;&#32;&#32;&#32;];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;esk[c&#32;+&#32;65]&#32;=&#32;esk[c&#32;+&#32;1];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00218"/>00218 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;dsk[c&#32;+&#32;64]&#32;=&#32;dsk[c&#32;&#32;&#32;&#32;];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;dsk[c&#32;+&#32;65]&#32;=&#32;dsk[c&#32;+&#32;1];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00222"/>00222 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00223"/>00223 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00224"/>00224 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00237"/>00237 <emphasis role="keywordtype">int</emphasis>&#32;CIPHER3DES::DES3Set2KeyCipher(<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t">CIPHER3DES_CONTEXT</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;key[<link linkend="__cipher_d_e_s_8h_1a192c50a49cffb1d8682754b3ebb29db2">CIPHERDES_KEYSIZE</link>*2])
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00238"/>00238 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00239"/>00239 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sk[96];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00240"/>00240 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00241"/>00241 &#32;&#32;DES3Set2Key(ctx-&gt;<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t_1a5e1aa848b2668a0deca68e452882e33a">sk</link>,&#32;sk,&#32;key);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00242"/>00242 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00243"/>00243 &#32;&#32;memset(sk,&#32;&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(sk));
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00244"/>00244 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00245"/>00245 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00246"/>00246 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00247"/>00247 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00248"/>00248 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00261"/>00261 <emphasis role="keywordtype">int</emphasis>&#32;CIPHER3DES::DES3Set2KeyUncipher(<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t">CIPHER3DES_CONTEXT</link>&#32;*ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;key[<link linkend="__cipher_d_e_s_8h_1a192c50a49cffb1d8682754b3ebb29db2">CIPHERDES_KEYSIZE</link>*2])
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00262"/>00262 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00263"/>00263 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sk[96];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00264"/>00264 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00265"/>00265 &#32;&#32;DES3Set2Key(sk,&#32;ctx-&gt;<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t_1a5e1aa848b2668a0deca68e452882e33a">sk</link>,&#32;key);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00266"/>00266 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00267"/>00267 &#32;&#32;memset(sk,&#32;&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(sk));
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00268"/>00268 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00269"/>00269 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00270"/>00270 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00271"/>00271 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00272"/>00272 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00286"/>00286 <emphasis role="keywordtype">void</emphasis>&#32;CIPHER3DES::DES3Set3Key(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;esk[96],&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;dsk[96],&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;key[24])
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00287"/>00287 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00288"/>00288 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_d_e_s_1ab5e2f42faca2228f5f52d18b4a825161">DESSetKey</link>(esk,&#32;key);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00289"/>00289 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_d_e_s_1ab5e2f42faca2228f5f52d18b4a825161">DESSetKey</link>(dsk&#32;+&#32;32,&#32;key&#32;+&#32;&#32;8);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00290"/>00290 &#32;&#32;<link linkend="_class_c_i_p_h_e_r_d_e_s_1ab5e2f42faca2228f5f52d18b4a825161">DESSetKey</link>(esk&#32;+&#32;64,&#32;key&#32;+&#32;16);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00291"/>00291 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00292"/>00292 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;32;&#32;c+=2&#32;)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;dsk[c&#32;&#32;&#32;&#32;&#32;]&#32;=&#32;esk[94&#32;-&#32;c];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;dsk[c&#32;+&#32;&#32;1]&#32;=&#32;esk[95&#32;-&#32;c];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00296"/>00296 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;esk[c&#32;+&#32;32]&#32;=&#32;dsk[62&#32;-&#32;c];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;esk[c&#32;+&#32;33]&#32;=&#32;dsk[63&#32;-&#32;c];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00299"/>00299 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;dsk[c&#32;+&#32;64]&#32;=&#32;esk[30&#32;-&#32;c];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;dsk[c&#32;+&#32;65]&#32;=&#32;esk[31&#32;-&#32;c];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00303"/>00303 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00304"/>00304 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00305"/>00305 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00318"/>00318 <emphasis role="keywordtype">int</emphasis>&#32;CIPHER3DES::DES3Set3KeyCipher(<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t">CIPHER3DES_CONTEXT</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;key[<link linkend="__cipher_d_e_s_8h_1a192c50a49cffb1d8682754b3ebb29db2">CIPHERDES_KEYSIZE</link>*3])
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00319"/>00319 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00320"/>00320 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sk[96];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00321"/>00321 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00322"/>00322 &#32;&#32;DES3Set3Key(ctx-&gt;<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t_1a5e1aa848b2668a0deca68e452882e33a">sk</link>,&#32;sk,&#32;key);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00323"/>00323 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00324"/>00324 &#32;&#32;memset(sk,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(sk));
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00325"/>00325 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00326"/>00326 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00327"/>00327 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00328"/>00328 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00329"/>00329 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00342"/>00342 <emphasis role="keywordtype">int</emphasis>&#32;CIPHER3DES::DES3Set3KeyUncipher(<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t">CIPHER3DES_CONTEXT</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;key[<link linkend="__cipher_d_e_s_8h_1a192c50a49cffb1d8682754b3ebb29db2">CIPHERDES_KEYSIZE</link>*3])
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00343"/>00343 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00344"/>00344 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sk[96];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00345"/>00345 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00346"/>00346 &#32;&#32;DES3Set3Key(sk,&#32;ctx-&gt;<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t_1a5e1aa848b2668a0deca68e452882e33a">sk</link>,&#32;key);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00347"/>00347 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00348"/>00348 &#32;&#32;memset(sk,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(sk));
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00349"/>00349 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00350"/>00350 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00351"/>00351 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00352"/>00352 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00353"/>00353 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00367"/>00367 <emphasis role="keywordtype">int</emphasis>&#32;CIPHER3DES::DES3Cipher(<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t">CIPHER3DES_CONTEXT</link>*&#32;ctx,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;input[8],&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;output[8])
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00368"/>00368 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00369"/>00369 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;X;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00370"/>00370 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;Y;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00371"/>00371 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;T;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00372"/>00372 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*&#32;SK;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00373"/>00373 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00374"/>00374 &#32;&#32;SK&#32;=&#32;ctx-&gt;<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t_1a5e1aa848b2668a0deca68e452882e33a">sk</link>;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00375"/>00375 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00376"/>00376 &#32;&#32;<link linkend="__cipher_d_e_s_8h_1a4f8fbdb596ed2ef9360f2bbc63f6bacd">GET_XDWORD_BE</link>(&#32;X,&#32;input,&#32;0&#32;);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00377"/>00377 &#32;&#32;<link linkend="__cipher_d_e_s_8h_1a4f8fbdb596ed2ef9360f2bbc63f6bacd">GET_XDWORD_BE</link>(&#32;Y,&#32;input,&#32;4&#32;);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00378"/>00378 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00379"/>00379 &#32;&#32;<link linkend="__cipher_d_e_s_8h_1a439a633ac9c78a00091a0f75fd7794f3">DES_IP</link>(&#32;X,&#32;Y&#32;);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00380"/>00380 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00381"/>00381 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;8;&#32;c++)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00382"/>00382 &#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__cipher_d_e_s_8h_1a649e2807991d002a017ac59bac0ab738">DES_ROUND</link>(Y,&#32;X);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__cipher_d_e_s_8h_1a649e2807991d002a017ac59bac0ab738">DES_ROUND</link>(X,&#32;Y);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00386"/>00386 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00387"/>00387 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;8;&#32;c++)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__cipher_d_e_s_8h_1a649e2807991d002a017ac59bac0ab738">DES_ROUND</link>(X,&#32;Y);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__cipher_d_e_s_8h_1a649e2807991d002a017ac59bac0ab738">DES_ROUND</link>(Y,&#32;X);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00391"/>00391 &#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00392"/>00392 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00393"/>00393 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;8;&#32;c++&#32;)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00394"/>00394 &#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__cipher_d_e_s_8h_1a649e2807991d002a017ac59bac0ab738">DES_ROUND</link>(Y,&#32;X);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__cipher_d_e_s_8h_1a649e2807991d002a017ac59bac0ab738">DES_ROUND</link>(X,&#32;Y);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00397"/>00397 &#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00398"/>00398 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00399"/>00399 &#32;&#32;<link linkend="__cipher_d_e_s_8h_1a46361669a0466984d37e9de21f2dc5d5">DES_FP</link>(&#32;Y,&#32;X&#32;);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00400"/>00400 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00401"/>00401 &#32;&#32;<link linkend="__cipher_d_e_s_8h_1acc2c87a85177e119cd33b4c55040ef6a">PUT_XDWORD_BE</link>(&#32;Y,&#32;output,&#32;0&#32;);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00402"/>00402 &#32;&#32;<link linkend="__cipher_d_e_s_8h_1acc2c87a85177e119cd33b4c55040ef6a">PUT_XDWORD_BE</link>(&#32;X,&#32;output,&#32;4&#32;);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00403"/>00403 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00404"/>00404 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00405"/>00405 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00406"/>00406 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00407"/>00407 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00424"/>00424 <emphasis role="keywordtype">bool</emphasis>&#32;CIPHER3DES::DES3Cipher_ECB(<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t">CIPHER3DES_CONTEXT</link>*&#32;ctx,&#32;<emphasis role="keywordtype">int</emphasis>&#32;mode,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;iv[8],&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;output)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00425"/>00425 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00426"/>00426 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;temp[8];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00427"/>00427 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00428"/>00428 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(length&#32;%&#32;8)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00429"/>00429 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00430"/>00430 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(mode&#32;==&#32;<link linkend="__cipher_d_e_s_8h_1ae0a57b6649c89014dd793c19eb310d09">CIPHERDES_ENCRYPT</link>)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00431"/>00431 &#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(length&#32;&gt;&#32;0)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DES3Cipher(&#32;ctx,&#32;output,&#32;output);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00435"/>00435 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&#32;iv,&#32;output,&#32;8&#32;);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00437"/>00437 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;&#32;+=&#32;8;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output&#32;+=&#32;8;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;-=&#32;8;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00442"/>00442 &#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00443"/>00443 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;CIPHERDES_DECRYPT&#32;</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00444"/>00444 &#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(length&#32;&gt;&#32;0)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(temp,&#32;input,&#32;8);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00448"/>00448 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DES3Cipher(&#32;ctx,&#32;input,&#32;output&#32;);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00450"/>00450 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&#32;iv,&#32;temp,&#32;8&#32;);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00452"/>00452 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;&#32;+=&#32;8;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output&#32;+=&#32;8;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;-=&#32;8;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00457"/>00457 &#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00458"/>00458 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00459"/>00459 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00460"/>00460 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00461"/>00461 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00462"/>00462 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00479"/>00479 <emphasis role="keywordtype">bool</emphasis>&#32;CIPHER3DES::DES3Cipher_CBC(<link linkend="_struct_c_i_p_h_e_r3_d_e_s___c_o_n_t_e_x_t">CIPHER3DES_CONTEXT</link>*&#32;ctx,&#32;<emphasis role="keywordtype">int</emphasis>&#32;mode,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;iv[8],&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;output)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00480"/>00480 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00481"/>00481 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;temp[8];
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00482"/>00482 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00483"/>00483 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(length&#32;%&#32;8)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00484"/>00484 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00485"/>00485 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(mode&#32;==&#32;<link linkend="__cipher_d_e_s_8h_1ae0a57b6649c89014dd793c19eb310d09">CIPHERDES_ENCRYPT</link>)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00486"/>00486 &#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(length&#32;&gt;&#32;0)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;8;&#32;c++)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output[c]&#32;=&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)(input[c]&#32;^&#32;iv[c]);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00493"/>00493 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DES3Cipher(&#32;ctx,&#32;output,&#32;output);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00495"/>00495 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&#32;iv,&#32;output,&#32;8&#32;);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00497"/>00497 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;&#32;+=&#32;8;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output&#32;+=&#32;8;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;-=&#32;8;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00502"/>00502 &#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00503"/>00503 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;CIPHERDES_DECRYPT&#32;</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00504"/>00504 &#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(length&#32;&gt;&#32;0)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(temp,&#32;input,&#32;8);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00508"/>00508 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DES3Cipher(&#32;ctx,&#32;input,&#32;output&#32;);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00510"/>00510 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;8;&#32;c++&#32;)
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output[c]&#32;=&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)(&#32;output[c]&#32;^&#32;iv[c]);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00515"/>00515 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&#32;iv,&#32;temp,&#32;8&#32;);
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00517"/>00517 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;&#32;+=&#32;8;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output&#32;+=&#32;8;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;-=&#32;8;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00522"/>00522 &#32;&#32;&#32;&#32;}
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00523"/>00523 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00524"/>00524 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00525"/>00525 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00526"/>00526 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00527"/>00527 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00538"/>00538 <emphasis role="keywordtype">void</emphasis>&#32;CIPHER3DES::Clean()
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00539"/>00539 {
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00540"/>00540 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00541"/>00541 }
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00542"/>00542 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00543"/>00543 
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00544"/>00544 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__cipher3_d_e_s_8cpp_source_1l00545"/>00545 
</programlisting></section>
