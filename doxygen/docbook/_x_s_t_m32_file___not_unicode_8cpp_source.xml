<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_s_t_m32_file___not_unicode_8cpp_source" xml:lang="en-US">
<title>XSTM32File_NotUnicode.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Platforms/Microcontrollers/STM32/XSTM32File_NotUnicode.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;CONTROL&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00030"/>00030 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00031"/>00031 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00032"/>00032 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00034"/>00034 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00036"/>00036 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_path_8h">XPath.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_string_8h">XString.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00039"/>00039 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_trace_8h">XTrace.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00040"/>00040 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00041"/>00041 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__cipher_8h">Cipher.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00042"/>00042 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_s_t_m32_file_8h">XSTM32File.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00044"/>00044 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00046"/>00046 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00047"/>00047 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00048"/>00048 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00049"/>00049 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00050"/>00050 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00051"/>00051 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00052"/>00052 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00062"/>00062 <link linkend="_class_x_s_t_m32_f_i_l_e_1a694c47fb2fd62c04bc2dc29d6e7588a1">XSTM32FILE::XSTM32FILE</link>():&#32;<link linkend="_class_x_f_i_l_e">XFILE</link>()
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00063"/>00063 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00064"/>00064 &#32;&#32;Clean();
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00065"/>00065 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00066"/>00066 &#32;&#32;fresult&#32;=&#32;f_mount(&amp;userFATFS,&#32;<emphasis role="stringliteral">&quot;/&quot;</emphasis>,&#32;1);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00067"/>00067 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(fresult&#32;==&#32;FR_OK)&#32;ismount&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00068"/>00068 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00069"/>00069 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00070"/>00070 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00071"/>00071 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00072"/>00072 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00083"/>00083 <link linkend="_class_x_s_t_m32_f_i_l_e_1aac2489dfa2f5a76b5c467708f1e1dbb4">XSTM32FILE::~XSTM32FILE</link>()
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00084"/>00084 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00085"/>00085 &#32;&#32;Clean();
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00086"/>00086 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00087"/>00087 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00088"/>00088 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00089"/>00089 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00101"/>00101 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1ad2f62bce78dd81a81030f71c84c39240">XSTM32FILE::Exist</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;path)
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00102"/>00102 {&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00103"/>00103 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ismount)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00104"/>00104 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00105"/>00105 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;pathstring;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00106"/>00106 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00107"/>00107 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00108"/>00108 &#32;&#32;pathstring&#32;=&#32;path;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00109"/>00109 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pathstring.<link linkend="_class_x_s_t_r_i_n_g_1ad26690161f8c1e2722771322b7370005">IsEmpty</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00110"/>00110 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00111"/>00111 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;charstr;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00112"/>00112 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00113"/>00113 &#32;&#32;pathstring.<link linkend="_class_x_s_t_r_i_n_g_1acdbd12d83c920cfa06ac0ac1770adc29">ConvertToASCII</link>(charstr);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00114"/>00114 &#32;&#32;fresult&#32;=&#32;f_stat&#32;(charstr.<link linkend="_class_x_b_u_f_f_e_r_1a66e2dbd897e717ce38e395d6ad87b754">GetPtrChar</link>(),&#32;&amp;fileinfo);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00115"/>00115 &#32;&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=0;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00116"/>00116 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(fresult&#32;==&#32;FR_OK)&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)fileinfo.fsize;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00117"/>00117 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00118"/>00118 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:false;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00120"/>00120 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00121"/>00121 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00122"/>00122 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00123"/>00123 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00124"/>00124 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00137"/>00137 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a34e707282ca2332a5c8d52829d722955">XSTM32FILE::Open</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;path,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isreadonly)
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00138"/>00138 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00139"/>00139 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ismount)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00140"/>00140 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00141"/>00141 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;pathstring;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00142"/>00142 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00143"/>00143 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00144"/>00144 &#32;&#32;pathstring&#32;=&#32;path;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00145"/>00145 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pathstring.<link linkend="_class_x_s_t_r_i_n_g_1ad26690161f8c1e2722771322b7370005">IsEmpty</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00146"/>00146 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00147"/>00147 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;mode&#32;&#32;=&#32;(FA_OPEN_ALWAYS&#32;|&#32;FA_READ);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00149"/>00149 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1af1e2ddc3f6f199069a38df4ca60cc69c">isreadonly</link>)&#32;mode&#32;|=&#32;FA_WRITE;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00150"/>00150 &#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00151"/>00151 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;charstr;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00152"/>00152 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00153"/>00153 &#32;&#32;pathstring.<link linkend="_class_x_s_t_r_i_n_g_1acdbd12d83c920cfa06ac0ac1770adc29">ConvertToASCII</link>(charstr);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00154"/>00154 &#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00155"/>00155 &#32;&#32;fresult&#32;=&#32;f_open(&amp;file,&#32;charstr.<link linkend="_class_x_b_u_f_f_e_r_1a66e2dbd897e717ce38e395d6ad87b754">GetPtrChar</link>(),&#32;mode);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00156"/>00156 &#32;&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;0;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00157"/>00157 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(fresult&#32;==&#32;FR_OK)&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)f_size(&amp;file);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00158"/>00158 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00159"/>00159 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:false;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00160"/>00160 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_f_i_l_e_1a294add2df94973ab032c4b42c00ccc0b">xpathnamefile</link>&#32;=&#32;path;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00165"/>00165 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00166"/>00166 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00167"/>00167 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00168"/>00168 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00169"/>00169 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00170"/>00170 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00182"/>00182 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a5b21bd46dddb31a0c29386607baa4401">XSTM32FILE::Create</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;path)
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00183"/>00183 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00184"/>00184 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ismount)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00185"/>00185 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00186"/>00186 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;pathstring;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00187"/>00187 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00188"/>00188 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00189"/>00189 &#32;&#32;pathstring&#32;=&#32;path;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00190"/>00190 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pathstring.<link linkend="_class_x_s_t_r_i_n_g_1ad26690161f8c1e2722771322b7370005">IsEmpty</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00191"/>00191 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00192"/>00192 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;mode&#32;&#32;=&#32;(FA_CREATE_ALWAYS&#32;|&#32;FA_CREATE_ALWAYS&#32;|&#32;FA_READ&#32;|&#32;FA_WRITE);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00194"/>00194 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;charstr;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00195"/>00195 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00196"/>00196 &#32;&#32;pathstring.<link linkend="_class_x_s_t_r_i_n_g_1acdbd12d83c920cfa06ac0ac1770adc29">ConvertToASCII</link>(charstr);&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00197"/>00197 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00198"/>00198 &#32;&#32;fresult&#32;=&#32;f_open(&amp;file,&#32;charstr.<link linkend="_class_x_b_u_f_f_e_r_1a66e2dbd897e717ce38e395d6ad87b754">GetPtrChar</link>(),&#32;mode);&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00199"/>00199 &#32;&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;0;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00200"/>00200 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:false;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00201"/>00201 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_f_i_l_e_1a294add2df94973ab032c4b42c00ccc0b">xpathnamefile</link>&#32;=&#32;path;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00206"/>00206 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00207"/>00207 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00208"/>00208 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00209"/>00209 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00210"/>00210 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00211"/>00211 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00223"/>00223 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a362a80b50668eb3c66c31439d3d3251d">XSTM32FILE::SetSize</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;size)
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00224"/>00224 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00225"/>00225 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00226"/>00226 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_class_x_f_i_l_e_1af1e2ddc3f6f199069a38df4ca60cc69c">isreadonly</link>)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00227"/>00227 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00228"/>00228 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_s_t_m32_f_i_l_e_1ae7642ac7ff527c9573d911147a74bc48">SetPosition</link>(size))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00229"/>00229 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00230"/>00230 &#32;&#32;fresult&#32;=&#32;f_truncate(&amp;file);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00231"/>00231 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(fresult&#32;==&#32;FR_OK)&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)f_size(&amp;file);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00232"/>00232 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00233"/>00233 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00234"/>00234 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00235"/>00235 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00236"/>00236 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00237"/>00237 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00238"/>00238 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00250"/>00250 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1aa815aa39e57d748ae93db0ae8556a177">XSTM32FILE::GetPosition</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&amp;&#32;position)
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00251"/>00251 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00252"/>00252 &#32;&#32;position&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00253"/>00253 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00254"/>00254 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00256"/>00256 &#32;&#32;<link linkend="__x_s_t_m32_dir_8h_1a3fc0992ad7436250b6b1a0592214b7f2">FSIZE_t</link>&#32;_position&#32;=&#32;f_tell(&amp;file);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00257"/>00257 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00258"/>00258 &#32;&#32;position&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)_position;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00259"/>00259 &#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00260"/>00260 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00261"/>00261 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00262"/>00262 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00263"/>00263 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00264"/>00264 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00276"/>00276 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1ae7642ac7ff527c9573d911147a74bc48">XSTM32FILE::SetPosition</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;position)
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00277"/>00277 {&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00278"/>00278 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00279"/>00279 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00280"/>00280 &#32;&#32;<link linkend="__x_s_t_m32_dir_8h_1a3fc0992ad7436250b6b1a0592214b7f2">FSIZE_t</link>&#32;&#32;&#32;_position&#32;&#32;=&#32;(<link linkend="__x_s_t_m32_dir_8h_1a3fc0992ad7436250b6b1a0592214b7f2">FSIZE_t</link>)position;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00281"/>00281 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;status&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00282"/>00282 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00283"/>00283 &#32;&#32;fresult&#32;=&#32;f_lseek&#32;(&amp;file,&#32;_position);&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00284"/>00284 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:false;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00285"/>00285 &#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00286"/>00286 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00287"/>00287 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00288"/>00288 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00289"/>00289 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00290"/>00290 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00304"/>00304 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1ade9a4531298dab229775a0e1a68f7401">XSTM32FILE::Read</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,&#32;<link linkend="_class_c_i_p_h_e_r">CIPHER</link>*&#32;cipher)
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00305"/>00305 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00306"/>00306 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00307"/>00307 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00308"/>00308 &#32;&#32;UINT&#32;&#32;sizetoread&#32;=&#32;(UINT)size;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00309"/>00309 &#32;&#32;UINT&#32;&#32;readsize&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00310"/>00310 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;status&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00311"/>00311 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00312"/>00312 &#32;&#32;fresult&#32;=&#32;f_read(&amp;file,&#32;(<emphasis role="keywordtype">void</emphasis>*)buffer,&#32;sizetoread,&#32;&amp;readsize);&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00313"/>00313 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:false;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00314"/>00314 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;status&#32;=&#32;(sizetoread&#32;==&#32;readsize);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00315"/>00315 &#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00316"/>00316 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00317"/>00317 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00318"/>00318 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00319"/>00319 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00320"/>00320 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00334"/>00334 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1ade9a4531298dab229775a0e1a68f7401">XSTM32FILE::Read</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*&#32;size,&#32;<link linkend="_class_c_i_p_h_e_r">CIPHER</link>*&#32;cipher)
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00335"/>00335 {&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00336"/>00336 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00337"/>00337 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00338"/>00338 &#32;&#32;UINT&#32;&#32;sizetoread&#32;=&#32;(UINT)size;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00339"/>00339 &#32;&#32;UINT&#32;&#32;readsize&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00340"/>00340 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;status&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00341"/>00341 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00342"/>00342 &#32;&#32;fresult&#32;=&#32;f_read(&amp;file,&#32;(<emphasis role="keywordtype">void</emphasis>*)buffer,&#32;sizetoread,&#32;&amp;readsize);&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00343"/>00343 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00344"/>00344 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:false;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00345"/>00345 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;(*size)&#32;=&#32;readsize;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00346"/>00346 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00347"/>00347 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00348"/>00348 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00349"/>00349 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00350"/>00350 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00351"/>00351 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00365"/>00365 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a1e226894d1195a2aeba846bf3cd9933a">XSTM32FILE::Write</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,&#32;<link linkend="_class_c_i_p_h_e_r">CIPHER</link>*&#32;cipher)
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00366"/>00366 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00367"/>00367 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00368"/>00368 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00369"/>00369 &#32;&#32;UINT&#32;&#32;sizetowrite&#32;=&#32;(UINT)size;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00370"/>00370 &#32;&#32;UINT&#32;&#32;writesize&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00371"/>00371 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;status&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00373"/>00373 &#32;&#32;fresult&#32;=&#32;f_write(&amp;file,&#32;(<emphasis role="keywordtype">void</emphasis>*)buffer,&#32;sizetowrite,&#32;&amp;writesize);&#32;<emphasis role="comment">/*&#32;Write&#32;data&#32;to&#32;the&#32;file&#32;*/</emphasis>
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00374"/>00374 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00375"/>00375 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:false;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00376"/>00376 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00377"/>00377 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)f_size(&amp;file);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;(sizetowrite&#32;==&#32;writesize);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00381"/>00381 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00382"/>00382 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00383"/>00383 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00384"/>00384 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00385"/>00385 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00386"/>00386 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00396"/>00396 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a042db5bf166b71a4f101d9752439f840">XSTM32FILE::Flush</link>()
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00397"/>00397 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00398"/>00398 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00399"/>00399 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00400"/>00400 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00401"/>00401 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00402"/>00402 &#32;&#32;fresult&#32;=&#32;f_sync(&amp;file);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00403"/>00403 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:false;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00404"/>00404 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)f_size(&amp;file);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00405"/>00405 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00406"/>00406 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00407"/>00407 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00408"/>00408 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00409"/>00409 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00410"/>00410 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00420"/>00420 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a81e86a9caa0f2472838e69e13155abca">XSTM32FILE::Close</link>()
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00421"/>00421 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00422"/>00422 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00423"/>00423 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00424"/>00424 &#32;&#32;fresult&#32;=&#32;f_close(&amp;file);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00425"/>00425 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00426"/>00426 &#32;&#32;<link linkend="_class_x_f_i_l_e_1a294add2df94973ab032c4b42c00ccc0b">xpathnamefile</link>.<link linkend="_class_x_s_t_r_i_n_g_1a9275997c1605fa79646c301e63a77d06">Empty</link>();
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00427"/>00427 &#32;&#32;<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00428"/>00428 &#32;&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00429"/>00429 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00430"/>00430 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00431"/>00431 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00432"/>00432 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00433"/>00433 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00434"/>00434 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00447"/>00447 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1ad1e8162425c4b840e12b46c70917f278">XSTM32FILE::Erase</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;path,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;overwrite)
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00448"/>00448 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00449"/>00449 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ismount)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00450"/>00450 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00451"/>00451 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;pathstring;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00452"/>00452 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00453"/>00453 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00454"/>00454 &#32;&#32;pathstring&#32;=&#32;path;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00455"/>00455 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pathstring.<link linkend="_class_x_s_t_r_i_n_g_1ad26690161f8c1e2722771322b7370005">IsEmpty</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00456"/>00456 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00457"/>00457 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;charstr;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00458"/>00458 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00459"/>00459 &#32;&#32;pathstring.<link linkend="_class_x_s_t_r_i_n_g_1acdbd12d83c920cfa06ac0ac1770adc29">ConvertToASCII</link>(charstr);&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00460"/>00460 &#32;&#32;fresult&#32;=&#32;f_unlink(charstr.<link linkend="_class_x_b_u_f_f_e_r_1a66e2dbd897e717ce38e395d6ad87b754">GetPtrChar</link>());&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00461"/>00461 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:false;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00462"/>00462 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00463"/>00463 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00464"/>00464 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00465"/>00465 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00466"/>00466 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00467"/>00467 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00480"/>00480 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a96eb3317e825349d309579e2daaa76bd">XSTM32FILE::Rename</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;pathold,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;pathnew)
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00481"/>00481 {&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00482"/>00482 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ismount)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00483"/>00483 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00484"/>00484 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;pathstring[2];
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00485"/>00485 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00486"/>00486 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00487"/>00487 &#32;&#32;pathstring[0]&#32;=&#32;pathold;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00488"/>00488 &#32;&#32;pathstring[1]&#32;=&#32;pathnew;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00489"/>00489 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00490"/>00490 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;charpathold;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00491"/>00491 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;charpathnew;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00492"/>00492 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00493"/>00493 &#32;&#32;pathstring[0].<link linkend="_class_x_s_t_r_i_n_g_1acdbd12d83c920cfa06ac0ac1770adc29">ConvertToASCII</link>(charpathold);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00494"/>00494 &#32;&#32;pathstring[1].<link linkend="_class_x_s_t_r_i_n_g_1acdbd12d83c920cfa06ac0ac1770adc29">ConvertToASCII</link>(charpathnew);
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00495"/>00495 &#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00496"/>00496 &#32;&#32;fresult&#32;=&#32;f_rename(charpathold.<link linkend="_class_x_b_u_f_f_e_r_1a66e2dbd897e717ce38e395d6ad87b754">GetPtrChar</link>(),&#32;charpathnew.<link linkend="_class_x_b_u_f_f_e_r_1a66e2dbd897e717ce38e395d6ad87b754">GetPtrChar</link>());&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00497"/>00497 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:false;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00498"/>00498 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00499"/>00499 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00500"/>00500 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00501"/>00501 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00502"/>00502 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00503"/>00503 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00504"/>00504 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00514"/>00514 FILE*&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a671cb52dc09360133472b06466e95c69">XSTM32FILE::CreateStructHandle</link>()
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00515"/>00515 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00516"/>00516 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00517"/>00517 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00518"/>00518 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00519"/>00519 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00520"/>00520 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00530"/>00530 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a08547cf38cb1dbe1b961237024cd7d51">XSTM32FILE::DeleteStructHandle</link>()
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00531"/>00531 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00532"/>00532 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00533"/>00533 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00534"/>00534 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00535"/>00535 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00536"/>00536 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00546"/>00546 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a8461e08f9456aefe2b355cfd4638b3f4">XSTM32FILE::ActualizeSize</link>()
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00547"/>00547 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00548"/>00548 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1ad2f62bce78dd81a81030f71c84c39240">Exist</link>(<link linkend="_class_x_f_i_l_e_1a294add2df94973ab032c4b42c00ccc0b">xpathnamefile</link>.<link linkend="_class_x_s_t_r_i_n_g_1ad1470753a96f93e2feb3ee54e6fef95f">Get</link>());
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00549"/>00549 }
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00550"/>00550 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00551"/>00551 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00552"/>00552 
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00563"/>00563 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32FILE::Clean()
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00564"/>00564 {
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00565"/>00565 &#32;&#32;memset(&amp;userFATFS,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(FATFS));
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00566"/>00566 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00567"/>00567 &#32;&#32;fresult&#32;=&#32;FR_OK;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00568"/>00568 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00569"/>00569 &#32;&#32;memset(&amp;file,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(FIL));
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00570"/>00570 &#32;&#32;memset(&amp;fileinfo,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(FILINFO));
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00571"/>00571 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00572"/>00572 &#32;&#32;ismount&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file___not_unicode_8cpp_source_1l00573"/>00573 }
</programlisting></section>
