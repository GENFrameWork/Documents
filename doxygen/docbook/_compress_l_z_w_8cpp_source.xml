<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__compress_l_z_w_8cpp_source" xml:lang="en-US">
<title>CompressLZW.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Compress/CompressLZW.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__compress_l_z_w_8cpp_source_1l00001"/>00001 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;INCLUDES&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;region&#32;PRECOMPILATION_INCLUDES</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00031"/>00031 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00033"/>00033 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00035"/>00035 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00036"/>00036 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00037"/>00037 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#pragma&#32;region&#32;INCLUDES</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00039"/>00039 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__compress_l_z_w_8h">CompressLZW.h</link>&quot;</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00041"/>00041 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00042"/>00042 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00044"/>00044 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_buffer_8h">XBuffer.h</link>&quot;</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00046"/>00046 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00047"/>00047 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00048"/>00048 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00049"/>00049 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00050"/>00050 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00051"/>00051 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00052"/>00052 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00053"/>00053 <emphasis role="preprocessor">#pragma&#32;region&#32;GENERAL_VARIABLE</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00054"/>00054 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00055"/>00055 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00056"/>00056 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00057"/>00057 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00058"/>00058 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00059"/>00059 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_MEMBERS</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00060"/>00060 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00061"/>00061 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00071"/><link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a90b9322d53d40f40379c21f27fea5269">00071</link> <link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a90b9322d53d40f40379c21f27fea5269">COMPRESS_LZW::COMPRESS_LZW</link>()
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00072"/>00072 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00073"/>00073 &#32;&#32;<link linkend="_class_c_o_m_p_r_e_s_s_b_a_s_e_1a9a7d68961c2af05ba8e21f6584cde06f">SetType</link>(<link linkend="__compress_base_8h_1ae531f940df1055ce7c28e7cbc784a22fa6d9781962b8ef89712e566d4f58a50d1">COMPRESSBASE_TYPE_LZW</link>);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00074"/>00074 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00075"/>00075 &#32;&#32;interval[0]&#32;=&#32;interval[1]&#32;=&#32;8;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00076"/>00076 &#32;&#32;interval[2]&#32;=&#32;4;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00077"/>00077 &#32;&#32;interval[3]&#32;=&#32;2;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00078"/>00078 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00079"/>00079 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00080"/>00080 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00091"/><link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a9c6150aa2f0b6ac496b84fb99344442b">00091</link> <link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a9c6150aa2f0b6ac496b84fb99344442b">COMPRESS_LZW::~COMPRESS_LZW</link>()
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00092"/>00092 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00093"/>00093 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00094"/>00094 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00095"/>00095 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00096"/>00096 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00110"/><link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1ab0b603330e6567d9c21ea445a5dcd948">00110</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1ab0b603330e6567d9c21ea445a5dcd948">COMPRESS_LZW::Compress</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;source,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>*&#32;xbuffer)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00111"/>00111 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00112"/>00112 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!source)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00113"/>00113 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!size)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00114"/>00114 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xbuffer)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00115"/>00115 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00116"/>00116 &#32;&#32;xbuffer-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a0395231705663a2aeeee3b4be9d292bb">Delete</link>();
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00117"/>00117 &#32;&#32;xbuffer-&gt;<link linkend="_class_x_b_u_f_f_e_r_1acf69e379f1d0bf812ae9c1157eac172c">Resize</link>(size+<link linkend="__compress_l_z_w_8h_1a26547e08a31d00f951115cc8a06b74e3">LZW_MAX_OVERCMP</link>);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00118"/>00118 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00119"/>00119 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;csize&#32;=&#32;<link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a33e2b4390ae46ed06809512e9ac14427">LZW_Encode</link>(source,size,xbuffer-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>());
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00120"/>00120 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00121"/>00121 &#32;&#32;xbuffer-&gt;<link linkend="_class_x_b_u_f_f_e_r_1acf69e379f1d0bf812ae9c1157eac172c">Resize</link>(csize);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00122"/>00122 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00123"/>00123 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00124"/>00124 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00125"/>00125 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00126"/>00126 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00140"/><link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a9d6d982b37074f7b1e189ba3c1acb381">00140</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a9d6d982b37074f7b1e189ba3c1acb381">COMPRESS_LZW::Decompress</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;source,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>*&#32;xbuffer)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00141"/>00141 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00142"/>00142 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!source)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00143"/>00143 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xbuffer)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00144"/>00144 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!size)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00145"/>00145 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00146"/>00146 &#32;&#32;<link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a762ba87564dac1b656f0a7e5a6f16ae9">LZW_Decode</link>(source,xbuffer-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>());
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00147"/>00147 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00148"/>00148 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00149"/>00149 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00150"/>00150 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00151"/>00151 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00165"/><link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a33e2b4390ae46ed06809512e9ac14427">00165</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a33e2b4390ae46ed06809512e9ac14427">COMPRESS_LZW::LZW_Encode</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;inbuffer,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;length,<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;outbuffer)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00166"/>00166 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00167"/>00167 &#32;&#32;*outbuffer++&#32;=&#32;8&#32;;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00168"/>00168 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00169"/>00169 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1&#32;+&#32;this-&gt;<link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a201876d54e55d8e9b36e4d6186ed7cf2">LZW_GIF_Encode</link>(inbuffer,&#32;outbuffer,&#32;length,&#32;1,&#32;8);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00170"/>00170 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00171"/>00171 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00172"/>00172 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00185"/><link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a762ba87564dac1b656f0a7e5a6f16ae9">00185</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a762ba87564dac1b656f0a7e5a6f16ae9">COMPRESS_LZW::LZW_Decode</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;inbuffer,<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;outbuffer)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00186"/>00186 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00187"/>00187 &#32;&#32;this-&gt;<link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a0a0c910b5fd62158eeea3562c46cc74f">LZW_GIF_Decode</link>&#32;(inbuffer,&#32;outbuffer,&#32;0,&#32;0,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00188"/>00188 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00189"/>00189 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00190"/>00190 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00206"/><link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a201876d54e55d8e9b36e4d6186ed7cf2">00206</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a201876d54e55d8e9b36e4d6186ed7cf2">COMPRESS_LZW::LZW_GIF_Encode</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;dibbuffer,<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;outbuffer,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;dibwidth,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;dibheight,<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;colorbit)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00207"/>00207 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00208"/>00208 &#32;&#32;hash&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;[<link linkend="__compress_l_z_w_8h_1a985757685c8b9254d616aaf66f155ba9">LZW_MAX_HASHSIZE</link>]&#32;;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00209"/>00209 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00210"/>00210 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((hash&#32;==&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;||&#32;(dibbuffer&#32;==&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;||&#32;(outbuffer&#32;==&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00211"/>00211 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00212"/>00212 &#32;&#32;bymincode&#32;&#32;&#32;&#32;&#32;=&#32;(colorbit&#32;==&#32;1)&#32;?&#32;2&#32;:&#32;colorbit;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00213"/>00213 &#32;&#32;LZWclear&#32;&#32;&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;bymincode;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00214"/>00214 &#32;&#32;LZWend&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;LZWclear&#32;+&#32;1;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00215"/>00215 &#32;&#32;origin&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;curin&#32;=&#32;dibbuffer;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00216"/>00216 &#32;&#32;curout&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;outbuffer;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00217"/>00217 &#32;&#32;byinbit&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;8;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00218"/>00218 &#32;&#32;byoutbit&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00219"/>00219 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00220"/>00220 &#32;&#32;m_dibwidth&#32;&#32;&#32;&#32;=&#32;dibwidth;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00221"/>00221 &#32;&#32;m_dibheight&#32;&#32;&#32;=&#32;dibheight;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00222"/>00222 &#32;currpixel&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00223"/>00223 &#32;&#32;currheight&#32;&#32;=&#32;0;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00224"/>00224 &#32;&#32;pitch&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;4&#32;*&#32;((dibwidth&#32;*&#32;bymincode&#32;+&#32;31)&#32;/&#32;32);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00225"/>00225 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00226"/>00226 &#32;&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;Old;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00227"/>00227 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;Pixel;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00228"/>00228 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00229"/>00229 &#32;&#32;this-&gt;Encode_InitStringTable();
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00230"/>00230 &#32;&#32;this-&gt;Encode_WriteIndex(LZWclear);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00231"/>00231 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00232"/>00232 &#32;&#32;Old&#32;=&#32;this-&gt;Encode_GetNextPixel();
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00233"/>00233 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00234"/>00234 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(currheight&lt;m_dibheight)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;Pixel&#32;=&#32;this-&gt;Encode_GetNextPixel();
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00237"/>00237 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(this-&gt;Encode_IsInTable&#32;(Old,&#32;Pixel))
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Old&#32;=&#32;hash[(Old&#32;&lt;&lt;&#32;8)&#32;|&#32;Pixel];
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;Encode_WriteIndex(Old);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;Encode_AddStringToTable(Old,&#32;Pixel);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00246"/>00246 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Old&#32;=&#32;Pixel&#32;;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(currtableindex&#32;==&#32;<link linkend="__compress_l_z_w_8h_1a56de7c5db63264583d1ca57bb689044c">LZW_MAX_TABLE_SIZE</link>)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;Encode_WriteIndex(Pixel);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;Encode_WriteIndex(LZWclear);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;Encode_InitStringTable();
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00253"/>00253 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Old&#32;=&#32;this-&gt;Encode_GetNextPixel();
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00258"/>00258 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00259"/>00259 &#32;&#32;this-&gt;Encode_WriteIndex(Old);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00260"/>00260 &#32;&#32;this-&gt;Encode_WriteIndex(LZWend);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00261"/>00261 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00262"/>00262 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;hash;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00263"/>00263 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00264"/>00264 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)(curout&#32;-&#32;outbuffer&#32;+&#32;1);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00265"/>00265 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00266"/>00266 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00267"/>00267 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00283"/><link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a0a0c910b5fd62158eeea3562c46cc74f">00283</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_c_o_m_p_r_e_s_s___l_z_w_1a0a0c910b5fd62158eeea3562c46cc74f">COMPRESS_LZW::LZW_GIF_Decode</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;inbuffer,<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;dibbuffer,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;dibwidth,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;dibheight,<emphasis role="keywordtype">bool</emphasis>&#32;binterlace)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00284"/>00284 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00285"/>00285 &#32;&#32;strbegin&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_structtag_l_z_w___s_t_r_i_n_g">LZW_STRING</link>&#32;[<link linkend="__compress_l_z_w_8h_1a56de7c5db63264583d1ca57bb689044c">LZW_MAX_TABLE_SIZE</link>&#32;+&#32;32];
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00286"/>00286 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00287"/>00287 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((strbegin&#32;==&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;||&#32;(inbuffer&#32;==&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;||&#32;(dibbuffer&#32;==&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>))&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00288"/>00288 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00289"/>00289 &#32;&#32;curin&#32;&#32;&#32;&#32;&#32;&#32;=&#32;inbuffer&#32;+&#32;1;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00290"/>00290 &#32;&#32;curout&#32;&#32;&#32;&#32;&#32;=&#32;dibbuffer;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00291"/>00291 &#32;&#32;byinbit&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00292"/>00292 &#32;&#32;bymincode&#32;&#32;&#32;=&#32;*inbuffer;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00293"/>00293 &#32;&#32;LZWclear&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;bymincode;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00294"/>00294 &#32;&#32;LZWend&#32;&#32;&#32;&#32;&#32;=&#32;LZWclear&#32;+&#32;1;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00295"/>00295 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00296"/>00296 &#32;&#32;m_dibwidth&#32;&#32;=&#32;dibwidth;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00297"/>00297 &#32;currpixel&#32;=&#32;0;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00298"/>00298 &#32;&#32;pitch&#32;&#32;&#32;&#32;&#32;=&#32;4&#32;*&#32;((dibwidth&#32;*&#32;8&#32;+&#32;31)&#32;/&#32;32);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00299"/>00299 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00300"/>00300 &#32;&#32;byinterval&#32;&#32;=&#32;binterlace&#32;?&#32;0&#32;:&#32;0xFF;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00301"/>00301 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00302"/>00302 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(byinterval&#32;==&#32;0)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;origin&#32;&#32;&#32;&#32;&#32;&#32;=&#32;curout;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;m_dibheight&#32;&#32;=&#32;dibheight;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;currheight&#32;=&#32;0;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00308"/>00308 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00309"/>00309 &#32;&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;code;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00310"/>00310 &#32;&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;Old;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00311"/>00311 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00312"/>00312 &#32;&#32;this-&gt;Decode_InitStringTable();
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00313"/>00313 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00314"/>00314 &#32;&#32;<emphasis role="keywordflow">while</emphasis>((code&#32;=&#32;this-&gt;Decode_GetNextcode&#32;())&#32;!=&#32;LZWend)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(code&#32;==&#32;LZWclear)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;Decode_InitStringTable&#32;()&#32;;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>((code&#32;=&#32;this-&gt;Decode_GetNextcode&#32;())&#32;==&#32;LZWclear)&#32;;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(this-&gt;Decode_IsInTable&#32;(code))
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;Decode_AddStringToTable&#32;(Old,&#32;this-&gt;Decode_GetFirstChar&#32;(code));
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;this-&gt;Decode_AddStringToTable&#32;(Old,&#32;this-&gt;Decode_GetFirstChar&#32;(Old));
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00327"/>00327 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;Decode_WriteString_to8(code);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;Old&#32;=&#32;code;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00331"/>00331 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00332"/>00332 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;strbegin;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00333"/>00333 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00334"/>00334 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00335"/>00335 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00345"/>00345 <emphasis role="keywordtype">void</emphasis>&#32;COMPRESS_LZW::Decode_InitStringTable()
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00346"/>00346 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00347"/>00347 &#32;&#32;memset(strbegin,&#32;0xFF,&#32;<link linkend="__compress_l_z_w_8h_1a56de7c5db63264583d1ca57bb689044c">LZW_MAX_TABLE_SIZE</link>&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structtag_l_z_w___s_t_r_i_n_g">LZW_STRING</link>));
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00348"/>00348 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00349"/>00349 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;i&#32;=&#32;0&#32;;&#32;i&#32;&lt;&#32;LZWclear&#32;;&#32;i++)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;strbegin[i].suffix&#32;=&#32;i&#32;;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00351"/>00351 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00352"/>00352 &#32;&#32;currtableindex&#32;=&#32;LZWend&#32;+&#32;1;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00353"/>00353 &#32;&#32;bycurrbits&#32;&#32;&#32;&#32;&#32;=&#32;bymincode&#32;+&#32;1;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00354"/>00354 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00355"/>00355 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00356"/>00356 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00366"/>00366 <link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;COMPRESS_LZW::Decode_GetNextcode()
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00367"/>00367 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00368"/>00368 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;dwRet&#32;=&#32;0;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00369"/>00369 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;uiAdd&#32;=&#32;byinbit&#32;+&#32;bycurrbits;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00370"/>00370 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00371"/>00371 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(uiAdd&#32;&lt;=&#32;8)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;dwRet&#32;|=&#32;*&#32;curin;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00375"/>00375 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00376"/>00376 &#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(uiAdd&#32;&lt;=&#32;16)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dwRet&#32;|=&#32;*&#32;(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;*)&#32;curin;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dwRet&#32;|=&#32;*&#32;(curin&#32;+&#32;2);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dwRet&#32;&lt;&lt;=&#32;16;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dwRet&#32;|=&#32;*&#32;(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;*)&#32;curin;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00387"/>00387 &#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00388"/>00388 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00389"/>00389 &#32;&#32;curin&#32;+=&#32;uiAdd/8;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00390"/>00390 &#32;&#32;byinbit&#32;=&#32;uiAdd%8;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00391"/>00391 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00392"/>00392 &#32;&#32;dwRet&#32;&lt;&lt;=&#32;32&#32;-&#32;uiAdd&#32;;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00393"/>00393 &#32;&#32;dwRet&#32;&gt;&gt;=&#32;32&#32;-&#32;bycurrbits&#32;;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00394"/>00394 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00395"/>00395 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>)dwRet&#32;;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00396"/>00396 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00397"/>00397 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00398"/>00398 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00410"/>00410 <emphasis role="keywordtype">bool</emphasis>&#32;COMPRESS_LZW::Decode_IsInTable(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;code)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00411"/>00411 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00412"/>00412 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(code&#32;&lt;&#32;currtableindex);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00413"/>00413 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00414"/>00414 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00415"/>00415 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00428"/>00428 <emphasis role="keywordtype">void</emphasis>&#32;COMPRESS_LZW::Decode_AddStringToTable(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;prefix,&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;suffix)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00429"/>00429 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00430"/>00430 &#32;&#32;strbegin[currtableindex&#32;&#32;].<link linkend="_structtag_l_z_w___s_t_r_i_n_g_1a6eca7d1c353564ecfd020071ea060928">prefix</link>&#32;=&#32;prefix&#32;;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00431"/>00431 &#32;&#32;strbegin[currtableindex++].<link linkend="_structtag_l_z_w___s_t_r_i_n_g_1ad2218d360f8ae58b7dd51b07b90bca68">suffix</link>&#32;=&#32;suffix&#32;;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00432"/>00432 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00433"/>00433 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((currtableindex&#32;==&#32;0x008)&#32;||&#32;(currtableindex&#32;==&#32;0x010)&#32;||
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;(currtableindex&#32;==&#32;0x020)&#32;||&#32;(currtableindex&#32;==&#32;0x040)&#32;||
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;(currtableindex&#32;==&#32;0x080)&#32;||&#32;(currtableindex&#32;==&#32;0x100)&#32;||
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;(currtableindex&#32;==&#32;0x200)&#32;||&#32;(currtableindex&#32;==&#32;0x400)&#32;||
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;(currtableindex&#32;==&#32;0x800))&#32;bycurrbits++&#32;;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00438"/>00438 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00439"/>00439 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00440"/>00440 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00452"/>00452 <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;COMPRESS_LZW::Decode_GetFirstChar(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;code)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00453"/>00453 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00454"/>00454 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(strbegin[code].prefix&#32;!=&#32;0xFFFF)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00455"/>00455 &#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;code&#32;=&#32;strbegin[code].<link linkend="_structtag_l_z_w___s_t_r_i_n_g_1a6eca7d1c353564ecfd020071ea060928">prefix</link>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00457"/>00457 &#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00458"/>00458 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00459"/>00459 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)&#32;strbegin[code].<link linkend="_structtag_l_z_w___s_t_r_i_n_g_1ad2218d360f8ae58b7dd51b07b90bca68">suffix</link>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00460"/>00460 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00461"/>00461 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00462"/>00462 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00474"/>00474 <emphasis role="keywordtype">void</emphasis>&#32;COMPRESS_LZW::Decode_WriteString_to8(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;code)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00475"/>00475 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00476"/>00476 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(code&#32;&lt;&#32;LZWclear)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00477"/>00477 &#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00478"/>00478 &#32;&#32;&#32;&#32;&#32;&#32;curout[currpixel++]&#32;=&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)&#32;strbegin[code].suffix;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00479"/>00479 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00480"/>00480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(currpixel&#32;==&#32;m_dibwidth)&#32;this-&gt;Decode_SwitchToFollowLine();
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00481"/>00481 &#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00482"/>00482 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00483"/>00483 &#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;Decode_WriteString_to8(strbegin[code].prefix);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;Decode_WriteString_to8(strbegin[code].suffix);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00486"/>00486 &#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00487"/>00487 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00488"/>00488 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00489"/>00489 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00499"/>00499 <emphasis role="keywordtype">void</emphasis>&#32;COMPRESS_LZW::Decode_SwitchToFollowLine()
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00500"/>00500 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00501"/>00501 &#32;currpixel&#32;=&#32;0;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00502"/>00502 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00503"/>00503 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(byinterval&#32;==&#32;0xFF)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00504"/>00504 &#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;curout&#32;-=&#32;pitch;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00506"/>00506 &#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00507"/>00507 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00508"/>00508 &#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;currheight&#32;+=&#32;interval[byinterval];
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00510"/>00510 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(currheight&#32;&gt;=&#32;m_dibheight)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(++byinterval&#32;&lt;&#32;4)&#32;&#32;currheight&#32;=&#32;interval[byinterval]/2;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00515"/>00515 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;curout&#32;=&#32;origin&#32;-&#32;currheight&#32;*&#32;pitch;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00517"/>00517 &#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00518"/>00518 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00519"/>00519 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00520"/>00520 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00530"/>00530 <emphasis role="keywordtype">void</emphasis>&#32;COMPRESS_LZW::Encode_InitStringTable()
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00531"/>00531 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00532"/>00532 &#32;&#32;currtableindex&#32;=&#32;LZWend&#32;&#32;&#32;+&#32;1;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00533"/>00533 &#32;&#32;bycurrbits&#32;&#32;&#32;&#32;&#32;=&#32;bymincode&#32;+&#32;1;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00534"/>00534 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00535"/>00535 &#32;&#32;memset(hash,&#32;0x00,&#32;<link linkend="__compress_l_z_w_8h_1a985757685c8b9254d616aaf66f155ba9">LZW_MAX_HASHSIZE</link>&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>));
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00536"/>00536 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00537"/>00537 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00538"/>00538 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00548"/>00548 <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;COMPRESS_LZW::Encode_GetNextPixel()
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00549"/>00549 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00550"/>00550 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;byRet&#32;=&#32;0;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00551"/>00551 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00552"/>00552 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(bymincode)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00553"/>00553 &#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;8&#32;:&#32;byRet&#32;=&#32;curin[currpixel];
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00556"/>00556 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00557"/>00557 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4&#32;:&#32;byRet&#32;=&#32;(currpixel&#32;%&#32;2&#32;==&#32;0)&#32;?&#32;curin[currpixel&#32;/&#32;2]&#32;&gt;&gt;&#32;4&#32;:&#32;curin[currpixel&#32;/&#32;2]&#32;&amp;&#32;0x0F;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00559"/>00559 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00560"/>00560 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1&#32;:&#32;byRet&#32;=&#32;0x01&#32;&amp;&#32;(curin[currpixel&#32;/&#32;8]&#32;&gt;&gt;&#32;(7&#32;-&#32;(currpixel&#32;&amp;&#32;7)));
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00561"/>00561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00562"/>00562 &#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00563"/>00563 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00564"/>00564 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(++currpixel&#32;==&#32;m_dibwidth)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00565"/>00565 &#32;&#32;&#32;&#32;{
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00566"/>00566 &#32;&#32;&#32;&#32;&#32;currpixel&#32;=&#32;0;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00567"/>00567 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00568"/>00568 &#32;&#32;&#32;&#32;&#32;&#32;currheight++;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00569"/>00569 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00570"/>00570 &#32;&#32;&#32;&#32;&#32;&#32;curin&#32;=&#32;origin&#32;-&#32;currheight&#32;*&#32;pitch;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00571"/>00571 &#32;&#32;&#32;&#32;}
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00572"/>00572 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00573"/>00573 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;byRet;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00574"/>00574 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00575"/>00575 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00576"/>00576 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00589"/>00589 <emphasis role="keywordtype">bool</emphasis>&#32;COMPRESS_LZW::Encode_IsInTable(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;Old,&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;Pixel)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00590"/>00590 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00591"/>00591 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(hash[(Old&#32;&lt;&lt;&#32;8)&#32;|&#32;Pixel]&#32;!=&#32;0);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00592"/>00592 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00593"/>00593 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00594"/>00594 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00607"/>00607 <emphasis role="keywordtype">void</emphasis>&#32;COMPRESS_LZW::Encode_AddStringToTable(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;Old,&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;Pixel)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00608"/>00608 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00609"/>00609 &#32;&#32;hash[(Old&#32;&lt;&lt;&#32;8)&#32;|&#32;Pixel]&#32;=&#32;currtableindex++;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00610"/>00610 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00611"/>00611 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((currtableindex&#32;==&#32;0x009)&#32;||&#32;(currtableindex&#32;==&#32;0x011)&#32;||
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00612"/>00612 &#32;&#32;&#32;&#32;&#32;&#32;(currtableindex&#32;==&#32;0x021)&#32;||&#32;(currtableindex&#32;==&#32;0x041)&#32;||
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00613"/>00613 &#32;&#32;&#32;&#32;&#32;&#32;(currtableindex&#32;==&#32;0x081)&#32;||&#32;(currtableindex&#32;==&#32;0x101)&#32;||
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00614"/>00614 &#32;&#32;&#32;&#32;&#32;&#32;(currtableindex&#32;==&#32;0x201)&#32;||&#32;(currtableindex&#32;==&#32;0x401)&#32;||
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00615"/>00615 &#32;&#32;&#32;&#32;&#32;&#32;(currtableindex&#32;==&#32;0x801))&#32;&#32;bycurrbits++;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00616"/>00616 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00617"/>00617 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00618"/>00618 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00630"/>00630 <emphasis role="keywordtype">void</emphasis>&#32;COMPRESS_LZW::Encode_WriteIndex(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;Index)
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00631"/>00631 {
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00632"/>00632 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;uiAdd&#32;=&#32;byoutbit&#32;+&#32;bycurrbits;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00633"/>00633 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00634"/>00634 &#32;&#32;*(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*)curout&#32;|=&#32;(Index&#32;&lt;&lt;&#32;byoutbit);
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00635"/>00635 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00636"/>00636 &#32;&#32;byoutbit&#32;=&#32;uiAdd&#32;%&#32;8;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00637"/>00637 &#32;&#32;curout&#32;+=&#32;uiAdd&#32;/&#32;8;
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00638"/>00638 }
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00639"/>00639 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00640"/>00640 
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00641"/>00641 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__compress_l_z_w_8cpp_source_1l00642"/>00642 
</programlisting></section>
