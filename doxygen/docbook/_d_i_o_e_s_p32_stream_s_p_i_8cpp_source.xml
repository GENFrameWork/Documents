<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source" xml:lang="en-US">
<title>DIOESP32StreamSPI.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Platforms/Microcontrollers/ESP32/DIOESP32StreamSPI.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00001"/>00001 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;CONTROL&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00030"/>00030 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00031"/>00031 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00032"/>00032 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00033"/>00033 <emphasis role="preprocessor">#if&#32;defined(DIO_ACTIVE)&#32;&amp;&amp;&#32;defined(DIO_STREAMSPI_ACTIVE)</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00034"/>00034 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00035"/>00035 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00036"/>00036 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_factory_8h">XFactory.h</link>&quot;</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_thread_collected_8h">XThreadCollected.h</link>&quot;</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00039"/>00039 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__d_i_o_stream_x_event_8h">DIOStreamXEvent.h</link>&quot;</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00041"/>00041 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__d_i_o_stream_s_p_i_config_8h">DIOStreamSPIConfig.h</link>&quot;</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00042"/>00042 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__d_i_o_e_s_p32_stream_s_p_i_8h">DIOESP32StreamSPI.h</link>&quot;</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00044"/>00044 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00046"/>00046 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00047"/>00047 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00048"/>00048 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00049"/>00049 DIOESP32STREAMSPIPORT*&#32;&#32;&#32;&#32;DIOESP32STREAMSPI::ports[DIOESP32STREAMSPI_MAXPORTS]&#32;&#32;&#32;&#32;&#32;=&#32;{&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>&#32;};
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00050"/>00050 <link linkend="_class_d_i_o_e_s_p32_s_t_r_e_a_m_s_p_i">DIOESP32STREAMSPI</link>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DIOESP32STREAMSPI::handles[DIOESP32STREAMSPI_MAXHANDLES]&#32;=&#32;{&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>&#32;};
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00051"/>00051 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00052"/>00052 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00053"/>00053 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00054"/>00054 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00055"/>00055 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00056"/>00056 <emphasis role="comment">/*--------------------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00057"/>00057 <emphasis role="commentemphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00058"/>00058 <emphasis role="comment">/*--------------------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00059"/>00059 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00060"/>00060 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00070"/>00070 DIOESP32STREAMSPIPORT::DIOESP32STREAMSPIPORT()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00071"/>00071 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00072"/>00072 &#32;&#32;Clean();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00073"/>00073 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00074"/>00074 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00075"/>00075 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00076"/>00076 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00087"/>00087 DIOESP32STREAMSPIPORT::~DIOESP32STREAMSPIPORT()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00088"/>00088 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00089"/>00089 &#32;&#32;Clean();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00090"/>00090 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00091"/>00091 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00092"/>00092 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00093"/>00093 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00103"/>00103 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;DIOESP32STREAMSPIPORT::GetCounterRef()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00104"/>00104 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00105"/>00105 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;counterref;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00106"/>00106 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00107"/>00107 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00108"/>00108 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00109"/>00109 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00121"/>00121 <emphasis role="keywordtype">void</emphasis>&#32;DIOESP32STREAMSPIPORT::SetCounterRef(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;counterref)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00122"/>00122 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00123"/>00123 &#32;&#32;this-&gt;counterref&#32;=&#32;counterref;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00124"/>00124 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00125"/>00125 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00126"/>00126 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00127"/>00127 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00137"/>00137 SPI_HandleTypeDef*&#32;DIOESP32STREAMSPIPORT::GetHandleSPI()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00138"/>00138 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00139"/>00139 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hspi;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00140"/>00140 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00141"/>00141 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00142"/>00142 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00143"/>00143 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00155"/>00155 <emphasis role="keywordtype">void</emphasis>&#32;DIOESP32STREAMSPIPORT::SetHandleSPI(SPI_HandleTypeDef*&#32;hspi)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00156"/>00156 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00157"/>00157 &#32;&#32;this-&gt;hspi&#32;=&#32;hspi;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00158"/>00158 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00159"/>00159 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00160"/>00160 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00161"/>00161 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00172"/>00172 <emphasis role="keywordtype">void</emphasis>&#32;DIOESP32STREAMSPIPORT::Clean()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00173"/>00173 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00174"/>00174 &#32;&#32;counterref&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00175"/>00175 &#32;&#32;hspi&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00176"/>00176 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00177"/>00177 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00178"/>00178 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00179"/>00179 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00180"/>00180 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00181"/>00181 <emphasis role="comment">/*--------------------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00182"/>00182 <emphasis role="comment">/*&#32;&#32;DIOESP32STREAMSPI&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00183"/>00183 <emphasis role="comment">/*--------------------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00184"/>00184 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00185"/>00185 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00186"/>00186 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00196"/>00196 DIOESP32STREAMSPI::DIOESP32STREAMSPI()&#32;:&#32;<link linkend="_class_d_i_o_s_t_r_e_a_m_s_p_i">DIOSTREAMSPI</link>()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00197"/>00197 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00198"/>00198 &#32;&#32;Clean();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00199"/>00199 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00200"/>00200 &#32;&#32;AddState(&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001acec6009b55cc197b9942b8059f7a8628">DIOSTREAMSPI_FSMSTATE_NONE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a96f3118de28a5ccd7be2a6a110eeb2d6a990dba83209e246afc1dce3f42e37e9f">DIOSTREAMSPI_FSMEVENT_CONNECTED</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001a52592631ab3ce1eb8db4d848bb5160cd">DIOSTREAMSPI_FSMSTATE_CONNECTED</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a96f3118de28a5ccd7be2a6a110eeb2d6ac94daaf9a9669281b41562649e81acfc">DIOSTREAMSPI_FSMEVENT_DISCONNECTING</link>&#32;&#32;&#32;,&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001af6de7ed7f61ddcd53175bcbb14184d45">DIOSTREAMSPI_FSMSTATE_DISCONNECTING</link>&#32;&#32;&#32;&#32;,
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_f_s_machine_8h_1a33b7db38a7e9ca04fb2aa62ea3b2af33">XFSMACHINESTATE_EVENTDEFEND</link>);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00204"/>00204 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00205"/>00205 &#32;&#32;AddState(&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001a52592631ab3ce1eb8db4d848bb5160cd">DIOSTREAMSPI_FSMSTATE_CONNECTED</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;,
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a96f3118de28a5ccd7be2a6a110eeb2d6aa43450cd41560243c1fd4b283e7641ba">DIOSTREAMSPI_FSMEVENT_WAITINGTOREAD</link>&#32;&#32;&#32;,&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001a883a5c754686098ba72e32dd415c0297">DIOSTREAMSPI_FSMSTATE_WAITINGTOREAD</link>&#32;&#32;&#32;&#32;,
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a96f3118de28a5ccd7be2a6a110eeb2d6ac94daaf9a9669281b41562649e81acfc">DIOSTREAMSPI_FSMEVENT_DISCONNECTING</link>&#32;&#32;&#32;,&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001af6de7ed7f61ddcd53175bcbb14184d45">DIOSTREAMSPI_FSMSTATE_DISCONNECTING</link>&#32;&#32;&#32;&#32;,
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_f_s_machine_8h_1a33b7db38a7e9ca04fb2aa62ea3b2af33">XFSMACHINESTATE_EVENTDEFEND</link>);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00209"/>00209 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00210"/>00210 &#32;&#32;AddState(&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001a883a5c754686098ba72e32dd415c0297">DIOSTREAMSPI_FSMSTATE_WAITINGTOREAD</link>&#32;&#32;&#32;,
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a96f3118de28a5ccd7be2a6a110eeb2d6a990dba83209e246afc1dce3f42e37e9f">DIOSTREAMSPI_FSMEVENT_CONNECTED</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001a52592631ab3ce1eb8db4d848bb5160cd">DIOSTREAMSPI_FSMSTATE_CONNECTED</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a96f3118de28a5ccd7be2a6a110eeb2d6ac94daaf9a9669281b41562649e81acfc">DIOSTREAMSPI_FSMEVENT_DISCONNECTING</link>&#32;&#32;&#32;,&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001af6de7ed7f61ddcd53175bcbb14184d45">DIOSTREAMSPI_FSMSTATE_DISCONNECTING</link>&#32;&#32;&#32;&#32;,
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_f_s_machine_8h_1a33b7db38a7e9ca04fb2aa62ea3b2af33">XFSMACHINESTATE_EVENTDEFEND</link>);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00214"/>00214 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00215"/>00215 &#32;&#32;AddState(&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001af6de7ed7f61ddcd53175bcbb14184d45">DIOSTREAMSPI_FSMSTATE_DISCONNECTING</link>&#32;&#32;&#32;,
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a96f3118de28a5ccd7be2a6a110eeb2d6a990dba83209e246afc1dce3f42e37e9f">DIOSTREAMSPI_FSMEVENT_CONNECTED</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001a52592631ab3ce1eb8db4d848bb5160cd">DIOSTREAMSPI_FSMSTATE_CONNECTED</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a96f3118de28a5ccd7be2a6a110eeb2d6aa43450cd41560243c1fd4b283e7641ba">DIOSTREAMSPI_FSMEVENT_WAITINGTOREAD</link>&#32;&#32;&#32;,&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001a883a5c754686098ba72e32dd415c0297">DIOSTREAMSPI_FSMSTATE_WAITINGTOREAD</link>&#32;&#32;&#32;&#32;,
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_f_s_machine_8h_1a33b7db38a7e9ca04fb2aa62ea3b2af33">XFSMACHINESTATE_EVENTDEFEND</link>);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00219"/>00219 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00220"/>00220 &#32;&#32;threadconnection&#32;=&#32;<link linkend="__x_thread_collected_8h_1aad503e3655b9ff78d3ac660d1f1f5534">CREATEXTHREAD</link>(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a30fc7b8d19c0a99364d2df8b682f6e5b">XTHREADGROUPID_DIOSTREAMSPI</link>,&#32;<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOESP32STREAMSPI::DIOESP32STREAMSPI&quot;</emphasis>),&#32;ThreadConnection,&#32;(<emphasis role="keywordtype">void</emphasis>*)<emphasis role="keyword">this</emphasis>);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00221"/>00221 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00222"/>00222 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00223"/>00223 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00224"/>00224 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00235"/>00235 DIOESP32STREAMSPI::~DIOESP32STREAMSPI()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00236"/>00236 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00237"/>00237 &#32;&#32;Close();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00238"/>00238 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00239"/>00239 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(threadconnection)&#32;<link linkend="__x_thread_collected_8h_1a18fb843f5fbad51464b68d705ed29b8a">DELETEXTHREAD</link>(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a30fc7b8d19c0a99364d2df8b682f6e5b">XTHREADGROUPID_DIOSTREAMSPI</link>,&#32;threadconnection);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00240"/>00240 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00241"/>00241 &#32;&#32;Clean();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00242"/>00242 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00243"/>00243 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00244"/>00244 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00245"/>00245 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00255"/>00255 <link linkend="__d_i_o_stream_8h_1ad10214ba9a07bd0f22017499f6f59a0f">DIOSTREAMSTATUS</link>&#32;DIOESP32STREAMSPI::GetConnectStatus()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00256"/>00256 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00257"/>00257 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!config)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__d_i_o_stream_8h_1ad10214ba9a07bd0f22017499f6f59a0fa516b51b4debec043e34f66f0d4710fa2">DIOSTREAMSTATUS_DISCONNECTED</link>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00258"/>00258 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00259"/>00259 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00260"/>00260 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00261"/>00261 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00262"/>00262 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00263"/>00263 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00273"/>00273 <emphasis role="keywordtype">bool</emphasis>&#32;DIOESP32STREAMSPI::Open()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00274"/>00274 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00275"/>00275 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!threadconnection)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00276"/>00276 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!config)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00277"/>00277 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00278"/>00278 &#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;DIOESP32STREAMSPI_MAXHANDLES;&#32;c++)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(DIOESP32STREAMSPI::handles[c]&#32;==&#32;<emphasis role="keyword">this</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00281"/>00281 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!DIOESP32STREAMSPI::handles[c])
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indexhandle&#32;=&#32;c;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DIOESP32STREAMSPI::handles[indexhandle]&#32;=&#32;<emphasis role="keyword">this</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00289"/>00289 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00290"/>00290 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(indexhandle&#32;==&#32;-1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00291"/>00291 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00292"/>00292 &#32;&#32;indexport&#32;=&#32;config-&gt;GetPort()-1;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00293"/>00293 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00294"/>00294 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!DIOESP32STREAMSPI::ports[indexport])
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;DIOESP32STREAMSPIPORT*&#32;port&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;DIOESP32STREAMSPIPORT();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!port)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00298"/>00298 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;hspi&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;SPI_HandleTypeDef();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!hspi)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;port;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00305"/>00305 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(config-&gt;GetPort())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;&#32;1&#32;:&#32;hspi-&gt;Instance&#32;=&#32;SPI1;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;&#32;2&#32;:&#32;hspi-&gt;Instance&#32;=&#32;SPI2;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00312"/>00312 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00314"/>00314 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.Mode&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;SPI_MODE_MASTER;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.Direction&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;SPI_DIRECTION_2LINES;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.DataSize&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;SPI_DATASIZE_8BIT;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.CLKPolarity&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;SPI_POLARITY_LOW;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.CLKPhase&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;SPI_PHASE_1EDGE;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.NSS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;SPI_NSS_HARD_OUTPUT;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.BaudRatePrescaler&#32;&#32;=&#32;SPI_BAUDRATEPRESCALER_2;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.FirstBit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;SPI_FIRSTBIT_MSB;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.TIMode&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;SPI_TIMODE_DISABLE;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.CRCCalculation&#32;&#32;&#32;&#32;&#32;=&#32;SPI_CRCCALCULATION_DISABLE;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.CRCPolynomial&#32;&#32;&#32;&#32;&#32;&#32;=&#32;7;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.CRCLength&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;SPI_CRC_LENGTH_DATASIZE;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;hspi-&gt;Init.NSSPMode&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;SPI_NSS_PULSE_ENABLE;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00328"/>00328 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(HAL_SPI_Init(hspi)&#32;!=&#32;HAL_OK)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00333"/>00333 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;port-&gt;SetHandleSPI(hspi);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;DIOESP32STREAMSPI::ports[indexport]&#32;=&#32;port;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;hspi&#32;=&#32;DIOESP32STREAMSPI::ports[indexport]-&gt;GetHandleSPI();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;DIOESP32STREAMSPI::ports[indexport]-&gt;SetCounterRef(DIOESP32STREAMSPI::ports[indexport]-&gt;GetCounterRef()+1);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00342"/>00342 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00343"/>00343 &#32;&#32;SetEvent(<link linkend="__d_i_o_stream_s_p_i_8h_1a96f3118de28a5ccd7be2a6a110eeb2d6a990dba83209e246afc1dce3f42e37e9f">DIOSTREAMSPI_FSMEVENT_CONNECTED</link>);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00344"/>00344 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00345"/>00345 &#32;&#32;status&#32;=&#32;<link linkend="__d_i_o_stream_8h_1ad10214ba9a07bd0f22017499f6f59a0fa264f9a9556afb61979d377ba92266a76">DIOSTREAMSTATUS_CONNECTED</link>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00346"/>00346 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00347"/>00347 &#32;&#32;memset(bufferdata,&#32;0,&#32;<link linkend="__d_i_o_stream_8h_1aad641424d597536a03a19645768c03b4">DIOSTREAM_MAXBUFFER</link>);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00348"/>00348 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00349"/>00349 &#32;&#32;ResetXBuffers();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00350"/>00350 &#32;&#32;ResetConnectionStatistics();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00351"/>00351 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00352"/>00352 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;threadconnection-&gt;Ini();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00353"/>00353 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00354"/>00354 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00355"/>00355 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00356"/>00356 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00369"/>00369 <emphasis role="keywordtype">bool</emphasis>&#32;DIOESP32STREAMSPI::WaitToFilledReadingBuffer(<emphasis role="keywordtype">int</emphasis>&#32;filledto,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__x_l_i_n_u_x_system_8cpp_1a493b57f443cc38b3d3df9c1e584d9d82">timeout</link>)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00370"/>00370 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00371"/>00371 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(filledto&#32;==&#32;<link linkend="__d_i_o_stream_8h_1a13a0907b21de66249451948f84f92183">DIOSTREAM_SOMETHINGTOREAD</link>)&#32;sizebufferdata&#32;=&#32;1;&#32;<emphasis role="keywordflow">else</emphasis>&#32;sizebufferdata&#32;=&#32;filledto;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00372"/>00372 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00373"/>00373 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(config-&gt;GetMode())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_config_8h_1ae47ddf801d21b825b353ae3a3008ceccaf1e4ddefa116da1bfbe2ed3d2caedaa8">DIOSTREAMMODE_MASTER</link>&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_config_8h_1ae47ddf801d21b825b353ae3a3008ceccad142e1ba565379dd5c6608f71aac2fc3">DIOSTREAMMODE_SEMIMASTER</link>&#32;:
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_config_8h_1ae47ddf801d21b825b353ae3a3008cecca6f21237dbdeb82235c36e04a454b416c">DIOSTREAMMODE_SLAVE</link>&#32;&#32;&#32;&#32;&#32;&#32;:&#32;HAL_SPI_Transmit_IT(hspi,&#32;(uint8_t*)bufferdata,&#32;sizebufferdata);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00381"/>00381 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00382"/>00382 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_d_i_o_s_t_r_e_a_m_1a6e20f03ff391343123fda221a5c2ed85">DIOSTREAM::WaitToFilledReadingBuffer</link>(sizebufferdata,&#32;<link linkend="__x_l_i_n_u_x_system_8cpp_1a493b57f443cc38b3d3df9c1e584d9d82">timeout</link>);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00383"/>00383 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00384"/>00384 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00385"/>00385 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00386"/>00386 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00399"/>00399 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;DIOESP32STREAMSPI::ReadDirect(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00400"/>00400 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00401"/>00401 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!config)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00402"/>00402 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GetConnectStatus()==<link linkend="__d_i_o_stream_8h_1ad10214ba9a07bd0f22017499f6f59a0fa516b51b4debec043e34f66f0d4710fa2">DIOSTREAMSTATUS_DISCONNECTED</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00403"/>00403 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00404"/>00404 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;br&#32;=&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00405"/>00405 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00406"/>00406 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(config-&gt;GetMode())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00407"/>00407 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_config_8h_1ae47ddf801d21b825b353ae3a3008ceccaf1e4ddefa116da1bfbe2ed3d2caedaa8">DIOSTREAMMODE_MASTER</link>&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_config_8h_1ae47ddf801d21b825b353ae3a3008ceccad142e1ba565379dd5c6608f71aac2fc3">DIOSTREAMMODE_SEMIMASTER</link>&#32;:
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_config_8h_1ae47ddf801d21b825b353ae3a3008cecca6f21237dbdeb82235c36e04a454b416c">DIOSTREAMMODE_SLAVE</link>&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">if</emphasis>(HAL_SPI_Receive(hspi,&#32;buffer,&#32;size,&#32;100)&#32;==&#32;HAL_OK)&#32;br&#32;=&#32;size;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00413"/>00413 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00414"/>00414 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00415"/>00415 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;br;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00416"/>00416 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00417"/>00417 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00418"/>00418 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00419"/>00419 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00432"/>00432 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;DIOESP32STREAMSPI::WriteDirect(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00433"/>00433 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00434"/>00434 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!config)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00435"/>00435 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GetConnectStatus()==<link linkend="__d_i_o_stream_8h_1ad10214ba9a07bd0f22017499f6f59a0fa516b51b4debec043e34f66f0d4710fa2">DIOSTREAMSTATUS_DISCONNECTED</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00436"/>00436 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00437"/>00437 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;bw&#32;=&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00438"/>00438 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00439"/>00439 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!size)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00440"/>00440 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00441"/>00441 &#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(config-&gt;GetMode())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00442"/>00442 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_config_8h_1ae47ddf801d21b825b353ae3a3008ceccaf1e4ddefa116da1bfbe2ed3d2caedaa8">DIOSTREAMMODE_MASTER</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_config_8h_1ae47ddf801d21b825b353ae3a3008ceccad142e1ba565379dd5c6608f71aac2fc3">DIOSTREAMMODE_SEMIMASTER</link>&#32;&#32;&#32;:
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_config_8h_1ae47ddf801d21b825b353ae3a3008cecca6f21237dbdeb82235c36e04a454b416c">DIOSTREAMMODE_SLAVE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">if</emphasis>(HAL_SPI_Transmit(hspi,&#32;buffer,&#32;size,&#32;100)&#32;==&#32;HAL_OK)&#32;bw&#32;=&#32;size;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00448"/>00448 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00449"/>00449 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00450"/>00450 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bw;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00451"/>00451 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00452"/>00452 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00453"/>00453 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00454"/>00454 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00467"/>00467 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;DIOESP32STREAMSPI::Write(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00468"/>00468 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00469"/>00469 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!outbuffer)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00470"/>00470 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00471"/>00471 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(outbuffer-&gt;IsBlocked())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00472"/>00472 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00473"/>00473 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00474"/>00474 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00475"/>00475 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00476"/>00476 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!outbuffer-&gt;Add(buffer,size))&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00477"/>00477 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00478"/>00478 &#32;&#32;nbyteswrite+=size;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00479"/>00479 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(xtimernotactivity)&#32;xtimernotactivity-&gt;Reset();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00480"/>00480 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00481"/>00481 &#32;&#32;outbuffer-&gt;SetBlocked(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00482"/>00482 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00483"/>00483 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;size;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00484"/>00484 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00485"/>00485 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00486"/>00486 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00487"/>00487 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00497"/>00497 <emphasis role="keywordtype">bool</emphasis>&#32;DIOESP32STREAMSPI::Disconnect()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00498"/>00498 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00499"/>00499 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00500"/>00500 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00501"/>00501 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00502"/>00502 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00503"/>00503 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00513"/>00513 <emphasis role="keywordtype">bool</emphasis>&#32;DIOESP32STREAMSPI::Close()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00514"/>00514 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00515"/>00515 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!threadconnection)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00516"/>00516 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00517"/>00517 &#32;&#32;threadconnection-&gt;End();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00518"/>00518 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00519"/>00519 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GetConnectStatus()==<link linkend="__d_i_o_stream_8h_1ad10214ba9a07bd0f22017499f6f59a0fa516b51b4debec043e34f66f0d4710fa2">DIOSTREAMSTATUS_DISCONNECTED</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00520"/>00520 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00521"/>00521 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!DIOESP32STREAMSPI::handles[indexhandle])&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00522"/>00522 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00523"/>00523 &#32;&#32;DIOESP32STREAMSPI::handles[indexhandle]&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00524"/>00524 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00525"/>00525 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!DIOESP32STREAMSPI::ports[indexport]-&gt;GetCounterRef())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00526"/>00526 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;HAL_SPI_DeInit(DIOESP32STREAMSPI::ports[indexport]-&gt;GetHandleSPI());
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00528"/>00528 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;DIOESP32STREAMSPI::ports[indexport]-&gt;GetHandleSPI();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;DIOESP32STREAMSPI::ports[indexport];
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00531"/>00531 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;DIOESP32STREAMSPI::ports[indexport]&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00533"/>00533 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00534"/>00534 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00535"/>00535 &#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;DIOESP32STREAMSPI::ports[indexport]-&gt;SetCounterRef(DIOESP32STREAMSPI::ports[indexport]-&gt;GetCounterRef()-1);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00537"/>00537 &#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00538"/>00538 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00539"/>00539 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00540"/>00540 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00541"/>00541 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00542"/>00542 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00543"/>00543 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00554"/>00554 <emphasis role="keywordtype">bool</emphasis>&#32;DIOESP32STREAMSPI::CleanBuffers()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00555"/>00555 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00556"/>00556 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00557"/>00557 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00558"/>00558 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00559"/>00559 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00571"/>00571 <emphasis role="keywordtype">void</emphasis>&#32;HAL_SPI_MasterRxCpltCallback(SPI_HandleTypeDef*&#32;hspi)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00572"/>00572 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00573"/>00573 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;port&#32;=&#32;-1;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00574"/>00574 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00575"/>00575 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(hspi-&gt;Instance&#32;==&#32;SPI1)&#32;port&#32;=&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00576"/>00576 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(hspi-&gt;Instance&#32;==&#32;SPI2)&#32;port&#32;=&#32;1;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00577"/>00577 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00578"/>00578 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;DIOESP32STREAMSPI_MAXHANDLES;&#32;c++)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00579"/>00579 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00580"/>00580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(DIOESP32STREAMSPI::handles[c])
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00581"/>00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00582"/>00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(DIOESP32STREAMSPI::handles[c]-&gt;indexport&#32;&#32;==&#32;port)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00583"/>00583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00584"/>00584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(DIOESP32STREAMSPI::handles[c]-&gt;GetConnectStatus()&#32;==&#32;<link linkend="__d_i_o_stream_8h_1ad10214ba9a07bd0f22017499f6f59a0fa516b51b4debec043e34f66f0d4710fa2">DIOSTREAMSTATUS_DISCONNECTED</link>)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00585"/>00585 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00586"/>00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!DIOESP32STREAMSPI::handles[c]-&gt;IsBlockRead())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00587"/>00587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00588"/>00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DIOESP32STREAMSPI::handles[c]-&gt;inbuffer-&gt;Add(DIOESP32STREAMSPI::handles[c]-&gt;bufferdata,&#32;DIOESP32STREAMSPI::handles[c]-&gt;sizebufferdata);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00589"/>00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00590"/>00590 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00591"/>00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DIOESP32STREAMSPI::handles[c]-&gt;sizebufferdata&#32;=&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00592"/>00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00593"/>00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00594"/>00594 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00595"/>00595 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00596"/>00596 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00597"/>00597 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00598"/>00598 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00610"/>00610 <emphasis role="keywordtype">void</emphasis>&#32;HAL_SPI_SlaveRxCpltCallback(SPI_HandleTypeDef*&#32;hspi)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00611"/>00611 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00612"/>00612 &#32;&#32;HAL_SPI_MasterRxCpltCallback(hspi);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00613"/>00613 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00614"/>00614 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00615"/>00615 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00616"/>00616 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00628"/>00628 <emphasis role="keywordtype">void</emphasis>&#32;HAL_SPI_ErrorCallback(SPI_HandleTypeDef&#32;*hspi)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00629"/>00629 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00630"/>00630 &#32;&#32;<link linkend="__x_trace_8h_1ad3489a73cc8c0aa8e64f91a03735e525">XTRACE_PRINTCOLOR</link>(<link linkend="__x_trace_8h_1a435ffc0233bcfc5e0e15d9965a071c52">XTRACE_COLOR_RED</link>,&#32;<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;SPI&#32;comunication&#32;error&#32;[%d]&quot;</emphasis>),&#32;hspi-&gt;ErrorCode);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00631"/>00631 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00632"/>00632 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00633"/>00633 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00634"/>00634 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00646"/>00646 <emphasis role="keywordtype">void</emphasis>&#32;DIOESP32STREAMSPI::ThreadConnection(<emphasis role="keywordtype">void</emphasis>*&#32;param)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00647"/>00647 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00648"/>00648 &#32;&#32;<link linkend="_class_d_i_o_e_s_p32_s_t_r_e_a_m_s_p_i">DIOESP32STREAMSPI</link>*&#32;diostream&#32;=&#32;(<link linkend="_class_d_i_o_e_s_p32_s_t_r_e_a_m_s_p_i">DIOESP32STREAMSPI</link>*)param;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00649"/>00649 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!diostream)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00650"/>00650 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00651"/>00651 &#32;&#32;<emphasis role="comment">//HAL_NVIC_DisableIRQ(TIM3_IRQn);</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00652"/>00652 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00653"/>00653 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(diostream-&gt;GetEvent()==<link linkend="__d_i_o_stream_s_p_i_8h_1a96f3118de28a5ccd7be2a6a110eeb2d6ad2a8be778789f94173c5a8746037ef5a">DIOSTREAMSPI_FSMEVENT_NONE</link>)&#32;<emphasis role="comment">//&#32;No&#32;hay&#32;nuevos&#32;Eventos</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00654"/>00654 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00655"/>00655 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(diostream-&gt;GetCurrentState())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00656"/>00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00657"/>00657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001acec6009b55cc197b9942b8059f7a8628">DIOSTREAMSPI_FSMSTATE_NONE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00658"/>00658 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00659"/>00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001a52592631ab3ce1eb8db4d848bb5160cd">DIOSTREAMSPI_FSMSTATE_CONNECTED</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00660"/>00660 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00661"/>00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001a883a5c754686098ba72e32dd415c0297">DIOSTREAMSPI_FSMSTATE_WAITINGTOREAD</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">if</emphasis>(!diostream-&gt;IsBlockRead())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00662"/>00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00663"/>00663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!diostream-&gt;inbuffer-&gt;IsBlocked())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00664"/>00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00665"/>00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(diostream-&gt;readcache[diostream-&gt;indexport].GetSize())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00666"/>00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00667"/>00667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diostream-&gt;inbuffer-&gt;Add(diostream-&gt;readcache[diostream-&gt;indexport]);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00668"/>00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diostream-&gt;readcache[diostream-&gt;indexport].Delete();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00669"/>00669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00670"/>00670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00671"/>00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00672"/>00672 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00673"/>00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!diostream-&gt;IsBlockWrite())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00674"/>00674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00675"/>00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!diostream-&gt;outbuffer-&gt;IsBlocked())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00676"/>00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00677"/>00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;esize&#32;=&#32;diostream-&gt;outbuffer-&gt;GetSize();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00678"/>00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(esize&gt;<link linkend="__d_i_o_stream_8h_1aad641424d597536a03a19645768c03b4">DIOSTREAM_MAXBUFFER</link>)&#32;esize&#32;=&#32;<link linkend="__d_i_o_stream_8h_1aad641424d597536a03a19645768c03b4">DIOSTREAM_MAXBUFFER</link>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00679"/>00679 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00680"/>00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(esize)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00681"/>00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00682"/>00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diostream-&gt;outbuffer-&gt;Extract(diostream-&gt;writebuffer,&#32;0,&#32;esize);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00683"/>00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diostream-&gt;WriteDirect(diostream-&gt;writebuffer,&#32;esize);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00684"/>00684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00685"/>00685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00686"/>00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00687"/>00687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00688"/>00688 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00689"/>00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001af6de7ed7f61ddcd53175bcbb14184d45">DIOSTREAMSPI_FSMSTATE_DISCONNECTING</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00690"/>00690 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00691"/>00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00692"/>00692 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00693"/>00693 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00694"/>00694 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00695"/>00695 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(diostream-&gt;GetEvent()&lt;<link linkend="__d_i_o_stream_s_p_i_8h_1a96f3118de28a5ccd7be2a6a110eeb2d6aa63b55580596a09156afe52647c9d83e">DIOSTREAMSPI_LASTEVENT</link>)
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00696"/>00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00697"/>00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diostream-&gt;CheckTransition();
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00698"/>00698 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00699"/>00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(diostream-&gt;GetCurrentState())
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00700"/>00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00701"/>00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001acec6009b55cc197b9942b8059f7a8628">DIOSTREAMSPI_FSMSTATE_NONE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00702"/>00702 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00703"/>00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001a52592631ab3ce1eb8db4d848bb5160cd">DIOSTREAMSPI_FSMSTATE_CONNECTED</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;{&#32;<link linkend="_class_d_i_o_s_t_r_e_a_m_x_e_v_e_n_t">DIOSTREAMXEVENT</link>&#32;xevent(diostream,<link linkend="__d_i_o_stream_x_event_8h_1a03855c794a83f8d6c636156f111c4829a51978d78ab30f0f5237c9d2b78a80a85">DIOSTREAMXEVENT_TYPE_CONNECTED</link>);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00704"/>00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xevent.SetDIOStream(diostream);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00705"/>00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diostream-&gt;PostEvent(&amp;xevent);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00706"/>00706 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00707"/>00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diostream-&gt;SetEvent(<link linkend="__d_i_o_stream_s_p_i_8h_1a96f3118de28a5ccd7be2a6a110eeb2d6aa43450cd41560243c1fd4b283e7641ba">DIOSTREAMSPI_FSMEVENT_WAITINGTOREAD</link>);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00708"/>00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00709"/>00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00710"/>00710 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00711"/>00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001a883a5c754686098ba72e32dd415c0297">DIOSTREAMSPI_FSMSTATE_WAITINGTOREAD</link>&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00712"/>00712 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00713"/>00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_stream_s_p_i_8h_1a98dc9f915c8f11e2899898cf195d3001af6de7ed7f61ddcd53175bcbb14184d45">DIOSTREAMSPI_FSMSTATE_DISCONNECTING</link>&#32;&#32;&#32;&#32;&#32;&#32;:&#32;{&#32;<link linkend="_class_d_i_o_s_t_r_e_a_m_x_e_v_e_n_t">DIOSTREAMXEVENT</link>&#32;xevent(diostream,<link linkend="__d_i_o_stream_x_event_8h_1a03855c794a83f8d6c636156f111c4829ae953bc0973c4cdebf1b26ed06c424b52">DIOSTREAMXEVENT_TYPE_DISCONNECTED</link>);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00714"/>00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xevent.SetDIOStream(diostream);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00715"/>00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diostream-&gt;PostEvent(&amp;xevent);
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00716"/>00716 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00717"/>00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diostream-&gt;status&#32;=&#32;<link linkend="__d_i_o_stream_8h_1ad10214ba9a07bd0f22017499f6f59a0fa516b51b4debec043e34f66f0d4710fa2">DIOSTREAMSTATUS_DISCONNECTED</link>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00718"/>00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00719"/>00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00720"/>00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00721"/>00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00722"/>00722 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00723"/>00723 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00724"/>00724 &#32;&#32;<emphasis role="comment">//HAL_NVIC_EnableIRQ(TIM3_IRQn);</emphasis>
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00725"/>00725 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00726"/>00726 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00727"/>00727 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00728"/>00728 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00739"/>00739 <emphasis role="keywordtype">void</emphasis>&#32;DIOESP32STREAMSPI::Clean()
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00740"/>00740 {
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00741"/>00741 &#32;&#32;hspi&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00742"/>00742 &#32;&#32;localaddress&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00743"/>00743 &#32;&#32;remoteaddress&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00744"/>00744 &#32;&#32;threadconnection&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00745"/>00745 &#32;&#32;indexhandle&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;-1;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00746"/>00746 &#32;&#32;indexport&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;-1;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00747"/>00747 &#32;&#32;sizebufferdata&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00748"/>00748 }
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00749"/>00749 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00750"/>00750 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00751"/>00751 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00752"/>00752 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00753"/>00753 
<anchor xml:id="__d_i_o_e_s_p32_stream_s_p_i_8cpp_source_1l00754"/>00754 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
