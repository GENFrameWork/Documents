<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_l_i_n_u_x_trace_8cpp_source" xml:lang="en-US">
<title>XLINUXTrace.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Platforms/Linux/XLINUXTrace.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;INCLUDES&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;region&#32;PRECOMPILATION_INCLUDES</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00031"/>00031 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00036"/>00036 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">#ifdef&#32;XTRACE_ACTIVE</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00038"/>00038 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00039"/>00039 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00040"/>00040 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00041"/>00041 <emphasis role="preprocessor">#pragma&#32;region&#32;INCLUDES</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00042"/>00042 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_l_i_n_u_x_trace_8h">XLINUXTrace.h</link>&quot;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00044"/>00044 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00046"/>00046 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00047"/>00047 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00048"/>00048 <emphasis role="preprocessor">#include&#32;&lt;unistd.h&gt;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00049"/>00049 <emphasis role="preprocessor">#include&#32;&lt;signal.h&gt;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00050"/>00050 <emphasis role="preprocessor">#include&#32;&lt;arpa/inet.h&gt;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00051"/>00051 <emphasis role="preprocessor">#include&#32;&lt;netdb.h&gt;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00052"/>00052 <emphasis role="preprocessor">#include&#32;&lt;fcntl.h&gt;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00053"/>00053 <emphasis role="preprocessor">#include&#32;&lt;sys/types.h&gt;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00054"/>00054 <emphasis role="preprocessor">#include&#32;&lt;sys/stat.h&gt;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00055"/>00055 <emphasis role="preprocessor">#include&#32;&lt;sys/socket.h&gt;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00056"/>00056 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00057"/>00057 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_base_8h">XBase.h</link>&quot;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00058"/>00058 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_buffer_8h">XBuffer.h</link>&quot;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00059"/>00059 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00060"/>00060 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_l_i_n_u_x_system_8h">XLINUXSystem.h</link>&quot;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00061"/>00061 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_l_i_n_u_x_date_time_8h">XLINUXDateTime.h</link>&quot;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00062"/>00062 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00063"/>00063 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__d_i_o_u_r_l_8h">DIOURL.h</link>&quot;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00064"/>00064 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00065"/>00065 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00066"/>00066 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00067"/>00067 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00068"/>00068 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00069"/>00069 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00070"/>00070 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00071"/>00071 <emphasis role="preprocessor">#pragma&#32;region&#32;GENERAL_VARIABLE</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00072"/>00072 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00073"/>00073 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00074"/>00074 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00075"/>00075 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00076"/>00076 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00077"/>00077 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_MEMBERS</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00078"/>00078 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00079"/>00079 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00089"/>00089 XLINUXTRACE::XLINUXTRACE()
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00090"/>00090 {
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00091"/>00091 &#32;&#32;Clean();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00092"/>00092 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00093"/>00093 &#32;&#32;<link linkend="_class_x_t_r_a_c_e_1a04118236a45633e3dec5e02aeafb63ba">XTRACE::instance</link>&#32;=&#32;<emphasis role="keyword">this</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00094"/>00094 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00095"/>00095 &#32;&#32;pthread_mutexattr_init(&amp;attr);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00096"/>00096 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!pthread_mutex_init(&amp;mutex,&#32;&amp;attr))&#32;mutexhandle&#32;=&#32;1;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00097"/>00097 }
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00098"/>00098 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00099"/>00099 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00110"/>00110 XLINUXTRACE::~XLINUXTRACE()
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00111"/>00111 {
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00112"/>00112 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(mutexhandle)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;pthread_mutex_destroy(&amp;mutex);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;mutexhandle&#32;=&#32;0;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00117"/>00117 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00118"/>00118 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;<link linkend="__x_trace_8h_1af199f7131d82a501867d0d3f6452f7db">XTRACE_MAXNTARGETS</link>;&#32;c++)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(targets[c].GetType()&#32;==&#32;<link linkend="__x_trace_8h_1a88bdf656519efb17e41d3ad15c75a013a1e2d09705c349c4425c57253e15998a2">XTRACE_TYPE_NET</link>)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CloseHandleNet(&amp;targets[c]);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00125"/>00125 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00126"/>00126 &#32;&#32;Clean();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00127"/>00127 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00128"/>00128 &#32;&#32;<link linkend="_class_x_t_r_a_c_e_1a04118236a45633e3dec5e02aeafb63ba">XTRACE::instance</link>&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00129"/>00129 }
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00130"/>00130 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00131"/>00131 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00145"/>00145 <emphasis role="keywordtype">void</emphasis>&#32;XLINUXTRACE::PrintSpecial(<link linkend="_class_x_t_r_a_c_e___t_a_r_g_e_t">XTRACE_TARGET</link>*&#32;target,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;level,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;<emphasis role="keywordtype">string</emphasis>)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00146"/>00146 {
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00147"/>00147 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!target)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00148"/>00148 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!target-&gt;<link linkend="_class_x_t_r_a_c_e___t_a_r_g_e_t_1a2b803e6b893de0066b02d281342bf470">GetAim</link>()[0])&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00149"/>00149 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00150"/>00150 &#32;&#32;Lock();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00151"/>00151 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00152"/>00152 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;&#32;_aim;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00153"/>00153 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;&#32;aim[<link linkend="__x_base_8h_1aa6f778be0fa978c63a163140b58c7a77">_MAXPATH</link>];
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00154"/>00154 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;filehdl&#32;=&#32;-1;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00155"/>00155 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;size&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00156"/>00156 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00157"/>00157 &#32;&#32;memset(aim,&#32;0,&#32;<link linkend="__x_base_8h_1aa6f778be0fa978c63a163140b58c7a77">_MAXPATH</link>);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00158"/>00158 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00159"/>00159 &#32;&#32;_aim.<link linkend="_class_x_s_t_r_i_n_g_1a4e97e075650e9bc8cfb7deb28e4c9ce4">Set</link>(target-&gt;<link linkend="_class_x_t_r_a_c_e___t_a_r_g_e_t_1a2b803e6b893de0066b02d281342bf470">GetAim</link>());
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00160"/>00160 &#32;&#32;_aim.<link linkend="_class_x_s_t_r_i_n_g_1a13b691e56cfd5c48184c2ae6cf607914">ConvertToUTF8</link>(aim,&#32;size);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00161"/>00161 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00162"/>00162 &#32;&#32;signal(SIGPIPE,SIG_IGN);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00163"/>00163 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00164"/>00164 &#32;&#32;filehdl&#32;=&#32;open((<emphasis role="keywordtype">char</emphasis>*)aim,&#32;O_RDWR&#32;|&#32;O_NONBLOCK);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00165"/>00165 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(filehdl&#32;==&#32;-1)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(mkfifo((<emphasis role="keywordtype">char</emphasis>*)aim,&#32;0777&#32;<emphasis role="comment">/*S_IRUSR&#32;|&#32;S_IWUSR*/</emphasis>)!=0)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00168"/>00168 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;filehdl&#32;=&#32;open((<emphasis role="keywordtype">char</emphasis>*)aim,&#32;O_RDWR&#32;|&#32;O_NONBLOCK);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(filehdl&#32;==&#32;-1)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UnLock();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00176"/>00176 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00177"/>00177 &#32;&#32;<emphasis role="comment">//&#32;Not&#32;Limit&#32;of&#32;Size&#32;...</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00178"/>00178 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00179"/>00179 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;line;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00180"/>00180 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00181"/>00181 &#32;&#32;line&#32;=&#32;string;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00182"/>00182 &#32;&#32;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00183"/>00183 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;charstr;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00184"/>00184 &#32;&#32;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00185"/>00185 &#32;&#32;line.<link linkend="_class_x_s_t_r_i_n_g_1acdbd12d83c920cfa06ac0ac1770adc29">ConvertToASCII</link>(charstr);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00186"/>00186 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00187"/>00187 &#32;&#32;write(filehdl,&#32;charstr.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;line.<link linkend="_class_x_s_t_r_i_n_g_1a7c3fa0dd7b650399470c76192fbd4916">GetSize</link>());&#32;&#32;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00188"/>00188 &#32;&#32;write(filehdl,<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;\n\r&quot;</emphasis>),2);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00189"/>00189 &#32;&#32;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00190"/>00190 &#32;&#32;fsync(filehdl);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00191"/>00191 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00192"/>00192 &#32;&#32;close(filehdl);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00193"/>00193 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00194"/>00194 &#32;&#32;UnLock();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00195"/>00195 }
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00196"/>00196 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00197"/>00197 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00211"/>00211 <emphasis role="keywordtype">void</emphasis>&#32;XLINUXTRACE::PrintFile(<link linkend="_class_x_t_r_a_c_e___t_a_r_g_e_t">XTRACE_TARGET</link>*&#32;target,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;level,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;<emphasis role="keywordtype">string</emphasis>)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00212"/>00212 {
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00213"/>00213 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!target)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00214"/>00214 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!target-&gt;<link linkend="_class_x_t_r_a_c_e___t_a_r_g_e_t_1a2b803e6b893de0066b02d281342bf470">GetAim</link>()[0])&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00215"/>00215 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00216"/>00216 &#32;&#32;Lock();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00217"/>00217 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00218"/>00218 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;&#32;_aim;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00219"/>00219 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;&#32;aim[<link linkend="__x_base_8h_1aa6f778be0fa978c63a163140b58c7a77">_MAXPATH</link>];
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00220"/>00220 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;&#32;_mode;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00221"/>00221 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;&#32;mode[32];
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00222"/>00222 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;&#32;line;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00223"/>00223 &#32;&#32;FILE*&#32;&#32;&#32;&#32;file;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00224"/>00224 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;0;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00225"/>00225 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00226"/>00226 &#32;&#32;_aim.<link linkend="_class_x_s_t_r_i_n_g_1a4e97e075650e9bc8cfb7deb28e4c9ce4">Set</link>(target-&gt;<link linkend="_class_x_t_r_a_c_e___t_a_r_g_e_t_1a2b803e6b893de0066b02d281342bf470">GetAim</link>());
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00227"/>00227 &#32;&#32;_aim.<link linkend="_class_x_s_t_r_i_n_g_1a13b691e56cfd5c48184c2ae6cf607914">ConvertToUTF8</link>(aim,&#32;size);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00228"/>00228 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00229"/>00229 &#32;&#32;_mode.<link linkend="_class_x_s_t_r_i_n_g_1a4e97e075650e9bc8cfb7deb28e4c9ce4">Set</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;at&quot;</emphasis>));
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00230"/>00230 &#32;&#32;_mode.<link linkend="_class_x_s_t_r_i_n_g_1a13b691e56cfd5c48184c2ae6cf607914">ConvertToUTF8</link>(mode,size);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00231"/>00231 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00232"/>00232 &#32;&#32;file=fopen((<emphasis role="keywordtype">char</emphasis>*)aim,&#32;(<emphasis role="keywordtype">char</emphasis>*)mode);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00233"/>00233 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!file)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;UnLock();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00238"/>00238 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00239"/>00239 &#32;&#32;<emphasis role="comment">//&#32;---&#32;Check&#32;File&#32;size&#32;--------------</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00240"/>00240 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00241"/>00241 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sizefile&#32;=&#32;0;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00242"/>00242 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00243"/>00243 &#32;&#32;fflush(file);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00244"/>00244 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00245"/>00245 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;position&#32;=&#32;ftell(file);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00246"/>00246 &#32;&#32;fseek(file,0,SEEK_END);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00247"/>00247 &#32;&#32;sizefile&#32;=&#32;ftell(file);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00248"/>00248 &#32;&#32;fseek(file,position,SEEK_SET);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00249"/>00249 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00250"/>00250 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((sizefile+(<emphasis role="keywordtype">int</emphasis>)line.<link linkend="_class_x_s_t_r_i_n_g_1a7c3fa0dd7b650399470c76192fbd4916">GetSize</link>())&gt;sizelimit)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;fclose(file);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00253"/>00253 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(unlink((<emphasis role="keywordtype">char</emphasis>*)target)==-1)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;a=0;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a++;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00259"/>00259 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;file=fopen((<emphasis role="keywordtype">char</emphasis>*)target,(<emphasis role="keywordtype">char</emphasis>*)mode);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!file)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UnLock();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00267"/>00267 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00268"/>00268 &#32;&#32;line&#32;=&#32;string;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00269"/>00269 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00270"/>00270 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;charstr;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00271"/>00271 &#32;&#32;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00272"/>00272 &#32;&#32;line.<link linkend="_class_x_s_t_r_i_n_g_1acdbd12d83c920cfa06ac0ac1770adc29">ConvertToASCII</link>(charstr);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00273"/>00273 &#32;&#32;fwrite(charstr.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;1,&#32;line.<link linkend="_class_x_s_t_r_i_n_g_1a7c3fa0dd7b650399470c76192fbd4916">GetSize</link>(),&#32;file);&#32;&#32;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00274"/>00274 &#32;&#32;fwrite(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;\n\r&quot;</emphasis>),1,1,file);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00275"/>00275 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00276"/>00276 &#32;&#32;fclose(file);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00277"/>00277 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00278"/>00278 &#32;&#32;UnLock();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00279"/>00279 }
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00280"/>00280 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00281"/>00281 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00295"/>00295 <emphasis role="keywordtype">void</emphasis>&#32;XLINUXTRACE::PrintNet(<link linkend="_class_x_t_r_a_c_e___t_a_r_g_e_t">XTRACE_TARGET</link>*&#32;target,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;level,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;<emphasis role="keywordtype">string</emphasis>)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00296"/>00296 {
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00297"/>00297 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!target)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00298"/>00298 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00299"/>00299 <emphasis role="preprocessor">&#32;&#32;#if(defined(DIO_ACTIVE)&#32;&amp;&amp;&#32;defined(DIO_STREAMUDP_ACTIVE))</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00300"/>00300 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00301"/>00301 &#32;&#32;Lock();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00302"/>00302 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00303"/>00303 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbufferpacket(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00304"/>00304 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00305"/>00305 &#32;&#32;xdatetime.Read();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00306"/>00306 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00307"/>00307 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;XTRACE_NOINTERNET</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00308"/>00308 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;publicIP&#32;=&#32;0;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00309"/>00309 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00310"/>00310 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00311"/>00311 &#32;&#32;SetTraceTextToXBuffer(publicIP,&#32;localIP,&#32;level,&#32;sequence,&#32;&amp;xdatetime,&#32;&#32;<emphasis role="keywordtype">string</emphasis>,&#32;xbufferpacket);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00312"/>00312 &#32;&#32;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00313"/>00313 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;handle&#32;=&#32;(int)target-&gt;GetNETHandle();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00314"/>00314 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00315"/>00315 &#32;&#32;send(handle,(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)xbufferpacket.Get(),&#32;xbufferpacket.GetSize(),&#32;0);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00316"/>00316 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00317"/>00317 &#32;&#32;target-&gt;<link linkend="_class_x_t_r_a_c_e___t_a_r_g_e_t_1a4daec3ccd1c6094d28f8bfed49be3d24">AddNSendings</link>();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00318"/>00318 &#32;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00319"/>00319 &#32;&#32;UnLock();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00320"/>00320 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00321"/>00321 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00322"/>00322 }
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00323"/>00323 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00324"/>00324 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00336"/>00336 <emphasis role="keywordtype">bool</emphasis>&#32;XLINUXTRACE::GetHandleNet(<link linkend="_class_x_t_r_a_c_e___t_a_r_g_e_t">XTRACE_TARGET</link>*&#32;target)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00337"/>00337 {
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00338"/>00338 <emphasis role="preprocessor">&#32;&#32;#if(defined(DIO_ACTIVE)&#32;&amp;&amp;&#32;defined(DIO_STREAMUDP_ACTIVE))</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00339"/>00339 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00340"/>00340 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in&#32;&#32;addr;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00341"/>00341 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00342"/>00342 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00343"/>00343 &#32;&#32;memset(&amp;addr,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;sockaddr));
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00344"/>00344 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00345"/>00345 &#32;&#32;handle&#32;=&#32;socket(AF_INET,&#32;SOCK_DGRAM,&#32;0);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00346"/>00346 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(handle&#32;&lt;&#32;0)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00347"/>00347 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00348"/>00348 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!target-&gt;GetIP()[0])&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00349"/>00349 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00350"/>00350 &#32;&#32;addr.sin_family&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;AF_INET;&#32;&#32;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00351"/>00351 &#32;&#32;addr.sin_port&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;htons(target-&gt;GetPort());
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00352"/>00352 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00353"/>00353 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(target-&gt;GetIP()[0]&#32;==&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00354"/>00354 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;addr.sin_addr.s_addr&#32;=&#32;&#32;htonl(INADDR_BROADCAST);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00356"/>00356 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;yes&#32;=&#32;1;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;setsockopt(handle,&#32;SOL_SOCKET,&#32;SO_BROADCAST,&#32;(<emphasis role="keywordtype">char</emphasis>*)&amp;yes,&#32;<emphasis role="keyword">sizeof</emphasis>(yes));
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00360"/>00360 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;addr.sin_addr.s_addr&#32;&#32;=&#32;inet_addr(target-&gt;GetIP());
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00364"/>00364 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00365"/>00365 &#32;&#32;connect(handle,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr*)&amp;addr,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;sockaddr));
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00366"/>00366 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00367"/>00367 &#32;&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;NEThandle&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)handle;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00368"/>00368 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00369"/>00369 &#32;&#32;target-&gt;SetNETHandle(NEThandle);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00370"/>00370 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00371"/>00371 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00372"/>00372 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00373"/>00373 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00374"/>00374 }
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00375"/>00375 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00376"/>00376 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00388"/>00388 <emphasis role="keywordtype">bool</emphasis>&#32;XLINUXTRACE::CloseHandleNet(<link linkend="_class_x_t_r_a_c_e___t_a_r_g_e_t">XTRACE_TARGET</link>*&#32;target)
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00389"/>00389 {
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00390"/>00390 <emphasis role="preprocessor">&#32;&#32;#if(defined(DIO_ACTIVE)&#32;&amp;&amp;&#32;defined(DIO_STREAMUDP_ACTIVE))</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00391"/>00391 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00392"/>00392 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;handle&#32;=&#32;(int)target-&gt;GetNETHandle();
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00393"/>00393 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!handle)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00394"/>00394 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00395"/>00395 &#32;&#32;close(handle);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00396"/>00396 &#32;&#32;target-&gt;SetNETHandle(0);
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00397"/>00397 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00398"/>00398 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00399"/>00399 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00400"/>00400 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00401"/>00401 }
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00402"/>00402 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00403"/>00403 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00413"/>00413 <emphasis role="keywordtype">bool</emphasis>&#32;XLINUXTRACE::Lock()
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00414"/>00414 {
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00415"/>00415 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mutexhandle)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00416"/>00416 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pthread_mutex_lock(&amp;mutex))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00417"/>00417 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00418"/>00418 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00419"/>00419 }
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00420"/>00420 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00421"/>00421 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00431"/>00431 <emphasis role="keywordtype">bool</emphasis>&#32;XLINUXTRACE::UnLock()
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00432"/>00432 {
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00433"/>00433 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mutexhandle)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00434"/>00434 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pthread_mutex_unlock(&amp;mutex))&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00435"/>00435 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00436"/>00436 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00437"/>00437 }
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00438"/>00438 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00439"/>00439 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00440"/>00440 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00441"/>00441 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00442"/>00442 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00443"/>00443 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00444"/>00444 
<anchor xml:id="__x_l_i_n_u_x_trace_8cpp_source_1l00445"/>00445 
</programlisting></section>
