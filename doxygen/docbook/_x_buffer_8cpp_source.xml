<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_buffer_8cpp_source" xml:lang="en-US">
<title>XBuffer.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/XUtils/XBuffer.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_buffer_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_buffer_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;INCLUDES&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;region&#32;PRECOMPILATION_INCLUDES</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00031"/>00031 
<anchor xml:id="__x_buffer_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_buffer_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_buffer_8cpp_source_1l00036"/>00036 
<anchor xml:id="__x_buffer_8cpp_source_1l00037"/>00037 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#pragma&#32;region&#32;INCLUDES</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00039"/>00039 
<anchor xml:id="__x_buffer_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_buffer_8h">XBuffer.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00041"/>00041 
<anchor xml:id="__x_buffer_8cpp_source_1l00042"/>00042 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00044"/>00044 
<anchor xml:id="__x_buffer_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_factory_8h">XFactory.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00046"/>00046 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_rand_8h">XRand.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00047"/>00047 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_timer_8h">XTimer.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00048"/>00048 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_variant_8h">XVariant.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00049"/>00049 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_system_8h">XSystem.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00050"/>00050 
<anchor xml:id="__x_buffer_8cpp_source_1l00051"/>00051 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00052"/>00052 
<anchor xml:id="__x_buffer_8cpp_source_1l00053"/>00053 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00054"/>00054 
<anchor xml:id="__x_buffer_8cpp_source_1l00055"/>00055 
<anchor xml:id="__x_buffer_8cpp_source_1l00056"/>00056 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00057"/>00057 <emphasis role="preprocessor">#pragma&#32;region&#32;GENERAL_VARIABLE</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00058"/>00058 
<anchor xml:id="__x_buffer_8cpp_source_1l00059"/>00059 <emphasis role="keywordtype">bool</emphasis>&#32;XBUFFER::globalhardwareuselittleendian&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00060"/>00060 
<anchor xml:id="__x_buffer_8cpp_source_1l00061"/>00061 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00062"/>00062 
<anchor xml:id="__x_buffer_8cpp_source_1l00063"/>00063 
<anchor xml:id="__x_buffer_8cpp_source_1l00064"/>00064 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00065"/>00065 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_MEMBERS</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00066"/>00066 
<anchor xml:id="__x_buffer_8cpp_source_1l00067"/>00067 
<anchor xml:id="__x_buffer_8cpp_source_1l00079"/><link linkend="_class_x_b_u_f_f_e_r_1a2e296544fb75464eee353628614b4aff">00079</link> <link linkend="_class_x_b_u_f_f_e_r_1a2e296544fb75464eee353628614b4aff">XBUFFER::XBUFFER</link>(<emphasis role="keywordtype">bool</emphasis>&#32;threadsafe)
<anchor xml:id="__x_buffer_8cpp_source_1l00080"/>00080 {
<anchor xml:id="__x_buffer_8cpp_source_1l00081"/>00081 &#32;&#32;Clean();
<anchor xml:id="__x_buffer_8cpp_source_1l00082"/>00082 
<anchor xml:id="__x_buffer_8cpp_source_1l00083"/>00083 &#32;&#32;localhardwareuselittleendian&#32;=&#32;globalhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l00084"/>00084 
<anchor xml:id="__x_buffer_8cpp_source_1l00085"/>00085 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(threadsafe)&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;GEN_XFACTORY_CREATE(xmutex,&#32;Create_Mutex())
<anchor xml:id="__x_buffer_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00089"/>00089 }
<anchor xml:id="__x_buffer_8cpp_source_1l00090"/>00090 
<anchor xml:id="__x_buffer_8cpp_source_1l00091"/>00091 
<anchor xml:id="__x_buffer_8cpp_source_1l00104"/><link linkend="_class_x_b_u_f_f_e_r_1a593dee9525f83015b2e5a1977895b26e">00104</link> <link linkend="_class_x_b_u_f_f_e_r_1a2e296544fb75464eee353628614b4aff">XBUFFER::XBUFFER</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;threadsafe)
<anchor xml:id="__x_buffer_8cpp_source_1l00105"/>00105 {
<anchor xml:id="__x_buffer_8cpp_source_1l00106"/>00106 &#32;&#32;Clean();
<anchor xml:id="__x_buffer_8cpp_source_1l00107"/>00107 
<anchor xml:id="__x_buffer_8cpp_source_1l00108"/>00108 &#32;&#32;localhardwareuselittleendian&#32;=&#32;globalhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l00109"/>00109 
<anchor xml:id="__x_buffer_8cpp_source_1l00110"/>00110 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(threadsafe)&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;GEN_XFACTORY_CREATE(xmutex,&#32;Create_Mutex())
<anchor xml:id="__x_buffer_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00114"/>00114 
<anchor xml:id="__x_buffer_8cpp_source_1l00115"/>00115 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1acf69e379f1d0bf812ae9c1157eac172c">Resize</link>(size);
<anchor xml:id="__x_buffer_8cpp_source_1l00116"/>00116 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a8a6897988fdcf361b48b20497933d911">FillBuffer</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l00117"/>00117 }
<anchor xml:id="__x_buffer_8cpp_source_1l00118"/>00118 
<anchor xml:id="__x_buffer_8cpp_source_1l00119"/>00119 
<anchor xml:id="__x_buffer_8cpp_source_1l00131"/><link linkend="_class_x_b_u_f_f_e_r_1a021869d26912c285eeb06585ef2a7432">00131</link> <link linkend="_class_x_b_u_f_f_e_r_1a2e296544fb75464eee353628614b4aff">XBUFFER::XBUFFER</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer)
<anchor xml:id="__x_buffer_8cpp_source_1l00132"/>00132 {
<anchor xml:id="__x_buffer_8cpp_source_1l00133"/>00133 &#32;&#32;Clean();
<anchor xml:id="__x_buffer_8cpp_source_1l00134"/>00134 
<anchor xml:id="__x_buffer_8cpp_source_1l00135"/>00135 &#32;&#32;localhardwareuselittleendian&#32;=&#32;globalhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l00136"/>00136 
<anchor xml:id="__x_buffer_8cpp_source_1l00137"/>00137 &#32;&#32;GEN_XFACTORY_CREATE(xmutex,&#32;Create_Mutex())
<anchor xml:id="__x_buffer_8cpp_source_1l00138"/>00138 
<anchor xml:id="__x_buffer_8cpp_source_1l00139"/>00139 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1afc53f10185dc4d03cb99dfa959de19d1">CopyFrom</link>((<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;)xbuffer);
<anchor xml:id="__x_buffer_8cpp_source_1l00140"/>00140 }
<anchor xml:id="__x_buffer_8cpp_source_1l00141"/>00141 
<anchor xml:id="__x_buffer_8cpp_source_1l00142"/>00142 
<anchor xml:id="__x_buffer_8cpp_source_1l00152"/><link linkend="_class_x_b_u_f_f_e_r_1a27254972c15da655bc2b20a47f267d33">00152</link> <link linkend="_class_x_b_u_f_f_e_r_1a27254972c15da655bc2b20a47f267d33">XBUFFER::~XBUFFER</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l00153"/>00153 {
<anchor xml:id="__x_buffer_8cpp_source_1l00154"/>00154 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a0395231705663a2aeeee3b4be9d292bb">Delete</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l00155"/>00155 
<anchor xml:id="__x_buffer_8cpp_source_1l00156"/>00156 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(xmutex)&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;GEN_XFACTORY.Delete_Mutex(xmutex);
<anchor xml:id="__x_buffer_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00160"/>00160 
<anchor xml:id="__x_buffer_8cpp_source_1l00161"/>00161 &#32;&#32;Clean();
<anchor xml:id="__x_buffer_8cpp_source_1l00162"/>00162 }
<anchor xml:id="__x_buffer_8cpp_source_1l00163"/>00163 
<anchor xml:id="__x_buffer_8cpp_source_1l00164"/>00164 
<anchor xml:id="__x_buffer_8cpp_source_1l00174"/><link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">00174</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">XBUFFER::GetSize</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l00175"/>00175 {
<anchor xml:id="__x_buffer_8cpp_source_1l00176"/>00176 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00177"/>00177 
<anchor xml:id="__x_buffer_8cpp_source_1l00178"/>00178 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;rsize&#32;=&#32;size;
<anchor xml:id="__x_buffer_8cpp_source_1l00179"/>00179 
<anchor xml:id="__x_buffer_8cpp_source_1l00180"/>00180 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00181"/>00181 
<anchor xml:id="__x_buffer_8cpp_source_1l00182"/>00182 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rsize;
<anchor xml:id="__x_buffer_8cpp_source_1l00183"/>00183 }
<anchor xml:id="__x_buffer_8cpp_source_1l00184"/>00184 
<anchor xml:id="__x_buffer_8cpp_source_1l00185"/>00185 
<anchor xml:id="__x_buffer_8cpp_source_1l00197"/><link linkend="_class_x_b_u_f_f_e_r_1a6bd4541f3a87cb76a2261817538d0edc">00197</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a6bd4541f3a87cb76a2261817538d0edc">XBUFFER::SetSize</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size)
<anchor xml:id="__x_buffer_8cpp_source_1l00198"/>00198 {
<anchor xml:id="__x_buffer_8cpp_source_1l00199"/>00199 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00200"/>00200 
<anchor xml:id="__x_buffer_8cpp_source_1l00201"/>00201 &#32;&#32;this-&gt;size&#32;=&#32;size;
<anchor xml:id="__x_buffer_8cpp_source_1l00202"/>00202 
<anchor xml:id="__x_buffer_8cpp_source_1l00203"/>00203 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00204"/>00204 
<anchor xml:id="__x_buffer_8cpp_source_1l00205"/>00205 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00206"/>00206 }
<anchor xml:id="__x_buffer_8cpp_source_1l00207"/>00207 
<anchor xml:id="__x_buffer_8cpp_source_1l00208"/>00208 
<anchor xml:id="__x_buffer_8cpp_source_1l00218"/><link linkend="_class_x_b_u_f_f_e_r_1a0007f465be1385ea663397e502c5280e">00218</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a0007f465be1385ea663397e502c5280e">XBUFFER::IsEmpty</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l00219"/>00219 {
<anchor xml:id="__x_buffer_8cpp_source_1l00220"/>00220 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>())?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00221"/>00221 }
<anchor xml:id="__x_buffer_8cpp_source_1l00222"/>00222 
<anchor xml:id="__x_buffer_8cpp_source_1l00223"/>00223 
<anchor xml:id="__x_buffer_8cpp_source_1l00233"/><link linkend="_class_x_b_u_f_f_e_r_1acbb14d5aac8e81471ed2119e3dff2eca">00233</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1acbb14d5aac8e81471ed2119e3dff2eca">XBUFFER::ResetPosition</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l00234"/>00234 {
<anchor xml:id="__x_buffer_8cpp_source_1l00235"/>00235 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1acff899b0385a3d04c1a26d463647ab07">SetPosition</link>(0);
<anchor xml:id="__x_buffer_8cpp_source_1l00236"/>00236 }
<anchor xml:id="__x_buffer_8cpp_source_1l00237"/>00237 
<anchor xml:id="__x_buffer_8cpp_source_1l00238"/>00238 
<anchor xml:id="__x_buffer_8cpp_source_1l00248"/><link linkend="_class_x_b_u_f_f_e_r_1a2cea18563b3d0b687377f101ca1b42be">00248</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2cea18563b3d0b687377f101ca1b42be">XBUFFER::GetPosition</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l00249"/>00249 {
<anchor xml:id="__x_buffer_8cpp_source_1l00250"/>00250 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l00251"/>00251 }
<anchor xml:id="__x_buffer_8cpp_source_1l00252"/>00252 
<anchor xml:id="__x_buffer_8cpp_source_1l00253"/>00253 
<anchor xml:id="__x_buffer_8cpp_source_1l00265"/><link linkend="_class_x_b_u_f_f_e_r_1acff899b0385a3d04c1a26d463647ab07">00265</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1acff899b0385a3d04c1a26d463647ab07">XBUFFER::SetPosition</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;position)
<anchor xml:id="__x_buffer_8cpp_source_1l00266"/>00266 {
<anchor xml:id="__x_buffer_8cpp_source_1l00267"/>00267 &#32;&#32;this-&gt;position&#32;=&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l00268"/>00268 
<anchor xml:id="__x_buffer_8cpp_source_1l00269"/>00269 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00270"/>00270 }
<anchor xml:id="__x_buffer_8cpp_source_1l00271"/>00271 
<anchor xml:id="__x_buffer_8cpp_source_1l00272"/>00272 
<anchor xml:id="__x_buffer_8cpp_source_1l00282"/><link linkend="_class_x_b_u_f_f_e_r_1a7d9dd02f575c660481921bfcb3e11f21">00282</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7d9dd02f575c660481921bfcb3e11f21">XBUFFER::IsBlocked</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l00283"/>00283 {
<anchor xml:id="__x_buffer_8cpp_source_1l00284"/>00284 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xmutex)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00285"/>00285 
<anchor xml:id="__x_buffer_8cpp_source_1l00286"/>00286 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xmutex-&gt;<link linkend="_class_x_m_u_t_e_x_1a2573cc960a3ba8350e8bb61aa922f977">IsLock</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l00287"/>00287 }
<anchor xml:id="__x_buffer_8cpp_source_1l00288"/>00288 
<anchor xml:id="__x_buffer_8cpp_source_1l00289"/>00289 
<anchor xml:id="__x_buffer_8cpp_source_1l00301"/><link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">00301</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">XBUFFER::SetBlocked</link>(<emphasis role="keywordtype">bool</emphasis>&#32;blocked)
<anchor xml:id="__x_buffer_8cpp_source_1l00302"/>00302 {
<anchor xml:id="__x_buffer_8cpp_source_1l00303"/>00303 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xmutex)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00304"/>00304 
<anchor xml:id="__x_buffer_8cpp_source_1l00305"/>00305 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(blocked)?xmutex-&gt;<link linkend="_class_x_m_u_t_e_x_1ae6d5410f1787702c59c2eae9e8b85b74">Lock</link>():xmutex-&gt;<link linkend="_class_x_m_u_t_e_x_1afed160c15de8de926a73f4ce978f0bc0">UnLock</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l00306"/>00306 }
<anchor xml:id="__x_buffer_8cpp_source_1l00307"/>00307 
<anchor xml:id="__x_buffer_8cpp_source_1l00308"/>00308 
<anchor xml:id="__x_buffer_8cpp_source_1l00321"/><link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">00321</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;pbuffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize)
<anchor xml:id="__x_buffer_8cpp_source_1l00322"/>00322 {
<anchor xml:id="__x_buffer_8cpp_source_1l00323"/>00323 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!pbuffer)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00324"/>00324 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!psize)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00325"/>00325 
<anchor xml:id="__x_buffer_8cpp_source_1l00326"/>00326 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00327"/>00327 
<anchor xml:id="__x_buffer_8cpp_source_1l00328"/>00328 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos&#32;&#32;&#32;&#32;&#32;=&#32;size;
<anchor xml:id="__x_buffer_8cpp_source_1l00329"/>00329 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;status&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00330"/>00330 
<anchor xml:id="__x_buffer_8cpp_source_1l00331"/>00331 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_b_u_f_f_e_r_1acf69e379f1d0bf812ae9c1157eac172c">Resize</link>(size+psize,<emphasis role="keyword">false</emphasis>))
<anchor xml:id="__x_buffer_8cpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00336"/>00336 
<anchor xml:id="__x_buffer_8cpp_source_1l00337"/>00337 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(buffer&#32;&amp;&amp;&#32;(size+psize))
<anchor xml:id="__x_buffer_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&amp;buffer[ppos],&#32;pbuffer,&#32;psize);
<anchor xml:id="__x_buffer_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;status&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00340"/>00340 
<anchor xml:id="__x_buffer_8cpp_source_1l00341"/>00341 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00342"/>00342 
<anchor xml:id="__x_buffer_8cpp_source_1l00343"/>00343 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l00344"/>00344 }
<anchor xml:id="__x_buffer_8cpp_source_1l00345"/>00345 
<anchor xml:id="__x_buffer_8cpp_source_1l00346"/>00346 
<anchor xml:id="__x_buffer_8cpp_source_1l00358"/><link linkend="_class_x_b_u_f_f_e_r_1a784c3f22a2c5a4d5b7b305fdb9b038b4">00358</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>*&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l00359"/>00359 {
<anchor xml:id="__x_buffer_8cpp_source_1l00360"/>00360 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(buffer-&gt;buffer,&#32;buffer-&gt;size);
<anchor xml:id="__x_buffer_8cpp_source_1l00361"/>00361 }
<anchor xml:id="__x_buffer_8cpp_source_1l00362"/>00362 
<anchor xml:id="__x_buffer_8cpp_source_1l00363"/>00363 
<anchor xml:id="__x_buffer_8cpp_source_1l00375"/><link linkend="_class_x_b_u_f_f_e_r_1a62d933a7751ca6a851d06eef99531988">00375</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l00376"/>00376 {
<anchor xml:id="__x_buffer_8cpp_source_1l00377"/>00377 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(buffer.buffer,&#32;buffer.size);
<anchor xml:id="__x_buffer_8cpp_source_1l00378"/>00378 }
<anchor xml:id="__x_buffer_8cpp_source_1l00379"/>00379 
<anchor xml:id="__x_buffer_8cpp_source_1l00380"/>00380 
<anchor xml:id="__x_buffer_8cpp_source_1l00392"/><link linkend="_class_x_b_u_f_f_e_r_1a6bc25e337eef54e48380456e4ac4dbaa">00392</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00393"/>00393 {
<anchor xml:id="__x_buffer_8cpp_source_1l00394"/>00394 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00395"/>00395 }
<anchor xml:id="__x_buffer_8cpp_source_1l00396"/>00396 
<anchor xml:id="__x_buffer_8cpp_source_1l00397"/>00397 
<anchor xml:id="__x_buffer_8cpp_source_1l00409"/><link linkend="_class_x_b_u_f_f_e_r_1a63d29280cdee8af10624ce2a11495728">00409</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<emphasis role="keywordtype">bool</emphasis>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00410"/>00410 {
<anchor xml:id="__x_buffer_8cpp_source_1l00411"/>00411 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;_data&#32;=&#32;data?1:0;
<anchor xml:id="__x_buffer_8cpp_source_1l00412"/>00412 
<anchor xml:id="__x_buffer_8cpp_source_1l00413"/>00413 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;_data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00414"/>00414 }
<anchor xml:id="__x_buffer_8cpp_source_1l00415"/>00415 
<anchor xml:id="__x_buffer_8cpp_source_1l00416"/>00416 
<anchor xml:id="__x_buffer_8cpp_source_1l00428"/><link linkend="_class_x_b_u_f_f_e_r_1a182e445d8aa4f7deb1cfc398855a60a3">00428</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00429"/>00429 {
<anchor xml:id="__x_buffer_8cpp_source_1l00430"/>00430 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1afacb625223a89d4cdf212ac4482a7e5c">SWAPWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00431"/>00431 
<anchor xml:id="__x_buffer_8cpp_source_1l00432"/>00432 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00433"/>00433 }
<anchor xml:id="__x_buffer_8cpp_source_1l00434"/>00434 
<anchor xml:id="__x_buffer_8cpp_source_1l00435"/>00435 
<anchor xml:id="__x_buffer_8cpp_source_1l00447"/><link linkend="_class_x_b_u_f_f_e_r_1ac5af0640709a45111cebe0ac4cd4b2e5">00447</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00448"/>00448 {
<anchor xml:id="__x_buffer_8cpp_source_1l00449"/>00449 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00450"/>00450 
<anchor xml:id="__x_buffer_8cpp_source_1l00451"/>00451 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00452"/>00452 }
<anchor xml:id="__x_buffer_8cpp_source_1l00453"/>00453 
<anchor xml:id="__x_buffer_8cpp_source_1l00454"/>00454 
<anchor xml:id="__x_buffer_8cpp_source_1l00466"/><link linkend="_class_x_b_u_f_f_e_r_1a3ad0be944171dbf438a00caeedf74b4a">00466</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00467"/>00467 {
<anchor xml:id="__x_buffer_8cpp_source_1l00468"/>00468 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a0a01412990f8f070e16468914d231b68">SWAPQWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00469"/>00469 
<anchor xml:id="__x_buffer_8cpp_source_1l00470"/>00470 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00471"/>00471 }
<anchor xml:id="__x_buffer_8cpp_source_1l00472"/>00472 
<anchor xml:id="__x_buffer_8cpp_source_1l00473"/>00473 
<anchor xml:id="__x_buffer_8cpp_source_1l00485"/><link linkend="_class_x_b_u_f_f_e_r_1ab262090c9eb2d339ddf3f1a3d7c4051e">00485</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<emphasis role="keywordtype">float</emphasis>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00486"/>00486 {
<anchor xml:id="__x_buffer_8cpp_source_1l00487"/>00487 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00488"/>00488 }
<anchor xml:id="__x_buffer_8cpp_source_1l00489"/>00489 
<anchor xml:id="__x_buffer_8cpp_source_1l00490"/>00490 
<anchor xml:id="__x_buffer_8cpp_source_1l00502"/><link linkend="_class_x_b_u_f_f_e_r_1adaff3ce4c6e8f32495cd231a978e4e4f">00502</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<emphasis role="keywordtype">double</emphasis>&#32;data)
<anchor xml:id="__x_buffer_8cpp_source_1l00503"/>00503 {
<anchor xml:id="__x_buffer_8cpp_source_1l00504"/>00504 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l00505"/>00505 }
<anchor xml:id="__x_buffer_8cpp_source_1l00506"/>00506 
<anchor xml:id="__x_buffer_8cpp_source_1l00507"/>00507 
<anchor xml:id="__x_buffer_8cpp_source_1l00520"/><link linkend="_class_x_b_u_f_f_e_r_1a2afb66fc806929b80c258ef855191a16">00520</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">XBUFFER::Add</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;<emphasis role="keywordtype">string</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize)
<anchor xml:id="__x_buffer_8cpp_source_1l00521"/>00521 {
<anchor xml:id="__x_buffer_8cpp_source_1l00522"/>00522 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keywordtype">string</emphasis>.<link linkend="_class_x_b_u_f_f_e_r_1a0007f465be1385ea663397e502c5280e">IsEmpty</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00523"/>00523 
<anchor xml:id="__x_buffer_8cpp_source_1l00524"/>00524 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=0;&#32;c&lt;<emphasis role="keywordtype">string</emphasis>.GetSize();&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l00525"/>00525 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00526"/>00526 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(normalize)
<anchor xml:id="__x_buffer_8cpp_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;data&#32;=&#32;(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>)<emphasis role="keywordtype">string</emphasis>.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[c];
<anchor xml:id="__x_buffer_8cpp_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1afacb625223a89d4cdf212ac4482a7e5c">SWAPWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>)data);
<anchor xml:id="__x_buffer_8cpp_source_1l00531"/>00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l00533"/>00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00534"/>00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data&#32;=&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)<emphasis role="keywordtype">string</emphasis>.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[c];
<anchor xml:id="__x_buffer_8cpp_source_1l00535"/>00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)data);
<anchor xml:id="__x_buffer_8cpp_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00538"/>00538 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00539"/>00539 
<anchor xml:id="__x_buffer_8cpp_source_1l00540"/>00540 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00541"/>00541 }
<anchor xml:id="__x_buffer_8cpp_source_1l00542"/>00542 
<anchor xml:id="__x_buffer_8cpp_source_1l00543"/>00543 
<anchor xml:id="__x_buffer_8cpp_source_1l00556"/><link linkend="_class_x_b_u_f_f_e_r_1adb2e70fef4ba8f4f3a5be9d0b8b9a380">00556</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1adb2e70fef4ba8f4f3a5be9d0b8b9a380">XBUFFER::AddWithMaskArg</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l00557"/>00557 {
<anchor xml:id="__x_buffer_8cpp_source_1l00558"/>00558 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;AddXBufferWithMask((*<emphasis role="keyword">this</emphasis>),&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00559"/>00559 }
<anchor xml:id="__x_buffer_8cpp_source_1l00560"/>00560 
<anchor xml:id="__x_buffer_8cpp_source_1l00561"/>00561 
<anchor xml:id="__x_buffer_8cpp_source_1l00574"/><link linkend="_class_x_b_u_f_f_e_r_1a1f324254b8d5626f73387f2d8fbdb6db">00574</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1adb2e70fef4ba8f4f3a5be9d0b8b9a380">XBUFFER::AddWithMaskArg</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l00575"/>00575 {
<anchor xml:id="__x_buffer_8cpp_source_1l00576"/>00576 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;AddXBufferWithMask((*<emphasis role="keyword">this</emphasis>),&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00577"/>00577 }
<anchor xml:id="__x_buffer_8cpp_source_1l00578"/>00578 
<anchor xml:id="__x_buffer_8cpp_source_1l00579"/>00579 
<anchor xml:id="__x_buffer_8cpp_source_1l00592"/><link linkend="_class_x_b_u_f_f_e_r_1a3d876a464cae64521ca8185d7685e511">00592</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a3d876a464cae64521ca8185d7685e511">XBUFFER::AddWithMask</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l00593"/>00593 {
<anchor xml:id="__x_buffer_8cpp_source_1l00594"/>00594 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00595"/>00595 
<anchor xml:id="__x_buffer_8cpp_source_1l00596"/>00596 &#32;&#32;va_list&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l00597"/>00597 
<anchor xml:id="__x_buffer_8cpp_source_1l00598"/>00598 &#32;&#32;va_start(arg,&#32;mask);
<anchor xml:id="__x_buffer_8cpp_source_1l00599"/>00599 
<anchor xml:id="__x_buffer_8cpp_source_1l00600"/>00600 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;AddXBufferWithMask((*<emphasis role="keyword">this</emphasis>),&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00601"/>00601 
<anchor xml:id="__x_buffer_8cpp_source_1l00602"/>00602 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00603"/>00603 
<anchor xml:id="__x_buffer_8cpp_source_1l00604"/>00604 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l00605"/>00605 }
<anchor xml:id="__x_buffer_8cpp_source_1l00606"/>00606 
<anchor xml:id="__x_buffer_8cpp_source_1l00607"/>00607 
<anchor xml:id="__x_buffer_8cpp_source_1l00620"/><link linkend="_class_x_b_u_f_f_e_r_1a47d424a2632df7a89182695cab11e969">00620</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a3d876a464cae64521ca8185d7685e511">XBUFFER::AddWithMask</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l00621"/>00621 {
<anchor xml:id="__x_buffer_8cpp_source_1l00622"/>00622 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00623"/>00623 
<anchor xml:id="__x_buffer_8cpp_source_1l00624"/>00624 &#32;&#32;va_list&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l00625"/>00625 
<anchor xml:id="__x_buffer_8cpp_source_1l00626"/>00626 &#32;&#32;va_start(arg,&#32;mask);
<anchor xml:id="__x_buffer_8cpp_source_1l00627"/>00627 
<anchor xml:id="__x_buffer_8cpp_source_1l00628"/>00628 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;AddXBufferWithMask((*<emphasis role="keyword">this</emphasis>),&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00629"/>00629 
<anchor xml:id="__x_buffer_8cpp_source_1l00630"/>00630 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00631"/>00631 
<anchor xml:id="__x_buffer_8cpp_source_1l00632"/>00632 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l00633"/>00633 }
<anchor xml:id="__x_buffer_8cpp_source_1l00634"/>00634 
<anchor xml:id="__x_buffer_8cpp_source_1l00635"/>00635 
<anchor xml:id="__x_buffer_8cpp_source_1l00649"/><link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">00649</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;pbuffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00650"/>00650 {
<anchor xml:id="__x_buffer_8cpp_source_1l00651"/>00651 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!pbuffer)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00652"/>00652 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!psize)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00653"/>00653 
<anchor xml:id="__x_buffer_8cpp_source_1l00654"/>00654 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&#32;&lt;&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00655"/>00655 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&#32;&gt;=&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00656"/>00656 
<anchor xml:id="__x_buffer_8cpp_source_1l00657"/>00657 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbuffertempo;
<anchor xml:id="__x_buffer_8cpp_source_1l00658"/>00658 
<anchor xml:id="__x_buffer_8cpp_source_1l00659"/>00659 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos)&#32;xbuffertempo.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00660"/>00660 
<anchor xml:id="__x_buffer_8cpp_source_1l00661"/>00661 &#32;&#32;xbuffertempo.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(pbuffer,&#32;psize);
<anchor xml:id="__x_buffer_8cpp_source_1l00662"/>00662 &#32;&#32;xbuffertempo.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(&amp;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[frompos],&#32;(<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>()-frompos));
<anchor xml:id="__x_buffer_8cpp_source_1l00663"/>00663 
<anchor xml:id="__x_buffer_8cpp_source_1l00664"/>00664 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a3c14ba0ca9dfbf20b5127c87b275cb93">Empty</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l00665"/>00665 
<anchor xml:id="__x_buffer_8cpp_source_1l00666"/>00666 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(xbuffertempo);
<anchor xml:id="__x_buffer_8cpp_source_1l00667"/>00667 
<anchor xml:id="__x_buffer_8cpp_source_1l00668"/>00668 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00669"/>00669 }
<anchor xml:id="__x_buffer_8cpp_source_1l00670"/>00670 
<anchor xml:id="__x_buffer_8cpp_source_1l00671"/>00671 
<anchor xml:id="__x_buffer_8cpp_source_1l00684"/><link linkend="_class_x_b_u_f_f_e_r_1a0c27862280b086d0fd1c549e5eab11b9">00684</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>*&#32;xbuffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00685"/>00685 {
<anchor xml:id="__x_buffer_8cpp_source_1l00686"/>00686 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xbuffer)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00687"/>00687 
<anchor xml:id="__x_buffer_8cpp_source_1l00688"/>00688 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">Insert</link>(xbuffer-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;xbuffer-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>(),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00689"/>00689 }
<anchor xml:id="__x_buffer_8cpp_source_1l00690"/>00690 
<anchor xml:id="__x_buffer_8cpp_source_1l00691"/>00691 
<anchor xml:id="__x_buffer_8cpp_source_1l00704"/><link linkend="_class_x_b_u_f_f_e_r_1a31d2deb2159cf4a5c727c78f8ffe0457">00704</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00705"/>00705 {
<anchor xml:id="__x_buffer_8cpp_source_1l00706"/>00706 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">Insert</link>(xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>(),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00707"/>00707 }
<anchor xml:id="__x_buffer_8cpp_source_1l00708"/>00708 
<anchor xml:id="__x_buffer_8cpp_source_1l00709"/>00709 
<anchor xml:id="__x_buffer_8cpp_source_1l00722"/><link linkend="_class_x_b_u_f_f_e_r_1acfd41051801472e3835598837da9765f">00722</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00723"/>00723 {
<anchor xml:id="__x_buffer_8cpp_source_1l00724"/>00724 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">Insert</link>(&amp;data,&#32;1,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00725"/>00725 }
<anchor xml:id="__x_buffer_8cpp_source_1l00726"/>00726 
<anchor xml:id="__x_buffer_8cpp_source_1l00727"/>00727 
<anchor xml:id="__x_buffer_8cpp_source_1l00740"/><link linkend="_class_x_b_u_f_f_e_r_1a12942ad32627cde4cc996d23f0ed24c6">00740</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<emphasis role="keywordtype">bool</emphasis>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00741"/>00741 {
<anchor xml:id="__x_buffer_8cpp_source_1l00742"/>00742 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;_data&#32;=&#32;data?1:0;
<anchor xml:id="__x_buffer_8cpp_source_1l00743"/>00743 
<anchor xml:id="__x_buffer_8cpp_source_1l00744"/>00744 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">Insert</link>(&amp;_data,&#32;1,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00745"/>00745 }
<anchor xml:id="__x_buffer_8cpp_source_1l00746"/>00746 
<anchor xml:id="__x_buffer_8cpp_source_1l00747"/>00747 
<anchor xml:id="__x_buffer_8cpp_source_1l00760"/><link linkend="_class_x_b_u_f_f_e_r_1a39b556bf6d20c48257ab56ab1dab7aff">00760</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00761"/>00761 {
<anchor xml:id="__x_buffer_8cpp_source_1l00762"/>00762 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1afacb625223a89d4cdf212ac4482a7e5c">SWAPWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00763"/>00763 
<anchor xml:id="__x_buffer_8cpp_source_1l00764"/>00764 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">Insert</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00765"/>00765 }
<anchor xml:id="__x_buffer_8cpp_source_1l00766"/>00766 
<anchor xml:id="__x_buffer_8cpp_source_1l00767"/>00767 
<anchor xml:id="__x_buffer_8cpp_source_1l00780"/><link linkend="_class_x_b_u_f_f_e_r_1a8a39e753d3dc1d73c9fbf002e8f73612">00780</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00781"/>00781 {
<anchor xml:id="__x_buffer_8cpp_source_1l00782"/>00782 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00783"/>00783 
<anchor xml:id="__x_buffer_8cpp_source_1l00784"/>00784 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">Insert</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00785"/>00785 }
<anchor xml:id="__x_buffer_8cpp_source_1l00786"/>00786 
<anchor xml:id="__x_buffer_8cpp_source_1l00787"/>00787 
<anchor xml:id="__x_buffer_8cpp_source_1l00800"/><link linkend="_class_x_b_u_f_f_e_r_1a7be23879ba113109e0fdfa21355367c2">00800</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00801"/>00801 {
<anchor xml:id="__x_buffer_8cpp_source_1l00802"/>00802 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a0a01412990f8f070e16468914d231b68">SWAPQWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00803"/>00803 
<anchor xml:id="__x_buffer_8cpp_source_1l00804"/>00804 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">Insert</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00805"/>00805 }
<anchor xml:id="__x_buffer_8cpp_source_1l00806"/>00806 
<anchor xml:id="__x_buffer_8cpp_source_1l00807"/>00807 
<anchor xml:id="__x_buffer_8cpp_source_1l00820"/><link linkend="_class_x_b_u_f_f_e_r_1ac5b27b3ade2ac625cbfe8f7a5f839837">00820</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<emphasis role="keywordtype">float</emphasis>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00821"/>00821 {
<anchor xml:id="__x_buffer_8cpp_source_1l00822"/>00822 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">Insert</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00823"/>00823 }
<anchor xml:id="__x_buffer_8cpp_source_1l00824"/>00824 
<anchor xml:id="__x_buffer_8cpp_source_1l00825"/>00825 
<anchor xml:id="__x_buffer_8cpp_source_1l00838"/><link linkend="_class_x_b_u_f_f_e_r_1a93f977006651799f559ccd24ffb32f5d">00838</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<emphasis role="keywordtype">double</emphasis>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00839"/>00839 {
<anchor xml:id="__x_buffer_8cpp_source_1l00840"/>00840 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">Insert</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>),&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00841"/>00841 }
<anchor xml:id="__x_buffer_8cpp_source_1l00842"/>00842 
<anchor xml:id="__x_buffer_8cpp_source_1l00843"/>00843 
<anchor xml:id="__x_buffer_8cpp_source_1l00856"/><link linkend="_class_x_b_u_f_f_e_r_1a2a0ca254e59e5759a4120ca1807880a5">00856</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">XBUFFER::Insert</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;<emphasis role="keywordtype">string</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l00857"/>00857 {
<anchor xml:id="__x_buffer_8cpp_source_1l00858"/>00858 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keywordtype">string</emphasis>.<link linkend="_class_x_b_u_f_f_e_r_1a0007f465be1385ea663397e502c5280e">IsEmpty</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00859"/>00859 
<anchor xml:id="__x_buffer_8cpp_source_1l00860"/>00860 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=0;&#32;c&lt;<emphasis role="keywordtype">string</emphasis>.GetSize();&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l00861"/>00861 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00862"/>00862 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data&#32;=&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)<emphasis role="keywordtype">string</emphasis>.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[c];
<anchor xml:id="__x_buffer_8cpp_source_1l00863"/>00863 
<anchor xml:id="__x_buffer_8cpp_source_1l00864"/>00864 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l00865"/>00865 
<anchor xml:id="__x_buffer_8cpp_source_1l00866"/>00866 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">Insert</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)data,&#32;frompos+c);
<anchor xml:id="__x_buffer_8cpp_source_1l00867"/>00867 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00868"/>00868 
<anchor xml:id="__x_buffer_8cpp_source_1l00869"/>00869 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00870"/>00870 }
<anchor xml:id="__x_buffer_8cpp_source_1l00871"/>00871 
<anchor xml:id="__x_buffer_8cpp_source_1l00872"/>00872 
<anchor xml:id="__x_buffer_8cpp_source_1l00886"/><link linkend="_class_x_b_u_f_f_e_r_1a4b7f85c6b1834d9997a6d29553c7c5cc">00886</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a4b7f85c6b1834d9997a6d29553c7c5cc">XBUFFER::InsertWithMaskArg</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l00887"/>00887 {
<anchor xml:id="__x_buffer_8cpp_source_1l00888"/>00888 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbuffer;
<anchor xml:id="__x_buffer_8cpp_source_1l00889"/>00889 
<anchor xml:id="__x_buffer_8cpp_source_1l00890"/>00890 &#32;&#32;AddXBufferWithMask(xbuffer,&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00891"/>00891 
<anchor xml:id="__x_buffer_8cpp_source_1l00892"/>00892 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f06f00ff0797191e239e8d4de16293b">Insert</link>(xbuffer,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00893"/>00893 }
<anchor xml:id="__x_buffer_8cpp_source_1l00894"/>00894 
<anchor xml:id="__x_buffer_8cpp_source_1l00895"/>00895 
<anchor xml:id="__x_buffer_8cpp_source_1l00909"/><link linkend="_class_x_b_u_f_f_e_r_1a2d6ab50430a20babed9d47ea4a114658">00909</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a4b7f85c6b1834d9997a6d29553c7c5cc">XBUFFER::InsertWithMaskArg</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l00910"/>00910 {
<anchor xml:id="__x_buffer_8cpp_source_1l00911"/>00911 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a4b7f85c6b1834d9997a6d29553c7c5cc">InsertWithMaskArg</link>(mask-&gt;<link linkend="_class_x_s_t_r_i_n_g_1ad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00912"/>00912 }
<anchor xml:id="__x_buffer_8cpp_source_1l00913"/>00913 
<anchor xml:id="__x_buffer_8cpp_source_1l00914"/>00914 
<anchor xml:id="__x_buffer_8cpp_source_1l00928"/><link linkend="_class_x_b_u_f_f_e_r_1ab02bbfbe9788d2482f620cd56d853411">00928</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ab02bbfbe9788d2482f620cd56d853411">XBUFFER::InsertWithMask</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l00929"/>00929 {
<anchor xml:id="__x_buffer_8cpp_source_1l00930"/>00930 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00931"/>00931 
<anchor xml:id="__x_buffer_8cpp_source_1l00932"/>00932 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l00933"/>00933 
<anchor xml:id="__x_buffer_8cpp_source_1l00934"/>00934 &#32;&#32;va_start(arg,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00935"/>00935 
<anchor xml:id="__x_buffer_8cpp_source_1l00936"/>00936 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a4b7f85c6b1834d9997a6d29553c7c5cc">InsertWithMaskArg</link>(mask,&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00937"/>00937 
<anchor xml:id="__x_buffer_8cpp_source_1l00938"/>00938 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00939"/>00939 
<anchor xml:id="__x_buffer_8cpp_source_1l00940"/>00940 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l00941"/>00941 }
<anchor xml:id="__x_buffer_8cpp_source_1l00942"/>00942 
<anchor xml:id="__x_buffer_8cpp_source_1l00943"/>00943 
<anchor xml:id="__x_buffer_8cpp_source_1l00957"/><link linkend="_class_x_b_u_f_f_e_r_1a1716a5d7fbddd43f384b7d22d093d5a5">00957</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ab02bbfbe9788d2482f620cd56d853411">XBUFFER::InsertWithMask</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l00958"/>00958 {
<anchor xml:id="__x_buffer_8cpp_source_1l00959"/>00959 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l00960"/>00960 
<anchor xml:id="__x_buffer_8cpp_source_1l00961"/>00961 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l00962"/>00962 
<anchor xml:id="__x_buffer_8cpp_source_1l00963"/>00963 &#32;&#32;va_start(arg,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l00964"/>00964 
<anchor xml:id="__x_buffer_8cpp_source_1l00965"/>00965 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a4b7f85c6b1834d9997a6d29553c7c5cc">InsertWithMaskArg</link>(mask,&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00966"/>00966 
<anchor xml:id="__x_buffer_8cpp_source_1l00967"/>00967 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l00968"/>00968 
<anchor xml:id="__x_buffer_8cpp_source_1l00969"/>00969 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l00970"/>00970 }
<anchor xml:id="__x_buffer_8cpp_source_1l00971"/>00971 
<anchor xml:id="__x_buffer_8cpp_source_1l00972"/>00972 
<anchor xml:id="__x_buffer_8cpp_source_1l00986"/><link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">00986</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;pbuffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize)
<anchor xml:id="__x_buffer_8cpp_source_1l00987"/>00987 {
<anchor xml:id="__x_buffer_8cpp_source_1l00988"/>00988 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00989"/>00989 
<anchor xml:id="__x_buffer_8cpp_source_1l00990"/>00990 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((ppos&gt;=size)||(!size))
<anchor xml:id="__x_buffer_8cpp_source_1l00991"/>00991 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l00992"/>00992 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l00993"/>00993 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l00994"/>00994 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l00995"/>00995 
<anchor xml:id="__x_buffer_8cpp_source_1l00996"/>00996 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;esize&#32;=&#32;psize;
<anchor xml:id="__x_buffer_8cpp_source_1l00997"/>00997 
<anchor xml:id="__x_buffer_8cpp_source_1l00998"/>00998 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((ppos+psize)&gt;=size)&#32;esize&#32;=&#32;(size-ppos);
<anchor xml:id="__x_buffer_8cpp_source_1l00999"/>00999 
<anchor xml:id="__x_buffer_8cpp_source_1l01000"/>01000 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pbuffer)&#32;memcpy(pbuffer,&#32;&amp;buffer[ppos],esize);
<anchor xml:id="__x_buffer_8cpp_source_1l01001"/>01001 
<anchor xml:id="__x_buffer_8cpp_source_1l01002"/>01002 &#32;&#32;<emphasis role="comment">//&#32;#Imanol&#32;changed&#32;to&#32;avoid&#32;copyng&#32;overlapped&#32;memory,&#32;as&#32;that&apos;s&#32;undefined</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l01003"/>01003 &#32;&#32;memmove(&amp;buffer[ppos],&#32;&amp;buffer[ppos+esize],&#32;size-(ppos+esize));
<anchor xml:id="__x_buffer_8cpp_source_1l01004"/>01004 
<anchor xml:id="__x_buffer_8cpp_source_1l01005"/>01005 &#32;&#32;<emphasis role="comment">//memcpy(&amp;buffer[ppos],&amp;buffer[ppos+esize],size-(ppos+esize));</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l01006"/>01006 
<anchor xml:id="__x_buffer_8cpp_source_1l01007"/>01007 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1acf69e379f1d0bf812ae9c1157eac172c">Resize</link>(size-esize,<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01008"/>01008 
<anchor xml:id="__x_buffer_8cpp_source_1l01009"/>01009 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01010"/>01010 
<anchor xml:id="__x_buffer_8cpp_source_1l01011"/>01011 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;esize;
<anchor xml:id="__x_buffer_8cpp_source_1l01012"/>01012 }
<anchor xml:id="__x_buffer_8cpp_source_1l01013"/>01013 
<anchor xml:id="__x_buffer_8cpp_source_1l01014"/>01014 
<anchor xml:id="__x_buffer_8cpp_source_1l01027"/><link linkend="_class_x_b_u_f_f_e_r_1a837bfdd8236ae2a0f5a7e7f05996fc68">01027</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&amp;&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01028"/>01028 {
<anchor xml:id="__x_buffer_8cpp_source_1l01029"/>01029 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01030"/>01030 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01031"/>01031 
<anchor xml:id="__x_buffer_8cpp_source_1l01032"/>01032 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01033"/>01033 }
<anchor xml:id="__x_buffer_8cpp_source_1l01034"/>01034 
<anchor xml:id="__x_buffer_8cpp_source_1l01035"/>01035 
<anchor xml:id="__x_buffer_8cpp_source_1l01048"/><link linkend="_class_x_b_u_f_f_e_r_1a5ca161e058d647a5b28145666c21f5cb">01048</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<emphasis role="keywordtype">bool</emphasis>&amp;&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01049"/>01049 {
<anchor xml:id="__x_buffer_8cpp_source_1l01050"/>01050 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;_data&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l01051"/>01051 
<anchor xml:id="__x_buffer_8cpp_source_1l01052"/>01052 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;_data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01053"/>01053 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01054"/>01054 
<anchor xml:id="__x_buffer_8cpp_source_1l01055"/>01055 &#32;&#32;data&#32;=&#32;_data?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01056"/>01056 
<anchor xml:id="__x_buffer_8cpp_source_1l01057"/>01057 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01058"/>01058 }
<anchor xml:id="__x_buffer_8cpp_source_1l01059"/>01059 
<anchor xml:id="__x_buffer_8cpp_source_1l01060"/>01060 
<anchor xml:id="__x_buffer_8cpp_source_1l01073"/><link linkend="_class_x_b_u_f_f_e_r_1a1f57d60affaf58a8a363e713fc803478">01073</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&amp;&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01074"/>01074 {
<anchor xml:id="__x_buffer_8cpp_source_1l01075"/>01075 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01076"/>01076 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01077"/>01077 
<anchor xml:id="__x_buffer_8cpp_source_1l01078"/>01078 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1afacb625223a89d4cdf212ac4482a7e5c">SWAPWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01079"/>01079 
<anchor xml:id="__x_buffer_8cpp_source_1l01080"/>01080 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01081"/>01081 }
<anchor xml:id="__x_buffer_8cpp_source_1l01082"/>01082 
<anchor xml:id="__x_buffer_8cpp_source_1l01083"/>01083 
<anchor xml:id="__x_buffer_8cpp_source_1l01096"/><link linkend="_class_x_b_u_f_f_e_r_1a9911b88ec3fb88b6fa59c0170387cd5c">01096</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&amp;&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01097"/>01097 {
<anchor xml:id="__x_buffer_8cpp_source_1l01098"/>01098 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01099"/>01099 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01100"/>01100 
<anchor xml:id="__x_buffer_8cpp_source_1l01101"/>01101 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01102"/>01102 
<anchor xml:id="__x_buffer_8cpp_source_1l01103"/>01103 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01104"/>01104 }
<anchor xml:id="__x_buffer_8cpp_source_1l01105"/>01105 
<anchor xml:id="__x_buffer_8cpp_source_1l01106"/>01106 
<anchor xml:id="__x_buffer_8cpp_source_1l01119"/><link linkend="_class_x_b_u_f_f_e_r_1aa05b9b0e443030cb31fc3793764f9f3d">01119</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&amp;&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01120"/>01120 {
<anchor xml:id="__x_buffer_8cpp_source_1l01121"/>01121 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01122"/>01122 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01123"/>01123 
<anchor xml:id="__x_buffer_8cpp_source_1l01124"/>01124 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a0a01412990f8f070e16468914d231b68">SWAPQWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01125"/>01125 
<anchor xml:id="__x_buffer_8cpp_source_1l01126"/>01126 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01127"/>01127 }
<anchor xml:id="__x_buffer_8cpp_source_1l01128"/>01128 
<anchor xml:id="__x_buffer_8cpp_source_1l01129"/>01129 
<anchor xml:id="__x_buffer_8cpp_source_1l01142"/><link linkend="_class_x_b_u_f_f_e_r_1a009cc090bb5388c7e715a1ff9b8aa205">01142</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<emphasis role="keywordtype">float</emphasis>&amp;&#32;data,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01143"/>01143 {
<anchor xml:id="__x_buffer_8cpp_source_1l01144"/>01144 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01145"/>01145 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01146"/>01146 
<anchor xml:id="__x_buffer_8cpp_source_1l01147"/>01147 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01148"/>01148 }
<anchor xml:id="__x_buffer_8cpp_source_1l01149"/>01149 
<anchor xml:id="__x_buffer_8cpp_source_1l01150"/>01150 
<anchor xml:id="__x_buffer_8cpp_source_1l01163"/><link linkend="_class_x_b_u_f_f_e_r_1a50e9fb6a3bb7cd69f7ab050db2d74a24">01163</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<emphasis role="keywordtype">double</emphasis>&amp;&#32;data,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos)
<anchor xml:id="__x_buffer_8cpp_source_1l01164"/>01164 {
<anchor xml:id="__x_buffer_8cpp_source_1l01165"/>01165 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;ppos,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>));
<anchor xml:id="__x_buffer_8cpp_source_1l01166"/>01166 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(size!=<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01167"/>01167 
<anchor xml:id="__x_buffer_8cpp_source_1l01168"/>01168 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01169"/>01169 }
<anchor xml:id="__x_buffer_8cpp_source_1l01170"/>01170 
<anchor xml:id="__x_buffer_8cpp_source_1l01171"/>01171 
<anchor xml:id="__x_buffer_8cpp_source_1l01185"/><link linkend="_class_x_b_u_f_f_e_r_1ac20ac6efc0084910f540aaad4cc02c53">01185</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">XBUFFER::Extract</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;<emphasis role="keywordtype">string</emphasis>,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize)
<anchor xml:id="__x_buffer_8cpp_source_1l01186"/>01186 {
<anchor xml:id="__x_buffer_8cpp_source_1l01187"/>01187 &#32;&#32;<emphasis role="keywordtype">string</emphasis>.Empty();
<anchor xml:id="__x_buffer_8cpp_source_1l01188"/>01188 
<anchor xml:id="__x_buffer_8cpp_source_1l01189"/>01189 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*&#32;_string&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>[psize];
<anchor xml:id="__x_buffer_8cpp_source_1l01190"/>01190 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;_size&#32;&#32;&#32;=&#32;psize&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l01191"/>01191 
<anchor xml:id="__x_buffer_8cpp_source_1l01192"/>01192 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!_string)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01193"/>01193 
<anchor xml:id="__x_buffer_8cpp_source_1l01194"/>01194 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;rsize&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)_string,&#32;ppos,&#32;_size);
<anchor xml:id="__x_buffer_8cpp_source_1l01195"/>01195 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(rsize&#32;==&#32;_size)
<anchor xml:id="__x_buffer_8cpp_source_1l01196"/>01196 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01197"/>01197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;(int)psize;&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l01198"/>01198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01199"/>01199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data&#32;=&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)_string[c];
<anchor xml:id="__x_buffer_8cpp_source_1l01200"/>01200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>.Add((<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>)data);
<anchor xml:id="__x_buffer_8cpp_source_1l01201"/>01201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01202"/>01202 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01203"/>01203 
<anchor xml:id="__x_buffer_8cpp_source_1l01204"/>01204 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;_string;
<anchor xml:id="__x_buffer_8cpp_source_1l01205"/>01205 
<anchor xml:id="__x_buffer_8cpp_source_1l01206"/>01206 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01207"/>01207 }
<anchor xml:id="__x_buffer_8cpp_source_1l01208"/>01208 
<anchor xml:id="__x_buffer_8cpp_source_1l01209"/>01209 
<anchor xml:id="__x_buffer_8cpp_source_1l01223"/><link linkend="_class_x_b_u_f_f_e_r_1a8d54c97a513fa79753de095832a5fcc5">01223</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a8d54c97a513fa79753de095832a5fcc5">XBUFFER::ExtractWithMaskArg</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l01224"/>01224 {
<anchor xml:id="__x_buffer_8cpp_source_1l01225"/>01225 <emphasis role="preprocessor">&#32;&#32;#ifndef&#32;BUILDER</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l01226"/>01226 
<anchor xml:id="__x_buffer_8cpp_source_1l01227"/>01227 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01228"/>01228 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&lt;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01229"/>01229 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)frompos&#32;&gt;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>())&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01230"/>01230 
<anchor xml:id="__x_buffer_8cpp_source_1l01231"/>01231 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;buffer;
<anchor xml:id="__x_buffer_8cpp_source_1l01232"/>01232 &#32;&#32;va_list&#32;arg2;
<anchor xml:id="__x_buffer_8cpp_source_1l01233"/>01233 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;sizearg&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l01234"/>01234 
<anchor xml:id="__x_buffer_8cpp_source_1l01235"/>01235 &#32;&#32;va_copy(arg2,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01236"/>01236 
<anchor xml:id="__x_buffer_8cpp_source_1l01237"/>01237 &#32;&#32;sizearg&#32;=&#32;CalculeExtractSizeArgWithMask((*<emphasis role="keyword">this</emphasis>),&#32;frompos,&#32;mask,&#32;arg2);
<anchor xml:id="__x_buffer_8cpp_source_1l01238"/>01238 
<anchor xml:id="__x_buffer_8cpp_source_1l01239"/>01239 &#32;&#32;va_end(arg2);
<anchor xml:id="__x_buffer_8cpp_source_1l01240"/>01240 
<anchor xml:id="__x_buffer_8cpp_source_1l01241"/>01241 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!sizearg)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01242"/>01242 
<anchor xml:id="__x_buffer_8cpp_source_1l01243"/>01243 &#32;&#32;buffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(&amp;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[frompos],&#32;sizearg);
<anchor xml:id="__x_buffer_8cpp_source_1l01244"/>01244 
<anchor xml:id="__x_buffer_8cpp_source_1l01245"/>01245 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;ExtractXBufferWithMask(buffer,&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01246"/>01246 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;frompos,&#32;sizearg);
<anchor xml:id="__x_buffer_8cpp_source_1l01247"/>01247 
<anchor xml:id="__x_buffer_8cpp_source_1l01248"/>01248 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01249"/>01249 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l01250"/>01250 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01251"/>01251 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l01252"/>01252 }
<anchor xml:id="__x_buffer_8cpp_source_1l01253"/>01253 
<anchor xml:id="__x_buffer_8cpp_source_1l01254"/>01254 
<anchor xml:id="__x_buffer_8cpp_source_1l01268"/><link linkend="_class_x_b_u_f_f_e_r_1a0622b369e989a43b23917c7b99341ff5">01268</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a8d54c97a513fa79753de095832a5fcc5">XBUFFER::ExtractWithMaskArg</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l01269"/>01269 {
<anchor xml:id="__x_buffer_8cpp_source_1l01270"/>01270 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a8d54c97a513fa79753de095832a5fcc5">ExtractWithMaskArg</link>(mask-&gt;<link linkend="_class_x_s_t_r_i_n_g_1ad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01271"/>01271 }
<anchor xml:id="__x_buffer_8cpp_source_1l01272"/>01272 
<anchor xml:id="__x_buffer_8cpp_source_1l01273"/>01273 
<anchor xml:id="__x_buffer_8cpp_source_1l01287"/><link linkend="_class_x_b_u_f_f_e_r_1ab586196212b33ea6e43a5d37689d7f71">01287</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ab586196212b33ea6e43a5d37689d7f71">XBUFFER::ExtractWithMask</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l01288"/>01288 {
<anchor xml:id="__x_buffer_8cpp_source_1l01289"/>01289 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01290"/>01290 
<anchor xml:id="__x_buffer_8cpp_source_1l01291"/>01291 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l01292"/>01292 
<anchor xml:id="__x_buffer_8cpp_source_1l01293"/>01293 &#32;&#32;va_start(arg,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l01294"/>01294 
<anchor xml:id="__x_buffer_8cpp_source_1l01295"/>01295 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a8d54c97a513fa79753de095832a5fcc5">ExtractWithMaskArg</link>(mask,&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01296"/>01296 
<anchor xml:id="__x_buffer_8cpp_source_1l01297"/>01297 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01298"/>01298 
<anchor xml:id="__x_buffer_8cpp_source_1l01299"/>01299 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01300"/>01300 }
<anchor xml:id="__x_buffer_8cpp_source_1l01301"/>01301 
<anchor xml:id="__x_buffer_8cpp_source_1l01302"/>01302 
<anchor xml:id="__x_buffer_8cpp_source_1l01316"/><link linkend="_class_x_b_u_f_f_e_r_1a141b201cdac4d7d25976e23c074a5d05">01316</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ab586196212b33ea6e43a5d37689d7f71">XBUFFER::ExtractWithMask</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l01317"/>01317 {
<anchor xml:id="__x_buffer_8cpp_source_1l01318"/>01318 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01319"/>01319 
<anchor xml:id="__x_buffer_8cpp_source_1l01320"/>01320 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l01321"/>01321 
<anchor xml:id="__x_buffer_8cpp_source_1l01322"/>01322 &#32;&#32;va_start(arg,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l01323"/>01323 
<anchor xml:id="__x_buffer_8cpp_source_1l01324"/>01324 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a8d54c97a513fa79753de095832a5fcc5">ExtractWithMaskArg</link>(mask,&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01325"/>01325 
<anchor xml:id="__x_buffer_8cpp_source_1l01326"/>01326 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01327"/>01327 
<anchor xml:id="__x_buffer_8cpp_source_1l01328"/>01328 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01329"/>01329 }
<anchor xml:id="__x_buffer_8cpp_source_1l01330"/>01330 
<anchor xml:id="__x_buffer_8cpp_source_1l01331"/>01331 
<anchor xml:id="__x_buffer_8cpp_source_1l01341"/><link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">01341</link> <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l01342"/>01342 {
<anchor xml:id="__x_buffer_8cpp_source_1l01343"/>01343 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!size)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l01344"/>01344 
<anchor xml:id="__x_buffer_8cpp_source_1l01345"/>01345 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer;
<anchor xml:id="__x_buffer_8cpp_source_1l01346"/>01346 }
<anchor xml:id="__x_buffer_8cpp_source_1l01347"/>01347 
<anchor xml:id="__x_buffer_8cpp_source_1l01348"/>01348 
<anchor xml:id="__x_buffer_8cpp_source_1l01360"/><link linkend="_class_x_b_u_f_f_e_r_1abfaf967d136d37f0c5dcf4ded0296dac">01360</link> <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1abfaf967d136d37f0c5dcf4ded0296dac">XBUFFER::GetByte</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;index)
<anchor xml:id="__x_buffer_8cpp_source_1l01361"/>01361 {
<anchor xml:id="__x_buffer_8cpp_source_1l01362"/>01362 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01363"/>01363 
<anchor xml:id="__x_buffer_8cpp_source_1l01364"/>01364 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data;
<anchor xml:id="__x_buffer_8cpp_source_1l01365"/>01365 
<anchor xml:id="__x_buffer_8cpp_source_1l01366"/>01366 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(index&#32;&gt;&#32;size)
<anchor xml:id="__x_buffer_8cpp_source_1l01367"/>01367 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01368"/>01368 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01369"/>01369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l01370"/>01370 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01371"/>01371 
<anchor xml:id="__x_buffer_8cpp_source_1l01372"/>01372 &#32;&#32;data&#32;=&#32;buffer[index];
<anchor xml:id="__x_buffer_8cpp_source_1l01373"/>01373 
<anchor xml:id="__x_buffer_8cpp_source_1l01374"/>01374 &#32;&#32;position++;
<anchor xml:id="__x_buffer_8cpp_source_1l01375"/>01375 
<anchor xml:id="__x_buffer_8cpp_source_1l01376"/>01376 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01377"/>01377 
<anchor xml:id="__x_buffer_8cpp_source_1l01378"/>01378 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
<anchor xml:id="__x_buffer_8cpp_source_1l01379"/>01379 }
<anchor xml:id="__x_buffer_8cpp_source_1l01380"/>01380 
<anchor xml:id="__x_buffer_8cpp_source_1l01381"/>01381 
<anchor xml:id="__x_buffer_8cpp_source_1l01391"/><link linkend="_class_x_b_u_f_f_e_r_1a2197de858bc8a3f51649077a139935fa">01391</link> <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2197de858bc8a3f51649077a139935fa">XBUFFER::GetLastByte</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l01392"/>01392 {
<anchor xml:id="__x_buffer_8cpp_source_1l01393"/>01393 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01394"/>01394 
<anchor xml:id="__x_buffer_8cpp_source_1l01395"/>01395 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data&#32;=&#32;buffer[size-1];
<anchor xml:id="__x_buffer_8cpp_source_1l01396"/>01396 
<anchor xml:id="__x_buffer_8cpp_source_1l01397"/>01397 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01398"/>01398 
<anchor xml:id="__x_buffer_8cpp_source_1l01399"/>01399 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
<anchor xml:id="__x_buffer_8cpp_source_1l01400"/>01400 }
<anchor xml:id="__x_buffer_8cpp_source_1l01401"/>01401 
<anchor xml:id="__x_buffer_8cpp_source_1l01402"/>01402 
<anchor xml:id="__x_buffer_8cpp_source_1l01412"/><link linkend="_class_x_b_u_f_f_e_r_1a66e2dbd897e717ce38e395d6ad87b754">01412</link> <emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_class_x_b_u_f_f_e_r_1a66e2dbd897e717ce38e395d6ad87b754">XBUFFER::GetPtrChar</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l01413"/>01413 {
<anchor xml:id="__x_buffer_8cpp_source_1l01414"/>01414 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>*)<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l01415"/>01415 }
<anchor xml:id="__x_buffer_8cpp_source_1l01416"/>01416 
<anchor xml:id="__x_buffer_8cpp_source_1l01417"/>01417 
<anchor xml:id="__x_buffer_8cpp_source_1l01427"/><link linkend="_class_x_b_u_f_f_e_r_1a9d661e678c5ce60c23b8de8825130ffd">01427</link> <link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>*&#32;<link linkend="_class_x_b_u_f_f_e_r_1a9d661e678c5ce60c23b8de8825130ffd">XBUFFER::GetPtrWord</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l01428"/>01428 {
<anchor xml:id="__x_buffer_8cpp_source_1l01429"/>01429 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>*)<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l01430"/>01430 }
<anchor xml:id="__x_buffer_8cpp_source_1l01431"/>01431 
<anchor xml:id="__x_buffer_8cpp_source_1l01432"/>01432 
<anchor xml:id="__x_buffer_8cpp_source_1l01446"/><link linkend="_class_x_b_u_f_f_e_r_1a819fc12232e4ccd2e2ba005500730698">01446</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;pbuffer,<emphasis role="keywordtype">int</emphasis>&#32;psize,<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01447"/>01447 {
<anchor xml:id="__x_buffer_8cpp_source_1l01448"/>01448 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!pbuffer)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01449"/>01449 
<anchor xml:id="__x_buffer_8cpp_source_1l01450"/>01450 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01451"/>01451 
<anchor xml:id="__x_buffer_8cpp_source_1l01452"/>01452 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos&#32;=&#32;frompos;
<anchor xml:id="__x_buffer_8cpp_source_1l01453"/>01453 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&#32;==&#32;<link linkend="__x_buffer_8h_1a819ef6df2bf7864ffdefd37a7d8c172a">XBUFFER_INVALIDPOSITION</link>)&#32;pos&#32;=&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l01454"/>01454 
<anchor xml:id="__x_buffer_8cpp_source_1l01455"/>01455 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((!buffer)&#32;||&#32;(pos&gt;(<emphasis role="keywordtype">int</emphasis>)size))
<anchor xml:id="__x_buffer_8cpp_source_1l01456"/>01456 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01457"/>01457 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01458"/>01458 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01459"/>01459 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01460"/>01460 
<anchor xml:id="__x_buffer_8cpp_source_1l01461"/>01461 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l01462"/>01462 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01463"/>01463 &#32;&#32;&#32;&#32;&#32;&#32;memcpy(pbuffer,&amp;buffer[pos],psize);
<anchor xml:id="__x_buffer_8cpp_source_1l01464"/>01464 &#32;&#32;&#32;&#32;&#32;&#32;position&#32;=&#32;pos&#32;+&#32;psize;
<anchor xml:id="__x_buffer_8cpp_source_1l01465"/>01465 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01466"/>01466 
<anchor xml:id="__x_buffer_8cpp_source_1l01467"/>01467 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01468"/>01468 
<anchor xml:id="__x_buffer_8cpp_source_1l01469"/>01469 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!buffer)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01470"/>01470 
<anchor xml:id="__x_buffer_8cpp_source_1l01471"/>01471 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01472"/>01472 }
<anchor xml:id="__x_buffer_8cpp_source_1l01473"/>01473 
<anchor xml:id="__x_buffer_8cpp_source_1l01474"/>01474 
<anchor xml:id="__x_buffer_8cpp_source_1l01487"/><link linkend="_class_x_b_u_f_f_e_r_1afd2ad07e0aeeb7632f794d23e9b4e5a9">01487</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01488"/>01488 {
<anchor xml:id="__x_buffer_8cpp_source_1l01489"/>01489 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01490"/>01490 
<anchor xml:id="__x_buffer_8cpp_source_1l01491"/>01491 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos&#32;=&#32;frompos;
<anchor xml:id="__x_buffer_8cpp_source_1l01492"/>01492 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&#32;==&#32;<link linkend="__x_buffer_8h_1a819ef6df2bf7864ffdefd37a7d8c172a">XBUFFER_INVALIDPOSITION</link>)&#32;pos&#32;=&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l01493"/>01493 
<anchor xml:id="__x_buffer_8cpp_source_1l01494"/>01494 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pos&gt;(<emphasis role="keywordtype">int</emphasis>)size)
<anchor xml:id="__x_buffer_8cpp_source_1l01495"/>01495 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01496"/>01496 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01497"/>01497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01498"/>01498 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01499"/>01499 
<anchor xml:id="__x_buffer_8cpp_source_1l01500"/>01500 &#32;&#32;data&#32;=&#32;buffer[pos];
<anchor xml:id="__x_buffer_8cpp_source_1l01501"/>01501 
<anchor xml:id="__x_buffer_8cpp_source_1l01502"/>01502 &#32;&#32;position&#32;=&#32;pos&#32;+&#32;1;
<anchor xml:id="__x_buffer_8cpp_source_1l01503"/>01503 
<anchor xml:id="__x_buffer_8cpp_source_1l01504"/>01504 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01505"/>01505 
<anchor xml:id="__x_buffer_8cpp_source_1l01506"/>01506 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01507"/>01507 }
<anchor xml:id="__x_buffer_8cpp_source_1l01508"/>01508 
<anchor xml:id="__x_buffer_8cpp_source_1l01509"/>01509 
<anchor xml:id="__x_buffer_8cpp_source_1l01522"/><link linkend="_class_x_b_u_f_f_e_r_1ad4aae7e01b7006e03dee36795e647e26">01522</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<emphasis role="keywordtype">bool</emphasis>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01523"/>01523 {
<anchor xml:id="__x_buffer_8cpp_source_1l01524"/>01524 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;_data&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l01525"/>01525 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01526"/>01526 
<anchor xml:id="__x_buffer_8cpp_source_1l01527"/>01527 &#32;&#32;status&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(_data,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l01528"/>01528 
<anchor xml:id="__x_buffer_8cpp_source_1l01529"/>01529 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;data&#32;=&#32;_data?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01530"/>01530 
<anchor xml:id="__x_buffer_8cpp_source_1l01531"/>01531 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01532"/>01532 }
<anchor xml:id="__x_buffer_8cpp_source_1l01533"/>01533 
<anchor xml:id="__x_buffer_8cpp_source_1l01534"/>01534 
<anchor xml:id="__x_buffer_8cpp_source_1l01547"/><link linkend="_class_x_b_u_f_f_e_r_1a4df5c9e9263f98bb5a967fabcea0a341">01547</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01548"/>01548 {
<anchor xml:id="__x_buffer_8cpp_source_1l01549"/>01549 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>),&#32;frompos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01550"/>01550 
<anchor xml:id="__x_buffer_8cpp_source_1l01551"/>01551 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1afacb625223a89d4cdf212ac4482a7e5c">SWAPWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01552"/>01552 
<anchor xml:id="__x_buffer_8cpp_source_1l01553"/>01553 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01554"/>01554 }
<anchor xml:id="__x_buffer_8cpp_source_1l01555"/>01555 
<anchor xml:id="__x_buffer_8cpp_source_1l01556"/>01556 
<anchor xml:id="__x_buffer_8cpp_source_1l01569"/><link linkend="_class_x_b_u_f_f_e_r_1a1fe3d861549327bd21ba33efc31e50dc">01569</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01570"/>01570 {
<anchor xml:id="__x_buffer_8cpp_source_1l01571"/>01571 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;frompos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01572"/>01572 
<anchor xml:id="__x_buffer_8cpp_source_1l01573"/>01573 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01574"/>01574 
<anchor xml:id="__x_buffer_8cpp_source_1l01575"/>01575 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01576"/>01576 }
<anchor xml:id="__x_buffer_8cpp_source_1l01577"/>01577 
<anchor xml:id="__x_buffer_8cpp_source_1l01578"/>01578 
<anchor xml:id="__x_buffer_8cpp_source_1l01591"/><link linkend="_class_x_b_u_f_f_e_r_1aabca9aa7af0d5508b8ea9c0d81f63d45">01591</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01592"/>01592 {
<anchor xml:id="__x_buffer_8cpp_source_1l01593"/>01593 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>),&#32;frompos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01594"/>01594 
<anchor xml:id="__x_buffer_8cpp_source_1l01595"/>01595 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a0a01412990f8f070e16468914d231b68">SWAPQWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01596"/>01596 
<anchor xml:id="__x_buffer_8cpp_source_1l01597"/>01597 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01598"/>01598 }
<anchor xml:id="__x_buffer_8cpp_source_1l01599"/>01599 
<anchor xml:id="__x_buffer_8cpp_source_1l01600"/>01600 
<anchor xml:id="__x_buffer_8cpp_source_1l01613"/><link linkend="_class_x_b_u_f_f_e_r_1a7b9dea3612b02db2f93b2beb5b6f8b30">01613</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<emphasis role="keywordtype">float</emphasis>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01614"/>01614 {
<anchor xml:id="__x_buffer_8cpp_source_1l01615"/>01615 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;frompos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01616"/>01616 
<anchor xml:id="__x_buffer_8cpp_source_1l01617"/>01617 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01618"/>01618 }
<anchor xml:id="__x_buffer_8cpp_source_1l01619"/>01619 
<anchor xml:id="__x_buffer_8cpp_source_1l01620"/>01620 
<anchor xml:id="__x_buffer_8cpp_source_1l01633"/><link linkend="_class_x_b_u_f_f_e_r_1a4b051f8bbe3c597b212d57cf5a467335">01633</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<emphasis role="keywordtype">double</emphasis>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01634"/>01634 {
<anchor xml:id="__x_buffer_8cpp_source_1l01635"/>01635 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>),&#32;frompos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01636"/>01636 
<anchor xml:id="__x_buffer_8cpp_source_1l01637"/>01637 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01638"/>01638 }
<anchor xml:id="__x_buffer_8cpp_source_1l01639"/>01639 
<anchor xml:id="__x_buffer_8cpp_source_1l01640"/>01640 
<anchor xml:id="__x_buffer_8cpp_source_1l01654"/><link linkend="_class_x_b_u_f_f_e_r_1a8bd4d8c0a23eb08a5b3eecde272bfd66">01654</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">XBUFFER::Get</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;psize,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos)
<anchor xml:id="__x_buffer_8cpp_source_1l01655"/>01655 {
<anchor xml:id="__x_buffer_8cpp_source_1l01656"/>01656 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;pos&#32;=&#32;frompos;
<anchor xml:id="__x_buffer_8cpp_source_1l01657"/>01657 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&#32;==&#32;<link linkend="__x_buffer_8h_1a819ef6df2bf7864ffdefd37a7d8c172a">XBUFFER_INVALIDPOSITION</link>)&#32;pos&#32;=&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l01658"/>01658 
<anchor xml:id="__x_buffer_8cpp_source_1l01659"/>01659 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c;
<anchor xml:id="__x_buffer_8cpp_source_1l01660"/>01660 
<anchor xml:id="__x_buffer_8cpp_source_1l01661"/>01661 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)psize;&#32;i++)
<anchor xml:id="__x_buffer_8cpp_source_1l01662"/>01662 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01663"/>01663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(c,&#32;pos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01664"/>01664 
<anchor xml:id="__x_buffer_8cpp_source_1l01665"/>01665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(c);
<anchor xml:id="__x_buffer_8cpp_source_1l01666"/>01666 
<anchor xml:id="__x_buffer_8cpp_source_1l01667"/>01667 &#32;&#32;&#32;&#32;&#32;&#32;data.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>((<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>)c);
<anchor xml:id="__x_buffer_8cpp_source_1l01668"/>01668 
<anchor xml:id="__x_buffer_8cpp_source_1l01669"/>01669 &#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l01670"/>01670 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01671"/>01671 
<anchor xml:id="__x_buffer_8cpp_source_1l01672"/>01672 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01673"/>01673 }
<anchor xml:id="__x_buffer_8cpp_source_1l01674"/>01674 
<anchor xml:id="__x_buffer_8cpp_source_1l01675"/>01675 
<anchor xml:id="__x_buffer_8cpp_source_1l01689"/><link linkend="_class_x_b_u_f_f_e_r_1ac553a8fceec905bf48ebdd75274cbe00">01689</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ac553a8fceec905bf48ebdd75274cbe00">XBUFFER::GetWithMaskArg</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l01690"/>01690 {
<anchor xml:id="__x_buffer_8cpp_source_1l01691"/>01691 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbuffer;
<anchor xml:id="__x_buffer_8cpp_source_1l01692"/>01692 
<anchor xml:id="__x_buffer_8cpp_source_1l01693"/>01693 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01694"/>01694 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(frompos&lt;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01695"/>01695 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)frompos&#32;&gt;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>())&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01696"/>01696 
<anchor xml:id="__x_buffer_8cpp_source_1l01697"/>01697 &#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(&amp;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[frompos],&#32;(<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>()-frompos));
<anchor xml:id="__x_buffer_8cpp_source_1l01698"/>01698 
<anchor xml:id="__x_buffer_8cpp_source_1l01699"/>01699 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;ExtractXBufferWithMask(xbuffer,&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01700"/>01700 
<anchor xml:id="__x_buffer_8cpp_source_1l01701"/>01701 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01702"/>01702 }
<anchor xml:id="__x_buffer_8cpp_source_1l01703"/>01703 
<anchor xml:id="__x_buffer_8cpp_source_1l01704"/>01704 
<anchor xml:id="__x_buffer_8cpp_source_1l01718"/><link linkend="_class_x_b_u_f_f_e_r_1a50a69a53d7e20c0082271e74f9f98942">01718</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ac553a8fceec905bf48ebdd75274cbe00">XBUFFER::GetWithMaskArg</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l01719"/>01719 {
<anchor xml:id="__x_buffer_8cpp_source_1l01720"/>01720 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01721"/>01721 
<anchor xml:id="__x_buffer_8cpp_source_1l01722"/>01722 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ac553a8fceec905bf48ebdd75274cbe00">GetWithMaskArg</link>(mask-&gt;<link linkend="_class_x_s_t_r_i_n_g_1ad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01723"/>01723 }
<anchor xml:id="__x_buffer_8cpp_source_1l01724"/>01724 
<anchor xml:id="__x_buffer_8cpp_source_1l01725"/>01725 
<anchor xml:id="__x_buffer_8cpp_source_1l01739"/><link linkend="_class_x_b_u_f_f_e_r_1a366ac8314162b9a8f47ecdb6c9533a49">01739</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a366ac8314162b9a8f47ecdb6c9533a49">XBUFFER::GetWithMask</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l01740"/>01740 {
<anchor xml:id="__x_buffer_8cpp_source_1l01741"/>01741 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01742"/>01742 
<anchor xml:id="__x_buffer_8cpp_source_1l01743"/>01743 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l01744"/>01744 
<anchor xml:id="__x_buffer_8cpp_source_1l01745"/>01745 &#32;&#32;va_start(arg,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l01746"/>01746 
<anchor xml:id="__x_buffer_8cpp_source_1l01747"/>01747 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1ac553a8fceec905bf48ebdd75274cbe00">GetWithMaskArg</link>(mask,&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01748"/>01748 
<anchor xml:id="__x_buffer_8cpp_source_1l01749"/>01749 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01750"/>01750 
<anchor xml:id="__x_buffer_8cpp_source_1l01751"/>01751 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01752"/>01752 }
<anchor xml:id="__x_buffer_8cpp_source_1l01753"/>01753 
<anchor xml:id="__x_buffer_8cpp_source_1l01754"/>01754 
<anchor xml:id="__x_buffer_8cpp_source_1l01768"/><link linkend="_class_x_b_u_f_f_e_r_1ac9aaf64fbab7557ced4d8f1d2c69acaf">01768</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a366ac8314162b9a8f47ecdb6c9533a49">XBUFFER::GetWithMask</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l01769"/>01769 {
<anchor xml:id="__x_buffer_8cpp_source_1l01770"/>01770 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01771"/>01771 
<anchor xml:id="__x_buffer_8cpp_source_1l01772"/>01772 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l01773"/>01773 
<anchor xml:id="__x_buffer_8cpp_source_1l01774"/>01774 &#32;&#32;va_start(arg,&#32;frompos);
<anchor xml:id="__x_buffer_8cpp_source_1l01775"/>01775 
<anchor xml:id="__x_buffer_8cpp_source_1l01776"/>01776 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1ac553a8fceec905bf48ebdd75274cbe00">GetWithMaskArg</link>(mask,&#32;frompos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01777"/>01777 
<anchor xml:id="__x_buffer_8cpp_source_1l01778"/>01778 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l01779"/>01779 
<anchor xml:id="__x_buffer_8cpp_source_1l01780"/>01780 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l01781"/>01781 }
<anchor xml:id="__x_buffer_8cpp_source_1l01782"/>01782 
<anchor xml:id="__x_buffer_8cpp_source_1l01783"/>01783 
<anchor xml:id="__x_buffer_8cpp_source_1l01797"/><link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">01797</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;pbuffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;psize,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01798"/>01798 {
<anchor xml:id="__x_buffer_8cpp_source_1l01799"/>01799 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01800"/>01800 
<anchor xml:id="__x_buffer_8cpp_source_1l01801"/>01801 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos&#32;=&#32;topos;
<anchor xml:id="__x_buffer_8cpp_source_1l01802"/>01802 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(topos&#32;==&#32;<link linkend="__x_buffer_8h_1a819ef6df2bf7864ffdefd37a7d8c172a">XBUFFER_INVALIDPOSITION</link>)&#32;pos&#32;=&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l01803"/>01803 
<anchor xml:id="__x_buffer_8cpp_source_1l01804"/>01804 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((pos+psize)&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)size)
<anchor xml:id="__x_buffer_8cpp_source_1l01805"/>01805 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01806"/>01806 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01807"/>01807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01808"/>01808 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01809"/>01809 
<anchor xml:id="__x_buffer_8cpp_source_1l01810"/>01810 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pbuffer)
<anchor xml:id="__x_buffer_8cpp_source_1l01811"/>01811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&amp;buffer[pos],&#32;pbuffer,&#32;psize);
<anchor xml:id="__x_buffer_8cpp_source_1l01812"/>01812 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;memset(&amp;buffer[pos],&#32;0,&#32;psize);
<anchor xml:id="__x_buffer_8cpp_source_1l01813"/>01813 
<anchor xml:id="__x_buffer_8cpp_source_1l01814"/>01814 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pos==(<emphasis role="keywordtype">int</emphasis>)position)&#32;&#32;position&#32;+=&#32;psize;
<anchor xml:id="__x_buffer_8cpp_source_1l01815"/>01815 
<anchor xml:id="__x_buffer_8cpp_source_1l01816"/>01816 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01817"/>01817 
<anchor xml:id="__x_buffer_8cpp_source_1l01818"/>01818 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01819"/>01819 }
<anchor xml:id="__x_buffer_8cpp_source_1l01820"/>01820 
<anchor xml:id="__x_buffer_8cpp_source_1l01821"/>01821 
<anchor xml:id="__x_buffer_8cpp_source_1l01834"/><link linkend="_class_x_b_u_f_f_e_r_1a3059fcebc01cef8b808598145581545c">01834</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01835"/>01835 {
<anchor xml:id="__x_buffer_8cpp_source_1l01836"/>01836 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01837"/>01837 
<anchor xml:id="__x_buffer_8cpp_source_1l01838"/>01838 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos&#32;=&#32;topos;
<anchor xml:id="__x_buffer_8cpp_source_1l01839"/>01839 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(topos&#32;==&#32;<link linkend="__x_buffer_8h_1a819ef6df2bf7864ffdefd37a7d8c172a">XBUFFER_INVALIDPOSITION</link>)&#32;pos&#32;=&#32;position;
<anchor xml:id="__x_buffer_8cpp_source_1l01840"/>01840 
<anchor xml:id="__x_buffer_8cpp_source_1l01841"/>01841 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pos&gt;(<emphasis role="keywordtype">int</emphasis>)size)
<anchor xml:id="__x_buffer_8cpp_source_1l01842"/>01842 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01843"/>01843 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01844"/>01844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01845"/>01845 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01846"/>01846 
<anchor xml:id="__x_buffer_8cpp_source_1l01847"/>01847 &#32;&#32;buffer[pos]=&#32;data;
<anchor xml:id="__x_buffer_8cpp_source_1l01848"/>01848 
<anchor xml:id="__x_buffer_8cpp_source_1l01849"/>01849 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pos==(<emphasis role="keywordtype">int</emphasis>)position)&#32;position++;
<anchor xml:id="__x_buffer_8cpp_source_1l01850"/>01850 
<anchor xml:id="__x_buffer_8cpp_source_1l01851"/>01851 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l01852"/>01852 
<anchor xml:id="__x_buffer_8cpp_source_1l01853"/>01853 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01854"/>01854 }
<anchor xml:id="__x_buffer_8cpp_source_1l01855"/>01855 
<anchor xml:id="__x_buffer_8cpp_source_1l01856"/>01856 
<anchor xml:id="__x_buffer_8cpp_source_1l01869"/><link linkend="_class_x_b_u_f_f_e_r_1a81d98f6fcfdd5ab592fcf4762bfbab53">01869</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<emphasis role="keywordtype">bool</emphasis>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01870"/>01870 {
<anchor xml:id="__x_buffer_8cpp_source_1l01871"/>01871 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;_data&#32;=&#32;data?1:0;
<anchor xml:id="__x_buffer_8cpp_source_1l01872"/>01872 
<anchor xml:id="__x_buffer_8cpp_source_1l01873"/>01873 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">Set</link>(_data,&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l01874"/>01874 }
<anchor xml:id="__x_buffer_8cpp_source_1l01875"/>01875 
<anchor xml:id="__x_buffer_8cpp_source_1l01876"/>01876 
<anchor xml:id="__x_buffer_8cpp_source_1l01889"/><link linkend="_class_x_b_u_f_f_e_r_1addf562065dbb5c4f233a47f1d66c9862">01889</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01890"/>01890 {
<anchor xml:id="__x_buffer_8cpp_source_1l01891"/>01891 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1afacb625223a89d4cdf212ac4482a7e5c">SWAPWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01892"/>01892 
<anchor xml:id="__x_buffer_8cpp_source_1l01893"/>01893 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>),&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l01894"/>01894 }
<anchor xml:id="__x_buffer_8cpp_source_1l01895"/>01895 
<anchor xml:id="__x_buffer_8cpp_source_1l01896"/>01896 
<anchor xml:id="__x_buffer_8cpp_source_1l01909"/><link linkend="_class_x_b_u_f_f_e_r_1abcb2e7b74b0b5009181c386b24808626">01909</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01910"/>01910 {
<anchor xml:id="__x_buffer_8cpp_source_1l01911"/>01911 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01912"/>01912 
<anchor xml:id="__x_buffer_8cpp_source_1l01913"/>01913 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l01914"/>01914 }
<anchor xml:id="__x_buffer_8cpp_source_1l01915"/>01915 
<anchor xml:id="__x_buffer_8cpp_source_1l01916"/>01916 
<anchor xml:id="__x_buffer_8cpp_source_1l01929"/><link linkend="_class_x_b_u_f_f_e_r_1aedec11aa13d4136fcd300f4917d4959e">01929</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01930"/>01930 {
<anchor xml:id="__x_buffer_8cpp_source_1l01931"/>01931 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a0a01412990f8f070e16468914d231b68">SWAPQWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l01932"/>01932 
<anchor xml:id="__x_buffer_8cpp_source_1l01933"/>01933 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>),&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l01934"/>01934 }
<anchor xml:id="__x_buffer_8cpp_source_1l01935"/>01935 
<anchor xml:id="__x_buffer_8cpp_source_1l01936"/>01936 
<anchor xml:id="__x_buffer_8cpp_source_1l01949"/><link linkend="_class_x_b_u_f_f_e_r_1af684c4deae49d950a87cee80b0d349ad">01949</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<emphasis role="keywordtype">float</emphasis>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01950"/>01950 {
<anchor xml:id="__x_buffer_8cpp_source_1l01951"/>01951 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l01952"/>01952 }
<anchor xml:id="__x_buffer_8cpp_source_1l01953"/>01953 
<anchor xml:id="__x_buffer_8cpp_source_1l01954"/>01954 
<anchor xml:id="__x_buffer_8cpp_source_1l01967"/><link linkend="_class_x_b_u_f_f_e_r_1a04a759b59f5dccb02cef44b5d2d194c3">01967</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<emphasis role="keywordtype">double</emphasis>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01968"/>01968 {
<anchor xml:id="__x_buffer_8cpp_source_1l01969"/>01969 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>),&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l01970"/>01970 }
<anchor xml:id="__x_buffer_8cpp_source_1l01971"/>01971 
<anchor xml:id="__x_buffer_8cpp_source_1l01972"/>01972 
<anchor xml:id="__x_buffer_8cpp_source_1l01985"/><link linkend="_class_x_b_u_f_f_e_r_1aaa70c3353e9041c7443c2541e48585ff">01985</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">XBUFFER::Set</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos)
<anchor xml:id="__x_buffer_8cpp_source_1l01986"/>01986 {
<anchor xml:id="__x_buffer_8cpp_source_1l01987"/>01987 &#32;&#32;<emphasis role="comment">//&#32;should&#32;create&#32;temporary&#32;array&#32;and&#32;then&#32;put&#32;that</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l01988"/>01988 &#32;&#32;<emphasis role="comment">//&#32;but&#32;on&#32;stack&#32;it&apos;s&#32;too&#32;much?</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l01989"/>01989 
<anchor xml:id="__x_buffer_8cpp_source_1l01990"/>01990 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*&#32;tmp&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>[data.<link linkend="_class_x_s_t_r_i_n_g_1a7c3fa0dd7b650399470c76192fbd4916">GetSize</link>()];
<anchor xml:id="__x_buffer_8cpp_source_1l01991"/>01991 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!tmp)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l01992"/>01992 
<anchor xml:id="__x_buffer_8cpp_source_1l01993"/>01993 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;data.<link linkend="_class_x_s_t_r_i_n_g_1a7c3fa0dd7b650399470c76192fbd4916">GetSize</link>();&#32;i++)
<anchor xml:id="__x_buffer_8cpp_source_1l01994"/>01994 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l01995"/>01995 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;_data&#32;=&#32;data[i];
<anchor xml:id="__x_buffer_8cpp_source_1l01996"/>01996 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(localhardwareuselittleendian)&#32;<link linkend="__x_base_8h_1a3a8bb12790711eb5164bf14eecd1cc4b">SWAPDWORD</link>(_data);
<anchor xml:id="__x_buffer_8cpp_source_1l01997"/>01997 &#32;&#32;&#32;&#32;&#32;&#32;tmp[i]&#32;=&#32;_data;
<anchor xml:id="__x_buffer_8cpp_source_1l01998"/>01998 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l01999"/>01999 
<anchor xml:id="__x_buffer_8cpp_source_1l02000"/>02000 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)tmp,&#32;data.<link linkend="_class_x_s_t_r_i_n_g_1a7c3fa0dd7b650399470c76192fbd4916">GetSize</link>()*<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>),&#32;topos))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02001"/>02001 
<anchor xml:id="__x_buffer_8cpp_source_1l02002"/>02002 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;tmp;
<anchor xml:id="__x_buffer_8cpp_source_1l02003"/>02003 
<anchor xml:id="__x_buffer_8cpp_source_1l02004"/>02004 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02005"/>02005 }
<anchor xml:id="__x_buffer_8cpp_source_1l02006"/>02006 
<anchor xml:id="__x_buffer_8cpp_source_1l02007"/>02007 
<anchor xml:id="__x_buffer_8cpp_source_1l02021"/><link linkend="_class_x_b_u_f_f_e_r_1a57ba9632c6a694b0eeba560e16b6aad8">02021</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a57ba9632c6a694b0eeba560e16b6aad8">XBUFFER::SetWithMaskArg</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l02022"/>02022 {
<anchor xml:id="__x_buffer_8cpp_source_1l02023"/>02023 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbuffer;
<anchor xml:id="__x_buffer_8cpp_source_1l02024"/>02024 
<anchor xml:id="__x_buffer_8cpp_source_1l02025"/>02025 &#32;&#32;AddXBufferWithMask(xbuffer,&#32;mask,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l02026"/>02026 
<anchor xml:id="__x_buffer_8cpp_source_1l02027"/>02027 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">Set</link>(xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>(),&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l02028"/>02028 
<anchor xml:id="__x_buffer_8cpp_source_1l02029"/>02029 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02030"/>02030 }
<anchor xml:id="__x_buffer_8cpp_source_1l02031"/>02031 
<anchor xml:id="__x_buffer_8cpp_source_1l02032"/>02032 
<anchor xml:id="__x_buffer_8cpp_source_1l02046"/><link linkend="_class_x_b_u_f_f_e_r_1a4a98a5e2773f4d92f51d41c624e364c1">02046</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a57ba9632c6a694b0eeba560e16b6aad8">XBUFFER::SetWithMaskArg</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l02047"/>02047 {
<anchor xml:id="__x_buffer_8cpp_source_1l02048"/>02048 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02049"/>02049 
<anchor xml:id="__x_buffer_8cpp_source_1l02050"/>02050 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a57ba9632c6a694b0eeba560e16b6aad8">SetWithMaskArg</link>(mask-&gt;<link linkend="_class_x_s_t_r_i_n_g_1ad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;topos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l02051"/>02051 }
<anchor xml:id="__x_buffer_8cpp_source_1l02052"/>02052 
<anchor xml:id="__x_buffer_8cpp_source_1l02053"/>02053 
<anchor xml:id="__x_buffer_8cpp_source_1l02067"/><link linkend="_class_x_b_u_f_f_e_r_1a777a52f0e08d7d4aa263b5dfce82adfd">02067</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a777a52f0e08d7d4aa263b5dfce82adfd">XBUFFER::SetWithMask</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l02068"/>02068 {
<anchor xml:id="__x_buffer_8cpp_source_1l02069"/>02069 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02070"/>02070 
<anchor xml:id="__x_buffer_8cpp_source_1l02071"/>02071 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l02072"/>02072 
<anchor xml:id="__x_buffer_8cpp_source_1l02073"/>02073 &#32;&#32;va_start(arg,&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l02074"/>02074 
<anchor xml:id="__x_buffer_8cpp_source_1l02075"/>02075 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;result&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a57ba9632c6a694b0eeba560e16b6aad8">SetWithMaskArg</link>(mask,&#32;topos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l02076"/>02076 
<anchor xml:id="__x_buffer_8cpp_source_1l02077"/>02077 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l02078"/>02078 
<anchor xml:id="__x_buffer_8cpp_source_1l02079"/>02079 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__x_buffer_8cpp_source_1l02080"/>02080 }
<anchor xml:id="__x_buffer_8cpp_source_1l02081"/>02081 
<anchor xml:id="__x_buffer_8cpp_source_1l02082"/>02082 
<anchor xml:id="__x_buffer_8cpp_source_1l02096"/><link linkend="_class_x_b_u_f_f_e_r_1aea2109d7332ac0aa544a3d727ea1a35b">02096</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a777a52f0e08d7d4aa263b5dfce82adfd">XBUFFER::SetWithMask</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;topos,&#32;...)
<anchor xml:id="__x_buffer_8cpp_source_1l02097"/>02097 {
<anchor xml:id="__x_buffer_8cpp_source_1l02098"/>02098 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02099"/>02099 
<anchor xml:id="__x_buffer_8cpp_source_1l02100"/>02100 &#32;&#32;va_list&#32;&#32;arg;
<anchor xml:id="__x_buffer_8cpp_source_1l02101"/>02101 
<anchor xml:id="__x_buffer_8cpp_source_1l02102"/>02102 &#32;&#32;va_start(arg,&#32;topos);
<anchor xml:id="__x_buffer_8cpp_source_1l02103"/>02103 
<anchor xml:id="__x_buffer_8cpp_source_1l02104"/>02104 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;result&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a57ba9632c6a694b0eeba560e16b6aad8">SetWithMaskArg</link>(mask,&#32;topos,&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l02105"/>02105 
<anchor xml:id="__x_buffer_8cpp_source_1l02106"/>02106 &#32;&#32;va_end(arg);
<anchor xml:id="__x_buffer_8cpp_source_1l02107"/>02107 
<anchor xml:id="__x_buffer_8cpp_source_1l02108"/>02108 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__x_buffer_8cpp_source_1l02109"/>02109 }
<anchor xml:id="__x_buffer_8cpp_source_1l02110"/>02110 
<anchor xml:id="__x_buffer_8cpp_source_1l02111"/>02111 
<anchor xml:id="__x_buffer_8cpp_source_1l02124"/><link linkend="_class_x_b_u_f_f_e_r_1acf69e379f1d0bf812ae9c1157eac172c">02124</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1acf69e379f1d0bf812ae9c1157eac172c">XBUFFER::Resize</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;newsize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;setblocked)
<anchor xml:id="__x_buffer_8cpp_source_1l02125"/>02125 {
<anchor xml:id="__x_buffer_8cpp_source_1l02126"/>02126 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02127"/>02127 
<anchor xml:id="__x_buffer_8cpp_source_1l02128"/>02128 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(setblocked)&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02129"/>02129 
<anchor xml:id="__x_buffer_8cpp_source_1l02130"/>02130 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!newsize)
<anchor xml:id="__x_buffer_8cpp_source_1l02131"/>02131 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02132"/>02132 &#32;&#32;&#32;&#32;&#32;&#32;size&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02133"/>02133 &#32;&#32;&#32;&#32;&#32;&#32;position&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02134"/>02134 
<anchor xml:id="__x_buffer_8cpp_source_1l02135"/>02135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(sizeassign)&#32;memset(buffer,&#32;0,&#32;&#32;sizeassign);
<anchor xml:id="__x_buffer_8cpp_source_1l02136"/>02136 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02137"/>02137 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l02138"/>02138 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02139"/>02139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(newsize&#32;&gt;&#32;sizeassign)
<anchor xml:id="__x_buffer_8cpp_source_1l02140"/>02140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02141"/>02141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;newbuffer&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02142"/>02142 
<anchor xml:id="__x_buffer_8cpp_source_1l02143"/>02143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizeassign&#32;=&#32;(newsize&#32;+&#32;<link linkend="__x_buffer_8h_1a36f6d93093964becd948bbc06439c4c6">XBUFFER_BLOCKMEM</link>);&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02144"/>02144 
<anchor xml:id="__x_buffer_8cpp_source_1l02145"/>02145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newbuffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>[sizeassign];
<anchor xml:id="__x_buffer_8cpp_source_1l02146"/>02146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(newbuffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02147"/>02147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02148"/>02148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(newbuffer&#32;,&#32;0,&#32;&#32;sizeassign);
<anchor xml:id="__x_buffer_8cpp_source_1l02149"/>02149 
<anchor xml:id="__x_buffer_8cpp_source_1l02150"/>02150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02151"/>02151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02152"/>02152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(newbuffer&#32;,&#32;buffer,&#32;size);
<anchor xml:id="__x_buffer_8cpp_source_1l02153"/>02153 
<anchor xml:id="__x_buffer_8cpp_source_1l02154"/>02154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;buffer;
<anchor xml:id="__x_buffer_8cpp_source_1l02155"/>02155 
<anchor xml:id="__x_buffer_8cpp_source_1l02156"/>02156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02157"/>02157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02158"/>02158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02159"/>02159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02160"/>02160 
<anchor xml:id="__x_buffer_8cpp_source_1l02161"/>02161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;&#32;&#32;&#32;&#32;&#32;=&#32;newbuffer;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02162"/>02162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;newsize;
<anchor xml:id="__x_buffer_8cpp_source_1l02163"/>02163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02164"/>02164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02165"/>02165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l02166"/>02166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02167"/>02167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02168"/>02168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02169"/>02169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02170"/>02170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l02171"/>02171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02172"/>02172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;newsize;
<anchor xml:id="__x_buffer_8cpp_source_1l02173"/>02173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02174"/>02174 
<anchor xml:id="__x_buffer_8cpp_source_1l02175"/>02175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(sizeassign&#32;&gt;&#32;size)
<anchor xml:id="__x_buffer_8cpp_source_1l02176"/>02176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02177"/>02177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(&amp;buffer[size],&#32;0,&#32;(sizeassign-size));
<anchor xml:id="__x_buffer_8cpp_source_1l02178"/>02178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02179"/>02179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02180"/>02180 
<anchor xml:id="__x_buffer_8cpp_source_1l02181"/>02181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(size)
<anchor xml:id="__x_buffer_8cpp_source_1l02182"/>02182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02183"/>02183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(position&gt;=size)&#32;position&#32;=&#32;(size-1);
<anchor xml:id="__x_buffer_8cpp_source_1l02184"/>02184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02185"/>02185 &#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02186"/>02186 
<anchor xml:id="__x_buffer_8cpp_source_1l02187"/>02187 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(setblocked)&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02188"/>02188 
<anchor xml:id="__x_buffer_8cpp_source_1l02189"/>02189 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l02190"/>02190 }
<anchor xml:id="__x_buffer_8cpp_source_1l02191"/>02191 
<anchor xml:id="__x_buffer_8cpp_source_1l02192"/>02192 
<anchor xml:id="__x_buffer_8cpp_source_1l02204"/><link linkend="_class_x_b_u_f_f_e_r_1a0395231705663a2aeeee3b4be9d292bb">02204</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a0395231705663a2aeeee3b4be9d292bb">XBUFFER::Delete</link>(<emphasis role="keywordtype">bool</emphasis>&#32;setblocked)
<anchor xml:id="__x_buffer_8cpp_source_1l02205"/>02205 {
<anchor xml:id="__x_buffer_8cpp_source_1l02206"/>02206 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(setblocked)&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02207"/>02207 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02208"/>02208 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02209"/>02209 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02210"/>02210 
<anchor xml:id="__x_buffer_8cpp_source_1l02211"/>02211 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(buffer)&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;buffer;
<anchor xml:id="__x_buffer_8cpp_source_1l02212"/>02212 
<anchor xml:id="__x_buffer_8cpp_source_1l02213"/>02213 &#32;&#32;buffer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02214"/>02214 &#32;&#32;size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02215"/>02215 &#32;&#32;sizeassign&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02216"/>02216 &#32;&#32;position&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02217"/>02217 
<anchor xml:id="__x_buffer_8cpp_source_1l02218"/>02218 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(setblocked)&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02219"/>02219 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02220"/>02220 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02221"/>02221 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02222"/>02222 
<anchor xml:id="__x_buffer_8cpp_source_1l02223"/>02223 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02224"/>02224 }
<anchor xml:id="__x_buffer_8cpp_source_1l02225"/>02225 
<anchor xml:id="__x_buffer_8cpp_source_1l02226"/>02226 
<anchor xml:id="__x_buffer_8cpp_source_1l02238"/><link linkend="_class_x_b_u_f_f_e_r_1a8a6897988fdcf361b48b20497933d911">02238</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a8a6897988fdcf361b48b20497933d911">XBUFFER::FillBuffer</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;fillchar)
<anchor xml:id="__x_buffer_8cpp_source_1l02239"/>02239 {
<anchor xml:id="__x_buffer_8cpp_source_1l02240"/>02240 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02241"/>02241 
<anchor xml:id="__x_buffer_8cpp_source_1l02242"/>02242 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02243"/>02243 
<anchor xml:id="__x_buffer_8cpp_source_1l02244"/>02244 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(buffer&#32;&amp;&amp;&#32;size)
<anchor xml:id="__x_buffer_8cpp_source_1l02245"/>02245 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02246"/>02246 &#32;&#32;&#32;&#32;&#32;&#32;memset(buffer,&#32;fillchar,&#32;&#32;size);
<anchor xml:id="__x_buffer_8cpp_source_1l02247"/>02247 &#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02248"/>02248 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02249"/>02249 
<anchor xml:id="__x_buffer_8cpp_source_1l02250"/>02250 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02251"/>02251 
<anchor xml:id="__x_buffer_8cpp_source_1l02252"/>02252 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l02253"/>02253 }
<anchor xml:id="__x_buffer_8cpp_source_1l02254"/>02254 
<anchor xml:id="__x_buffer_8cpp_source_1l02255"/>02255 
<anchor xml:id="__x_buffer_8cpp_source_1l02265"/><link linkend="_class_x_b_u_f_f_e_r_1a3c14ba0ca9dfbf20b5127c87b275cb93">02265</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a3c14ba0ca9dfbf20b5127c87b275cb93">XBUFFER::Empty</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02266"/>02266 &#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02267"/>02267 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a0395231705663a2aeeee3b4be9d292bb">Delete</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02268"/>02268 &#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02269"/>02269 
<anchor xml:id="__x_buffer_8cpp_source_1l02270"/>02270 
<anchor xml:id="__x_buffer_8cpp_source_1l02280"/><link linkend="_class_x_b_u_f_f_e_r_1a4841c0758209bc06765cad53588a38b6">02280</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a4841c0758209bc06765cad53588a38b6">XBUFFER::Swap</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02281"/>02281 {
<anchor xml:id="__x_buffer_8cpp_source_1l02282"/>02282 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02283"/>02283 
<anchor xml:id="__x_buffer_8cpp_source_1l02284"/>02284 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;(int)(size/2);&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02285"/>02285 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02286"/>02286 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;tembyte;
<anchor xml:id="__x_buffer_8cpp_source_1l02287"/>02287 
<anchor xml:id="__x_buffer_8cpp_source_1l02288"/>02288 &#32;&#32;&#32;&#32;&#32;&#32;tembyte&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;buffer[c];
<anchor xml:id="__x_buffer_8cpp_source_1l02289"/>02289 &#32;&#32;&#32;&#32;&#32;&#32;buffer[c]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;buffer[size-c-1];
<anchor xml:id="__x_buffer_8cpp_source_1l02290"/>02290 &#32;&#32;&#32;&#32;&#32;&#32;buffer[size-c-1]&#32;=&#32;tembyte;
<anchor xml:id="__x_buffer_8cpp_source_1l02291"/>02291 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02292"/>02292 
<anchor xml:id="__x_buffer_8cpp_source_1l02293"/>02293 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02294"/>02294 
<anchor xml:id="__x_buffer_8cpp_source_1l02295"/>02295 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02296"/>02296 }
<anchor xml:id="__x_buffer_8cpp_source_1l02297"/>02297 
<anchor xml:id="__x_buffer_8cpp_source_1l02298"/>02298 
<anchor xml:id="__x_buffer_8cpp_source_1l02311"/><link linkend="_class_x_b_u_f_f_e_r_1a0650c6eebd99977ab9998ed2404843f5">02311</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a0650c6eebd99977ab9998ed2404843f5">XBUFFER::Compare</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;pbuffer,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize)
<anchor xml:id="__x_buffer_8cpp_source_1l02312"/>02312 {
<anchor xml:id="__x_buffer_8cpp_source_1l02313"/>02313 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!pbuffer)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02314"/>02314 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!psize)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02315"/>02315 
<anchor xml:id="__x_buffer_8cpp_source_1l02316"/>02316 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l02317"/>02317 
<anchor xml:id="__x_buffer_8cpp_source_1l02318"/>02318 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02319"/>02319 
<anchor xml:id="__x_buffer_8cpp_source_1l02320"/>02320 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(psize&#32;!=&#32;size)
<anchor xml:id="__x_buffer_8cpp_source_1l02321"/>02321 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02322"/>02322 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02323"/>02323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02324"/>02324 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02325"/>02325 
<anchor xml:id="__x_buffer_8cpp_source_1l02326"/>02326 &#32;&#32;status&#32;=&#32;(memcmp(pbuffer,&#32;buffer,&#32;psize)&#32;==&#32;0);
<anchor xml:id="__x_buffer_8cpp_source_1l02327"/>02327 
<anchor xml:id="__x_buffer_8cpp_source_1l02328"/>02328 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7f7fefde5619da5cfb66dc34f4cd4b08">SetBlocked</link>(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02329"/>02329 
<anchor xml:id="__x_buffer_8cpp_source_1l02330"/>02330 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l02331"/>02331 }
<anchor xml:id="__x_buffer_8cpp_source_1l02332"/>02332 
<anchor xml:id="__x_buffer_8cpp_source_1l02333"/>02333 
<anchor xml:id="__x_buffer_8cpp_source_1l02345"/><link linkend="_class_x_b_u_f_f_e_r_1a03f1ea9a04c317a28f934c1f7419c1ac">02345</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a0650c6eebd99977ab9998ed2404843f5">XBUFFER::Compare</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>*&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02346"/>02346 {
<anchor xml:id="__x_buffer_8cpp_source_1l02347"/>02347 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!buffer)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02348"/>02348 
<anchor xml:id="__x_buffer_8cpp_source_1l02349"/>02349 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a0650c6eebd99977ab9998ed2404843f5">Compare</link>(buffer-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;buffer-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>());
<anchor xml:id="__x_buffer_8cpp_source_1l02350"/>02350 }
<anchor xml:id="__x_buffer_8cpp_source_1l02351"/>02351 
<anchor xml:id="__x_buffer_8cpp_source_1l02352"/>02352 
<anchor xml:id="__x_buffer_8cpp_source_1l02364"/><link linkend="_class_x_b_u_f_f_e_r_1a8dcdee71266fcc3a4ac754622f207b1f">02364</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a0650c6eebd99977ab9998ed2404843f5">XBUFFER::Compare</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02365"/>02365 {
<anchor xml:id="__x_buffer_8cpp_source_1l02366"/>02366 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a0650c6eebd99977ab9998ed2404843f5">Compare</link>(&amp;buffer);
<anchor xml:id="__x_buffer_8cpp_source_1l02367"/>02367 }
<anchor xml:id="__x_buffer_8cpp_source_1l02368"/>02368 
<anchor xml:id="__x_buffer_8cpp_source_1l02369"/>02369 
<anchor xml:id="__x_buffer_8cpp_source_1l02382"/><link linkend="_class_x_b_u_f_f_e_r_1a5ee4eef8129589bea780bdb56c1834d3">02382</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a5ee4eef8129589bea780bdb56c1834d3">XBUFFER::Find</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>*&#32;buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;startindex)
<anchor xml:id="__x_buffer_8cpp_source_1l02383"/>02383 {
<anchor xml:id="__x_buffer_8cpp_source_1l02384"/>02384 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!buffer)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02385"/>02385 
<anchor xml:id="__x_buffer_8cpp_source_1l02386"/>02386 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_class_x_b_u_f_f_e_r_1a0007f465be1385ea663397e502c5280e">IsEmpty</link>())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02387"/>02387 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!buffer-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02388"/>02388 
<anchor xml:id="__x_buffer_8cpp_source_1l02389"/>02389 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;_buffer&#32;=&#32;buffer-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02390"/>02390 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;_size&#32;&#32;&#32;=&#32;buffer-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02391"/>02391 
<anchor xml:id="__x_buffer_8cpp_source_1l02392"/>02392 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_size&#32;&gt;&#32;size)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02393"/>02393 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(startindex&gt;=(<emphasis role="keywordtype">int</emphasis>)(size-_size)+1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02394"/>02394 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(startindex&lt;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02395"/>02395 
<anchor xml:id="__x_buffer_8cpp_source_1l02396"/>02396 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found;
<anchor xml:id="__x_buffer_8cpp_source_1l02397"/>02397 
<anchor xml:id="__x_buffer_8cpp_source_1l02398"/>02398 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=startindex;&#32;c&lt;(size-_size)+1;&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02399"/>02399 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02400"/>02400 &#32;&#32;&#32;&#32;&#32;&#32;found&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02401"/>02401 
<anchor xml:id="__x_buffer_8cpp_source_1l02402"/>02402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;d=0;&#32;d&lt;_size;&#32;d++)
<anchor xml:id="__x_buffer_8cpp_source_1l02403"/>02403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02404"/>02404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(this-&gt;buffer[c+d]&#32;!=&#32;_buffer[d])
<anchor xml:id="__x_buffer_8cpp_source_1l02405"/>02405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02406"/>02406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;found&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02407"/>02407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02408"/>02408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02409"/>02409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02410"/>02410 
<anchor xml:id="__x_buffer_8cpp_source_1l02411"/>02411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(found)&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="__x_buffer_8cpp_source_1l02412"/>02412 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02413"/>02413 
<anchor xml:id="__x_buffer_8cpp_source_1l02414"/>02414 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1ad96490cc68537c8d1797ed2a62489836">NOTFOUND</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l02415"/>02415 }
<anchor xml:id="__x_buffer_8cpp_source_1l02416"/>02416 
<anchor xml:id="__x_buffer_8cpp_source_1l02417"/>02417 
<anchor xml:id="__x_buffer_8cpp_source_1l02431"/><link linkend="_class_x_b_u_f_f_e_r_1ae76f1f546bd2988e1cd80db97749a873">02431</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a5ee4eef8129589bea780bdb56c1834d3">XBUFFER::Find</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;<emphasis role="keywordtype">string</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize,&#32;<emphasis role="keywordtype">int</emphasis>&#32;startindex)
<anchor xml:id="__x_buffer_8cpp_source_1l02432"/>02432 {
<anchor xml:id="__x_buffer_8cpp_source_1l02433"/>02433 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;buffer;
<anchor xml:id="__x_buffer_8cpp_source_1l02434"/>02434 
<anchor xml:id="__x_buffer_8cpp_source_1l02435"/>02435 &#32;&#32;buffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(<emphasis role="keywordtype">string</emphasis>,&#32;normalize);
<anchor xml:id="__x_buffer_8cpp_source_1l02436"/>02436 
<anchor xml:id="__x_buffer_8cpp_source_1l02437"/>02437 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a5ee4eef8129589bea780bdb56c1834d3">XBUFFER::Find</link>(&amp;buffer,&#32;startindex);
<anchor xml:id="__x_buffer_8cpp_source_1l02438"/>02438 }
<anchor xml:id="__x_buffer_8cpp_source_1l02439"/>02439 
<anchor xml:id="__x_buffer_8cpp_source_1l02440"/>02440 
<anchor xml:id="__x_buffer_8cpp_source_1l02452"/><link linkend="_class_x_b_u_f_f_e_r_1ad9853b9a078498602c2781a9f45fbe36">02452</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9853b9a078498602c2781a9f45fbe36">XBUFFER::operator =  </link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02453"/>02453 {
<anchor xml:id="__x_buffer_8cpp_source_1l02454"/>02454 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1afc53f10185dc4d03cb99dfa959de19d1">CopyFrom</link>((<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;)xbuffer);
<anchor xml:id="__x_buffer_8cpp_source_1l02455"/>02455 }
<anchor xml:id="__x_buffer_8cpp_source_1l02456"/>02456 
<anchor xml:id="__x_buffer_8cpp_source_1l02457"/>02457 
<anchor xml:id="__x_buffer_8cpp_source_1l02469"/><link linkend="_class_x_b_u_f_f_e_r_1a7436554774630bd8c44bd6b5f1d0d81c">02469</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a7436554774630bd8c44bd6b5f1d0d81c">XBUFFER::operator == </link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02470"/>02470 {&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02471"/>02471 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02472"/>02472 }
<anchor xml:id="__x_buffer_8cpp_source_1l02473"/>02473 
<anchor xml:id="__x_buffer_8cpp_source_1l02474"/>02474 
<anchor xml:id="__x_buffer_8cpp_source_1l02486"/><link linkend="_class_x_b_u_f_f_e_r_1acfa96cdc13f2eec890597a10c8f18c34">02486</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1acfa96cdc13f2eec890597a10c8f18c34">XBUFFER::operator != </link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02487"/>02487 {&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02488"/>02488 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02489"/>02489 }
<anchor xml:id="__x_buffer_8cpp_source_1l02490"/>02490 
<anchor xml:id="__x_buffer_8cpp_source_1l02491"/>02491 
<anchor xml:id="__x_buffer_8cpp_source_1l02503"/><link linkend="_class_x_b_u_f_f_e_r_1afc53f10185dc4d03cb99dfa959de19d1">02503</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1afc53f10185dc4d03cb99dfa959de19d1">XBUFFER::CopyFrom</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02504"/>02504 {
<anchor xml:id="__x_buffer_8cpp_source_1l02505"/>02505 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a3c14ba0ca9dfbf20b5127c87b275cb93">Empty</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02506"/>02506 
<anchor xml:id="__x_buffer_8cpp_source_1l02507"/>02507 &#32;&#32;localhardwareuselittleendian&#32;=&#32;buffer.<link linkend="_class_x_b_u_f_f_e_r_1aa0dd34f8ec0e800a96622c42c6e6ccf1">GetLocalHardwareUseLittleEndian</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02508"/>02508 &#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02509"/>02509 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(buffer.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;buffer.<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>());
<anchor xml:id="__x_buffer_8cpp_source_1l02510"/>02510 }
<anchor xml:id="__x_buffer_8cpp_source_1l02511"/>02511 
<anchor xml:id="__x_buffer_8cpp_source_1l02512"/>02512 
<anchor xml:id="__x_buffer_8cpp_source_1l02524"/><link linkend="_class_x_b_u_f_f_e_r_1a5888e0469358223f9008bfdfe54865b1">02524</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a5888e0469358223f9008bfdfe54865b1">XBUFFER::CopyTo</link>(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;buffer)
<anchor xml:id="__x_buffer_8cpp_source_1l02525"/>02525 {
<anchor xml:id="__x_buffer_8cpp_source_1l02526"/>02526 &#32;&#32;buffer.<link linkend="_class_x_b_u_f_f_e_r_1a3c14ba0ca9dfbf20b5127c87b275cb93">Empty</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02527"/>02527 
<anchor xml:id="__x_buffer_8cpp_source_1l02528"/>02528 &#32;&#32;buffer.<link linkend="_class_x_b_u_f_f_e_r_1a0db241bb6c353478652138e31b798696">SetLocalHardwareUseLittleEndian</link>(localhardwareuselittleendian);
<anchor xml:id="__x_buffer_8cpp_source_1l02529"/>02529 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02530"/>02530 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>());
<anchor xml:id="__x_buffer_8cpp_source_1l02531"/>02531 }
<anchor xml:id="__x_buffer_8cpp_source_1l02532"/>02532 
<anchor xml:id="__x_buffer_8cpp_source_1l02533"/>02533 
<anchor xml:id="__x_buffer_8cpp_source_1l02546"/><link linkend="_class_x_b_u_f_f_e_r_1a5db6b2fa07edc08e214e0543439de409">02546</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a5db6b2fa07edc08e214e0543439de409">XBUFFER::Padding_Add</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;bitsadjust,&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35">XBUFFER_PADDINGTYPE</link>&#32;type)
<anchor xml:id="__x_buffer_8cpp_source_1l02547"/>02547 {
<anchor xml:id="__x_buffer_8cpp_source_1l02548"/>02548 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(paddinghas)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02549"/>02549 
<anchor xml:id="__x_buffer_8cpp_source_1l02550"/>02550 &#32;&#32;paddingbitadjust&#32;=&#32;bitsadjust;
<anchor xml:id="__x_buffer_8cpp_source_1l02551"/>02551 &#32;&#32;paddingsize&#32;&#32;&#32;&#32;&#32;=&#32;bitsadjust&#32;-&#32;(size&#32;%&#32;bitsadjust);
<anchor xml:id="__x_buffer_8cpp_source_1l02552"/>02552 
<anchor xml:id="__x_buffer_8cpp_source_1l02553"/>02553 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(type)
<anchor xml:id="__x_buffer_8cpp_source_1l02554"/>02554 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02555"/>02555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35a73cc7eccafab0ae74dfc3669e9fdb2ad">XBUFFER_PADDINGTYPE_ZEROS</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="__x_buffer_8cpp_source_1l02556"/>02556 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35ae7a60919fb522a3dfbec58611890bdda">XBUFFER_PADDINGTYPE_SPACES</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="__x_buffer_8cpp_source_1l02557"/>02557 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35a2f525c252e68d1a0f1c943926ed2d439">XBUFFER_PADDINGTYPE_PKCS7</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="__x_buffer_8cpp_source_1l02558"/>02558 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35abc0e73b3b4f382979fe7bf2322e7cf77">XBUFFER_PADDINGTYPE_PKCS5</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;c&lt;paddingsize;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02559"/>02559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02560"/>02560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(type)
<anchor xml:id="__x_buffer_8cpp_source_1l02561"/>02561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02562"/>02562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35a73cc7eccafab0ae74dfc3669e9fdb2ad">XBUFFER_PADDINGTYPE_ZEROS</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0x00);
<anchor xml:id="__x_buffer_8cpp_source_1l02563"/>02563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02564"/>02564 
<anchor xml:id="__x_buffer_8cpp_source_1l02565"/>02565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35ae7a60919fb522a3dfbec58611890bdda">XBUFFER_PADDINGTYPE_SPACES</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0x20);
<anchor xml:id="__x_buffer_8cpp_source_1l02566"/>02566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02567"/>02567 
<anchor xml:id="__x_buffer_8cpp_source_1l02568"/>02568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35a2f525c252e68d1a0f1c943926ed2d439">XBUFFER_PADDINGTYPE_PKCS7</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="__x_buffer_8cpp_source_1l02569"/>02569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35abc0e73b3b4f382979fe7bf2322e7cf77">XBUFFER_PADDINGTYPE_PKCS5</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)paddingsize);
<anchor xml:id="__x_buffer_8cpp_source_1l02570"/>02570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02571"/>02571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02572"/>02572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02573"/>02573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02574"/>02574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02575"/>02575 
<anchor xml:id="__x_buffer_8cpp_source_1l02576"/>02576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35a85f637ad3a6a612ff85d5a22247c5847">XBUFFER_PADDINGTYPE_ANSIX923</link>&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;c&lt;paddingsize-1;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02577"/>02577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02578"/>02578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0x00);
<anchor xml:id="__x_buffer_8cpp_source_1l02579"/>02579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02580"/>02580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)paddingsize);
<anchor xml:id="__x_buffer_8cpp_source_1l02581"/>02581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02582"/>02582 
<anchor xml:id="__x_buffer_8cpp_source_1l02583"/>02583 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35aba807d6306d2c81b6a11b6509a5be5fa">XBUFFER_PADDINGTYPE_ISO10126</link>&#32;&#32;&#32;&#32;&#32;:&#32;{&#32;<link linkend="_class_x_r_a_n_d">XRAND</link>*&#32;GEN_XFACTORY_CREATE(xrand,&#32;CreateRand())
<anchor xml:id="__x_buffer_8cpp_source_1l02584"/>02584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xrand)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02585"/>02585 
<anchor xml:id="__x_buffer_8cpp_source_1l02586"/>02586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;c&lt;paddingsize-1;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02587"/>02587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02588"/>02588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0x00);
<anchor xml:id="__x_buffer_8cpp_source_1l02589"/>02589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02590"/>02590 
<anchor xml:id="__x_buffer_8cpp_source_1l02591"/>02591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)paddingsize);
<anchor xml:id="__x_buffer_8cpp_source_1l02592"/>02592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GEN_XFACTORY.DeleteRand(xrand);
<anchor xml:id="__x_buffer_8cpp_source_1l02593"/>02593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02594"/>02594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02595"/>02595 
<anchor xml:id="__x_buffer_8cpp_source_1l02596"/>02596 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35a15ad0c568cf9433f50488a5237923329">XBUFFER_PADDINGTYPE_ISOIEC7816_4</link>&#32;:&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0x80);
<anchor xml:id="__x_buffer_8cpp_source_1l02597"/>02597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;c&lt;paddingsize-1;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02598"/>02598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02599"/>02599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0x00);
<anchor xml:id="__x_buffer_8cpp_source_1l02600"/>02600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02601"/>02601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02602"/>02602 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02603"/>02603 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02604"/>02604 
<anchor xml:id="__x_buffer_8cpp_source_1l02605"/>02605 &#32;&#32;paddinghas&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02606"/>02606 
<anchor xml:id="__x_buffer_8cpp_source_1l02607"/>02607 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02608"/>02608 }
<anchor xml:id="__x_buffer_8cpp_source_1l02609"/>02609 
<anchor xml:id="__x_buffer_8cpp_source_1l02610"/>02610 
<anchor xml:id="__x_buffer_8cpp_source_1l02620"/><link linkend="_class_x_b_u_f_f_e_r_1a2f1de90177164696ef36eb5d55351fbd">02620</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a2f1de90177164696ef36eb5d55351fbd">XBUFFER::Padding_Has</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02621"/>02621 {
<anchor xml:id="__x_buffer_8cpp_source_1l02622"/>02622 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;paddinghas;
<anchor xml:id="__x_buffer_8cpp_source_1l02623"/>02623 }
<anchor xml:id="__x_buffer_8cpp_source_1l02624"/>02624 
<anchor xml:id="__x_buffer_8cpp_source_1l02625"/>02625 
<anchor xml:id="__x_buffer_8cpp_source_1l02635"/><link linkend="_class_x_b_u_f_f_e_r_1a596d87c3bcaf6788e261a20fa2135fdf">02635</link> <link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35">XBUFFER_PADDINGTYPE</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a596d87c3bcaf6788e261a20fa2135fdf">XBUFFER::Padding_GetType</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02636"/>02636 {
<anchor xml:id="__x_buffer_8cpp_source_1l02637"/>02637 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;paddingtype;
<anchor xml:id="__x_buffer_8cpp_source_1l02638"/>02638 }
<anchor xml:id="__x_buffer_8cpp_source_1l02639"/>02639 
<anchor xml:id="__x_buffer_8cpp_source_1l02640"/>02640 
<anchor xml:id="__x_buffer_8cpp_source_1l02650"/><link linkend="_class_x_b_u_f_f_e_r_1a70e929caf10b7af812b0f831829d8d9b">02650</link> <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a70e929caf10b7af812b0f831829d8d9b">XBUFFER::Padding_GetSize</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02651"/>02651 {
<anchor xml:id="__x_buffer_8cpp_source_1l02652"/>02652 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;paddingsize;
<anchor xml:id="__x_buffer_8cpp_source_1l02653"/>02653 }
<anchor xml:id="__x_buffer_8cpp_source_1l02654"/>02654 
<anchor xml:id="__x_buffer_8cpp_source_1l02655"/>02655 
<anchor xml:id="__x_buffer_8cpp_source_1l02665"/><link linkend="_class_x_b_u_f_f_e_r_1a4c0dba30c747eea8e17417333d4972f7">02665</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a4c0dba30c747eea8e17417333d4972f7">XBUFFER::Padding_Delete</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02666"/>02666 {
<anchor xml:id="__x_buffer_8cpp_source_1l02667"/>02667 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!paddinghas)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02668"/>02668 
<anchor xml:id="__x_buffer_8cpp_source_1l02669"/>02669 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;newsize&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>()&#32;-&#32;<link linkend="_class_x_b_u_f_f_e_r_1a70e929caf10b7af812b0f831829d8d9b">Padding_GetSize</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l02670"/>02670 
<anchor xml:id="__x_buffer_8cpp_source_1l02671"/>02671 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1acf69e379f1d0bf812ae9c1157eac172c">Resize</link>(newsize&#32;,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l02672"/>02672 
<anchor xml:id="__x_buffer_8cpp_source_1l02673"/>02673 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((<emphasis role="keywordtype">int</emphasis>)<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>()&#32;!=&#32;newsize)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02674"/>02674 
<anchor xml:id="__x_buffer_8cpp_source_1l02675"/>02675 &#32;&#32;paddinghas&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02676"/>02676 &#32;&#32;paddingbitadjust&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02677"/>02677 &#32;&#32;paddingsize&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02678"/>02678 
<anchor xml:id="__x_buffer_8cpp_source_1l02679"/>02679 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02680"/>02680 }
<anchor xml:id="__x_buffer_8cpp_source_1l02681"/>02681 
<anchor xml:id="__x_buffer_8cpp_source_1l02682"/>02682 
<anchor xml:id="__x_buffer_8cpp_source_1l02692"/><link linkend="_class_x_b_u_f_f_e_r_1a4ef9d8d6c4147f68745f44453c05d80c">02692</link> <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a4ef9d8d6c4147f68745f44453c05d80c">XBUFFER::Bit_GetNBits</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02693"/>02693 {
<anchor xml:id="__x_buffer_8cpp_source_1l02694"/>02694 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02695"/>02695 }
<anchor xml:id="__x_buffer_8cpp_source_1l02696"/>02696 
<anchor xml:id="__x_buffer_8cpp_source_1l02697"/>02697 
<anchor xml:id="__x_buffer_8cpp_source_1l02709"/><link linkend="_class_x_b_u_f_f_e_r_1a54df86770135b880c0f74632fda45cbd">02709</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a54df86770135b880c0f74632fda45cbd">XBUFFER::Bit_SetNBits</link>(<emphasis role="keywordtype">int</emphasis>&#32;nbits)
<anchor xml:id="__x_buffer_8cpp_source_1l02710"/>02710 {
<anchor xml:id="__x_buffer_8cpp_source_1l02711"/>02711 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(nbits&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02712"/>02712 
<anchor xml:id="__x_buffer_8cpp_source_1l02713"/>02713 &#32;&#32;this-&gt;nbits&#32;=&#32;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02714"/>02714 
<anchor xml:id="__x_buffer_8cpp_source_1l02715"/>02715 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02716"/>02716 }
<anchor xml:id="__x_buffer_8cpp_source_1l02717"/>02717 
<anchor xml:id="__x_buffer_8cpp_source_1l02718"/>02718 
<anchor xml:id="__x_buffer_8cpp_source_1l02731"/><link linkend="_class_x_b_u_f_f_e_r_1abd49ed485524249612e9620769e55a3b">02731</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1abd49ed485524249612e9620769e55a3b">XBUFFER::Bit_AddData</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbits)
<anchor xml:id="__x_buffer_8cpp_source_1l02732"/>02732 {
<anchor xml:id="__x_buffer_8cpp_source_1l02733"/>02733 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_nbits&#32;=&#32;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02734"/>02734 
<anchor xml:id="__x_buffer_8cpp_source_1l02735"/>02735 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;==&#32;<link linkend="__x_buffer_8h_1af747e63eceb3b84b3d9638f3b492aee8">XBUFFER_MASTER_NBITS</link>)&#32;&#32;_nbits&#32;=&#32;this-&gt;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02736"/>02736 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02737"/>02737 
<anchor xml:id="__x_buffer_8cpp_source_1l02738"/>02738 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;&gt;&#32;nbitsfree)
<anchor xml:id="__x_buffer_8cpp_source_1l02739"/>02739 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02740"/>02740 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;missingbits&#32;&#32;&#32;=&#32;(_nbits&#32;-&#32;nbitsfree);
<anchor xml:id="__x_buffer_8cpp_source_1l02741"/>02741 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;missingbytes&#32;&#32;=&#32;(missingbits&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02742"/>02742 
<anchor xml:id="__x_buffer_8cpp_source_1l02743"/>02743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(missingbits&#32;%&#32;8)&#32;&#32;missingbytes++;
<anchor xml:id="__x_buffer_8cpp_source_1l02744"/>02744 
<anchor xml:id="__x_buffer_8cpp_source_1l02745"/>02745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;missingbytes;&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02746"/>02746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02747"/>02747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)0);
<anchor xml:id="__x_buffer_8cpp_source_1l02748"/>02748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02749"/>02749 
<anchor xml:id="__x_buffer_8cpp_source_1l02750"/>02750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;nbitsfree&#32;+=&#32;&#32;(missingbytes&#32;*&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02751"/>02751 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02752"/>02752 
<anchor xml:id="__x_buffer_8cpp_source_1l02753"/>02753 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;posbyte;
<anchor xml:id="__x_buffer_8cpp_source_1l02754"/>02754 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;posbit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>()&#32;*&#32;8;
<anchor xml:id="__x_buffer_8cpp_source_1l02755"/>02755 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;possubbyte;
<anchor xml:id="__x_buffer_8cpp_source_1l02756"/>02756 &#32;&#32;<emphasis role="comment">//int&#32;&#32;&#32;&#32;&#32;nbytes&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(_nbits&#32;/&#32;8);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l02757"/>02757 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;mask&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02758"/>02758 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l02759"/>02759 
<anchor xml:id="__x_buffer_8cpp_source_1l02760"/>02760 &#32;&#32;<emphasis role="comment">//if(_nbits&#32;%&#32;8)&#32;&#32;nbytes++;</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l02761"/>02761 
<anchor xml:id="__x_buffer_8cpp_source_1l02762"/>02762 &#32;&#32;posbit&#32;&#32;&#32;&#32;&#32;-=&#32;nbitsfree;
<anchor xml:id="__x_buffer_8cpp_source_1l02763"/>02763 &#32;&#32;posbyte&#32;&#32;&#32;&#32;&#32;=&#32;(posbit&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02764"/>02764 &#32;&#32;possubbyte&#32;&#32;=&#32;(posbit&#32;%&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02765"/>02765 
<anchor xml:id="__x_buffer_8cpp_source_1l02766"/>02766 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;_nbits;&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02767"/>02767 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02768"/>02768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;mask&#32;&#32;|=&#32;0x01;
<anchor xml:id="__x_buffer_8cpp_source_1l02769"/>02769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(c&#32;!=&#32;_nbits-1)&#32;mask&#32;&lt;&lt;=&#32;0x01;
<anchor xml:id="__x_buffer_8cpp_source_1l02770"/>02770 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02771"/>02771 
<anchor xml:id="__x_buffer_8cpp_source_1l02772"/>02772 &#32;&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;&#32;_data&#32;=&#32;data;
<anchor xml:id="__x_buffer_8cpp_source_1l02773"/>02773 &#32;&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;&#32;_dataorg&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02774"/>02774 
<anchor xml:id="__x_buffer_8cpp_source_1l02775"/>02775 &#32;&#32;_data&#32;&amp;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)mask;
<anchor xml:id="__x_buffer_8cpp_source_1l02776"/>02776 &#32;&#32;_data&#32;&lt;&lt;=&#32;((<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)*8)&#32;-&#32;_nbits);
<anchor xml:id="__x_buffer_8cpp_source_1l02777"/>02777 &#32;&#32;_data&#32;&gt;&gt;=&#32;possubbyte;
<anchor xml:id="__x_buffer_8cpp_source_1l02778"/>02778 
<anchor xml:id="__x_buffer_8cpp_source_1l02779"/>02779 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbytescpy&#32;=&#32;((_nbits&#32;+&#32;possubbyte)&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02780"/>02780 
<anchor xml:id="__x_buffer_8cpp_source_1l02781"/>02781 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((_nbits&#32;+&#32;possubbyte)&#32;%&#32;8)&#32;nbytescpy++;
<anchor xml:id="__x_buffer_8cpp_source_1l02782"/>02782 
<anchor xml:id="__x_buffer_8cpp_source_1l02783"/>02783 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((posbyte&#32;+&#32;nbytescpy)&#32;&gt;=&#32;(int)<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>())
<anchor xml:id="__x_buffer_8cpp_source_1l02784"/>02784 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02785"/>02785 &#32;&#32;&#32;&#32;&#32;&#32;nbytescpy&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>()&#32;-&#32;posbyte;
<anchor xml:id="__x_buffer_8cpp_source_1l02786"/>02786 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02787"/>02787 
<anchor xml:id="__x_buffer_8cpp_source_1l02788"/>02788 &#32;&#32;status&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;_dataorg,&#32;nbytescpy,&#32;posbyte);
<anchor xml:id="__x_buffer_8cpp_source_1l02789"/>02789 &#32;&#32;_dataorg&#32;=&#32;<link linkend="__x_base_8cpp_1a51d327cd1dc2f2ae08c70596880dd85f">SwapQWORD</link>(_dataorg);
<anchor xml:id="__x_buffer_8cpp_source_1l02790"/>02790 
<anchor xml:id="__x_buffer_8cpp_source_1l02791"/>02791 &#32;&#32;_data&#32;|=&#32;_dataorg;
<anchor xml:id="__x_buffer_8cpp_source_1l02792"/>02792 
<anchor xml:id="__x_buffer_8cpp_source_1l02793"/>02793 &#32;&#32;_data&#32;=&#32;<link linkend="__x_base_8cpp_1a51d327cd1dc2f2ae08c70596880dd85f">SwapQWORD</link>(_data);
<anchor xml:id="__x_buffer_8cpp_source_1l02794"/>02794 &#32;&#32;status&#32;=&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;_data,&#32;nbytescpy,&#32;posbyte);
<anchor xml:id="__x_buffer_8cpp_source_1l02795"/>02795 
<anchor xml:id="__x_buffer_8cpp_source_1l02796"/>02796 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;nbitsfree&#32;-=&#32;_nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02797"/>02797 
<anchor xml:id="__x_buffer_8cpp_source_1l02798"/>02798 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_buffer_8cpp_source_1l02799"/>02799 }
<anchor xml:id="__x_buffer_8cpp_source_1l02800"/>02800 
<anchor xml:id="__x_buffer_8cpp_source_1l02801"/>02801 
<anchor xml:id="__x_buffer_8cpp_source_1l02814"/><link linkend="_class_x_b_u_f_f_e_r_1a663932ac2a0349ac615582adb0b001b8">02814</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a663932ac2a0349ac615582adb0b001b8">XBUFFER::Bit_GetData</link>(<emphasis role="keywordtype">int</emphasis>&#32;indexbit,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbits)
<anchor xml:id="__x_buffer_8cpp_source_1l02815"/>02815 {
<anchor xml:id="__x_buffer_8cpp_source_1l02816"/>02816 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_nbits&#32;=&#32;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02817"/>02817 
<anchor xml:id="__x_buffer_8cpp_source_1l02818"/>02818 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;==&#32;<link linkend="__x_buffer_8h_1af747e63eceb3b84b3d9638f3b492aee8">XBUFFER_MASTER_NBITS</link>)&#32;&#32;_nbits&#32;=&#32;this-&gt;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02819"/>02819 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02820"/>02820 
<anchor xml:id="__x_buffer_8cpp_source_1l02821"/>02821 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;data&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02822"/>02822 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;posbyte&#32;&#32;&#32;=&#32;(indexbit&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02823"/>02823 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;posbit&#32;&#32;&#32;&#32;=&#32;(indexbit&#32;%&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02824"/>02824 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;mask&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02825"/>02825 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;nbytescpy&#32;=&#32;(_nbits&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02826"/>02826 
<anchor xml:id="__x_buffer_8cpp_source_1l02827"/>02827 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;%&#32;8)&#32;&#32;nbytescpy++;
<anchor xml:id="__x_buffer_8cpp_source_1l02828"/>02828 
<anchor xml:id="__x_buffer_8cpp_source_1l02829"/>02829 &#32;&#32;nbytescpy++;
<anchor xml:id="__x_buffer_8cpp_source_1l02830"/>02830 
<anchor xml:id="__x_buffer_8cpp_source_1l02831"/>02831 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(posbyte&#32;+&#32;nbytescpy&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)size)
<anchor xml:id="__x_buffer_8cpp_source_1l02832"/>02832 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02833"/>02833 &#32;&#32;&#32;&#32;&#32;&#32;nbytescpy&#32;=&#32;(size&#32;-&#32;posbyte);
<anchor xml:id="__x_buffer_8cpp_source_1l02834"/>02834 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02835"/>02835 
<anchor xml:id="__x_buffer_8cpp_source_1l02836"/>02836 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;nbytescpy,&#32;posbyte))&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02837"/>02837 
<anchor xml:id="__x_buffer_8cpp_source_1l02838"/>02838 &#32;&#32;data&#32;=&#32;<link linkend="__x_base_8cpp_1a4d1da17fcb47e6bff9f2dbc0e680d593">SwapDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l02839"/>02839 
<anchor xml:id="__x_buffer_8cpp_source_1l02840"/>02840 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;_nbits;&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02841"/>02841 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02842"/>02842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;mask&#32;&#32;|=&#32;0x01;
<anchor xml:id="__x_buffer_8cpp_source_1l02843"/>02843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(c&#32;!=&#32;_nbits-1)&#32;mask&#32;&lt;&lt;=&#32;0x01;
<anchor xml:id="__x_buffer_8cpp_source_1l02844"/>02844 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02845"/>02845 
<anchor xml:id="__x_buffer_8cpp_source_1l02846"/>02846 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;displacement&#32;=&#32;(posbit&#32;+&#32;_nbits);
<anchor xml:id="__x_buffer_8cpp_source_1l02847"/>02847 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(displacement&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8))&#32;&#32;displacement&#32;=&#32;(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8);
<anchor xml:id="__x_buffer_8cpp_source_1l02848"/>02848 
<anchor xml:id="__x_buffer_8cpp_source_1l02849"/>02849 &#32;&#32;data&#32;&gt;&gt;=&#32;((<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8)&#32;-&#32;displacement);
<anchor xml:id="__x_buffer_8cpp_source_1l02850"/>02850 
<anchor xml:id="__x_buffer_8cpp_source_1l02851"/>02851 &#32;&#32;data&#32;&amp;=&#32;mask;
<anchor xml:id="__x_buffer_8cpp_source_1l02852"/>02852 
<anchor xml:id="__x_buffer_8cpp_source_1l02853"/>02853 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
<anchor xml:id="__x_buffer_8cpp_source_1l02854"/>02854 }
<anchor xml:id="__x_buffer_8cpp_source_1l02855"/>02855 
<anchor xml:id="__x_buffer_8cpp_source_1l02856"/>02856 
<anchor xml:id="__x_buffer_8cpp_source_1l02870"/><link linkend="_class_x_b_u_f_f_e_r_1aabc121f5953329bef32255b74e12e274">02870</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1aabc121f5953329bef32255b74e12e274">XBUFFER::Bit_SetData</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexbit,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nbits)
<anchor xml:id="__x_buffer_8cpp_source_1l02871"/>02871 {
<anchor xml:id="__x_buffer_8cpp_source_1l02872"/>02872 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_nbits&#32;=&#32;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02873"/>02873 
<anchor xml:id="__x_buffer_8cpp_source_1l02874"/>02874 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;==&#32;<link linkend="__x_buffer_8h_1af747e63eceb3b84b3d9638f3b492aee8">XBUFFER_MASTER_NBITS</link>)&#32;&#32;_nbits&#32;=&#32;this-&gt;nbits;
<anchor xml:id="__x_buffer_8cpp_source_1l02875"/>02875 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8))&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02876"/>02876 
<anchor xml:id="__x_buffer_8cpp_source_1l02877"/>02877 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;posbyte&#32;&#32;&#32;=&#32;(indexbit&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02878"/>02878 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;posbit&#32;&#32;&#32;&#32;=&#32;(indexbit&#32;%&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02879"/>02879 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;mask&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02880"/>02880 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;nbytescpy&#32;=&#32;(_nbits&#32;/&#32;8);
<anchor xml:id="__x_buffer_8cpp_source_1l02881"/>02881 
<anchor xml:id="__x_buffer_8cpp_source_1l02882"/>02882 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_nbits&#32;%&#32;8)&#32;&#32;nbytescpy++;
<anchor xml:id="__x_buffer_8cpp_source_1l02883"/>02883 
<anchor xml:id="__x_buffer_8cpp_source_1l02884"/>02884 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(posbyte&#32;+&#32;nbytescpy&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)size)
<anchor xml:id="__x_buffer_8cpp_source_1l02885"/>02885 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02886"/>02886 &#32;&#32;&#32;&#32;&#32;&#32;nbytescpy&#32;=&#32;(size&#32;-&#32;posbyte);
<anchor xml:id="__x_buffer_8cpp_source_1l02887"/>02887 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02888"/>02888 
<anchor xml:id="__x_buffer_8cpp_source_1l02889"/>02889 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;_nbits;&#32;c++)
<anchor xml:id="__x_buffer_8cpp_source_1l02890"/>02890 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02891"/>02891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;mask&#32;&#32;|=&#32;0x01;
<anchor xml:id="__x_buffer_8cpp_source_1l02892"/>02892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(c&#32;!=&#32;_nbits-1)&#32;mask&#32;&lt;&lt;=&#32;0x01;
<anchor xml:id="__x_buffer_8cpp_source_1l02893"/>02893 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l02894"/>02894 
<anchor xml:id="__x_buffer_8cpp_source_1l02895"/>02895 &#32;&#32;data&#32;&amp;=&#32;mask;
<anchor xml:id="__x_buffer_8cpp_source_1l02896"/>02896 
<anchor xml:id="__x_buffer_8cpp_source_1l02897"/>02897 &#32;&#32;data&#32;&lt;&lt;=&#32;((<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*8)&#32;-&#32;(posbit&#32;+&#32;_nbits));
<anchor xml:id="__x_buffer_8cpp_source_1l02898"/>02898 
<anchor xml:id="__x_buffer_8cpp_source_1l02899"/>02899 &#32;&#32;data&#32;=&#32;<link linkend="__x_base_8cpp_1a4d1da17fcb47e6bff9f2dbc0e680d593">SwapDWORD</link>(data);
<anchor xml:id="__x_buffer_8cpp_source_1l02900"/>02900 
<anchor xml:id="__x_buffer_8cpp_source_1l02901"/>02901 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ad9bc0fe2244df7440d31b152bd2e24fb">Set</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;data,&#32;nbytescpy,&#32;posbyte);
<anchor xml:id="__x_buffer_8cpp_source_1l02902"/>02902 }
<anchor xml:id="__x_buffer_8cpp_source_1l02903"/>02903 
<anchor xml:id="__x_buffer_8cpp_source_1l02904"/>02904 
<anchor xml:id="__x_buffer_8cpp_source_1l02914"/><link linkend="_class_x_b_u_f_f_e_r_1a8ab66ddced2a6ad9704b3358c5a01f05">02914</link> <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a8ab66ddced2a6ad9704b3358c5a01f05">XBUFFER::Bit_GetBitsFree</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l02915"/>02915 {
<anchor xml:id="__x_buffer_8cpp_source_1l02916"/>02916 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nbitsfree;
<anchor xml:id="__x_buffer_8cpp_source_1l02917"/>02917 }
<anchor xml:id="__x_buffer_8cpp_source_1l02918"/>02918 
<anchor xml:id="__x_buffer_8cpp_source_1l02919"/>02919 
<anchor xml:id="__x_buffer_8cpp_source_1l02931"/><link linkend="_class_x_b_u_f_f_e_r_1a9a638f1f7120a297698bc4b09c7273ef">02931</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a9a638f1f7120a297698bc4b09c7273ef">XBUFFER::Bit_SetBitsFree</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;nbitsfree)
<anchor xml:id="__x_buffer_8cpp_source_1l02932"/>02932 {
<anchor xml:id="__x_buffer_8cpp_source_1l02933"/>02933 &#32;&#32;this-&gt;nbitsfree&#32;=&#32;nbitsfree;
<anchor xml:id="__x_buffer_8cpp_source_1l02934"/>02934 
<anchor xml:id="__x_buffer_8cpp_source_1l02935"/>02935 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l02936"/>02936 }
<anchor xml:id="__x_buffer_8cpp_source_1l02937"/>02937 
<anchor xml:id="__x_buffer_8cpp_source_1l02938"/>02938 
<anchor xml:id="__x_buffer_8cpp_source_1l02950"/><link linkend="_class_x_b_u_f_f_e_r_1afdcaba31a1f968d78d0c5ba3c481e6fc">02950</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1afdcaba31a1f968d78d0c5ba3c481e6fc">XBUFFER::ConvertFromBase64</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;in_stringbase64)
<anchor xml:id="__x_buffer_8cpp_source_1l02951"/>02951 {
<anchor xml:id="__x_buffer_8cpp_source_1l02952"/>02952 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;in_stringbase64.<link linkend="_class_x_s_t_r_i_n_g_1a1c68558db6e3e6cc5ffa5eabf54b7f2f">ConvertBase64ToBinary</link>((*<emphasis role="keyword">this</emphasis>));
<anchor xml:id="__x_buffer_8cpp_source_1l02953"/>02953 }
<anchor xml:id="__x_buffer_8cpp_source_1l02954"/>02954 
<anchor xml:id="__x_buffer_8cpp_source_1l02955"/>02955 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l02967"/><link linkend="_class_x_b_u_f_f_e_r_1ab7805e30032bd7d9d149edf1dfb5b39c">02967</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ab7805e30032bd7d9d149edf1dfb5b39c">XBUFFER::ConvertToBase64</link>(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;out_stringbase64)
<anchor xml:id="__x_buffer_8cpp_source_1l02968"/>02968 {
<anchor xml:id="__x_buffer_8cpp_source_1l02969"/>02969 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out_stringbase64.<link linkend="_class_x_s_t_r_i_n_g_1a61dbc7f33192259807766c84302d00ba">ConvertBinaryToBase64</link>((*<emphasis role="keyword">this</emphasis>));
<anchor xml:id="__x_buffer_8cpp_source_1l02970"/>02970 }
<anchor xml:id="__x_buffer_8cpp_source_1l02971"/>02971 
<anchor xml:id="__x_buffer_8cpp_source_1l02972"/>02972 
<anchor xml:id="__x_buffer_8cpp_source_1l02985"/><link linkend="_class_x_b_u_f_f_e_r_1a3c41a101ef869b1d34cc6baf2be58d3e">02985</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a3c41a101ef869b1d34cc6baf2be58d3e">XBUFFER::DecodeBCD</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize)
<anchor xml:id="__x_buffer_8cpp_source_1l02986"/>02986 {
<anchor xml:id="__x_buffer_8cpp_source_1l02987"/>02987 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;result&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02988"/>02988 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;position&#32;=&#32;ppos;
<anchor xml:id="__x_buffer_8cpp_source_1l02989"/>02989 
<anchor xml:id="__x_buffer_8cpp_source_1l02990"/>02990 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(psize--)
<anchor xml:id="__x_buffer_8cpp_source_1l02991"/>02991 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l02992"/>02992 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;nibble1&#32;=&#32;(&#32;buffer[position]&#32;&amp;&#32;0x0F);
<anchor xml:id="__x_buffer_8cpp_source_1l02993"/>02993 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;nibble2&#32;=&#32;((buffer[position]&#32;&amp;&#32;0xF0)&gt;&gt;4);
<anchor xml:id="__x_buffer_8cpp_source_1l02994"/>02994 
<anchor xml:id="__x_buffer_8cpp_source_1l02995"/>02995 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nibble1&#32;&gt;&#32;9)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02996"/>02996 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nibble2&#32;&gt;&#32;9)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l02997"/>02997 
<anchor xml:id="__x_buffer_8cpp_source_1l02998"/>02998 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;(result&#32;*&#32;100)&#32;+&#32;((buffer[position]&#32;&gt;&gt;&#32;4)&#32;*&#32;10)&#32;+&#32;(buffer[position]&#32;&amp;&#32;0x0F);
<anchor xml:id="__x_buffer_8cpp_source_1l02999"/>02999 &#32;&#32;&#32;&#32;&#32;&#32;position++;
<anchor xml:id="__x_buffer_8cpp_source_1l03000"/>03000 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03001"/>03001 
<anchor xml:id="__x_buffer_8cpp_source_1l03002"/>03002 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__x_buffer_8cpp_source_1l03003"/>03003 }
<anchor xml:id="__x_buffer_8cpp_source_1l03004"/>03004 
<anchor xml:id="__x_buffer_8cpp_source_1l03005"/>03005 
<anchor xml:id="__x_buffer_8cpp_source_1l03018"/><link linkend="_class_x_b_u_f_f_e_r_1aaac92b3ebc2f24d48c96336ff457770b">03018</link> <link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;<link linkend="_class_x_b_u_f_f_e_r_1aaac92b3ebc2f24d48c96336ff457770b">XBUFFER::DecodeBCDLong</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ppos,<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;psize)
<anchor xml:id="__x_buffer_8cpp_source_1l03019"/>03019 {
<anchor xml:id="__x_buffer_8cpp_source_1l03020"/>03020 &#32;&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;result&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03021"/>03021 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;position&#32;=&#32;ppos;
<anchor xml:id="__x_buffer_8cpp_source_1l03022"/>03022 
<anchor xml:id="__x_buffer_8cpp_source_1l03023"/>03023 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(psize--)
<anchor xml:id="__x_buffer_8cpp_source_1l03024"/>03024 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03025"/>03025 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;nibble1&#32;=&#32;(&#32;buffer[position]&#32;&amp;&#32;0x0F);
<anchor xml:id="__x_buffer_8cpp_source_1l03026"/>03026 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;nibble2&#32;=&#32;((buffer[position]&#32;&amp;&#32;0xF0)&gt;&gt;4);
<anchor xml:id="__x_buffer_8cpp_source_1l03027"/>03027 
<anchor xml:id="__x_buffer_8cpp_source_1l03028"/>03028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nibble1&#32;&gt;&#32;9)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03029"/>03029 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nibble2&#32;&gt;&#32;9)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03030"/>03030 
<anchor xml:id="__x_buffer_8cpp_source_1l03031"/>03031 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;&#32;=&#32;(result&#32;*&#32;100);
<anchor xml:id="__x_buffer_8cpp_source_1l03032"/>03032 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;((buffer[position]&#32;&gt;&gt;&#32;4)&#32;*&#32;10);
<anchor xml:id="__x_buffer_8cpp_source_1l03033"/>03033 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;(buffer[position]&#32;&amp;&#32;0x0F);
<anchor xml:id="__x_buffer_8cpp_source_1l03034"/>03034 
<anchor xml:id="__x_buffer_8cpp_source_1l03035"/>03035 &#32;&#32;&#32;&#32;&#32;&#32;position++;
<anchor xml:id="__x_buffer_8cpp_source_1l03036"/>03036 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03037"/>03037 
<anchor xml:id="__x_buffer_8cpp_source_1l03038"/>03038 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__x_buffer_8cpp_source_1l03039"/>03039 }
<anchor xml:id="__x_buffer_8cpp_source_1l03040"/>03040 
<anchor xml:id="__x_buffer_8cpp_source_1l03041"/>03041 
<anchor xml:id="__x_buffer_8cpp_source_1l03051"/><link linkend="_class_x_b_u_f_f_e_r_1a4212724c3aee3949a771c17ff36f1387">03051</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a4212724c3aee3949a771c17ff36f1387">XBUFFER::GetGlobalHardwareUseLittleEndian</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l03052"/>03052 {
<anchor xml:id="__x_buffer_8cpp_source_1l03053"/>03053 &#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;XBUFFER::globalhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l03054"/>03054 }
<anchor xml:id="__x_buffer_8cpp_source_1l03055"/>03055 
<anchor xml:id="__x_buffer_8cpp_source_1l03056"/>03056 
<anchor xml:id="__x_buffer_8cpp_source_1l03068"/><link linkend="_class_x_b_u_f_f_e_r_1ac95db3e8f5e7039ae31ceec8cdead6e0">03068</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1ac95db3e8f5e7039ae31ceec8cdead6e0">XBUFFER::SetGlobalHardwareUseLittleEndian</link>(<emphasis role="keywordtype">bool</emphasis>&#32;globalhardwareuselittleendian)
<anchor xml:id="__x_buffer_8cpp_source_1l03069"/>03069 {
<anchor xml:id="__x_buffer_8cpp_source_1l03070"/>03070 &#32;&#32;XBUFFER::globalhardwareuselittleendian&#32;=&#32;globalhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l03071"/>03071 }
<anchor xml:id="__x_buffer_8cpp_source_1l03072"/>03072 
<anchor xml:id="__x_buffer_8cpp_source_1l03073"/>03073 
<anchor xml:id="__x_buffer_8cpp_source_1l03083"/><link linkend="_class_x_b_u_f_f_e_r_1aa0dd34f8ec0e800a96622c42c6e6ccf1">03083</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1aa0dd34f8ec0e800a96622c42c6e6ccf1">XBUFFER::GetLocalHardwareUseLittleEndian</link>()
<anchor xml:id="__x_buffer_8cpp_source_1l03084"/>03084 {
<anchor xml:id="__x_buffer_8cpp_source_1l03085"/>03085 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;localhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l03086"/>03086 }
<anchor xml:id="__x_buffer_8cpp_source_1l03087"/>03087 
<anchor xml:id="__x_buffer_8cpp_source_1l03088"/>03088 
<anchor xml:id="__x_buffer_8cpp_source_1l03100"/><link linkend="_class_x_b_u_f_f_e_r_1a0db241bb6c353478652138e31b798696">03100</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_x_b_u_f_f_e_r_1a0db241bb6c353478652138e31b798696">XBUFFER::SetLocalHardwareUseLittleEndian</link>(<emphasis role="keywordtype">bool</emphasis>&#32;localhardwareuselittleendian)
<anchor xml:id="__x_buffer_8cpp_source_1l03101"/>03101 {
<anchor xml:id="__x_buffer_8cpp_source_1l03102"/>03102 &#32;&#32;this-&gt;localhardwareuselittleendian&#32;=&#32;localhardwareuselittleendian;
<anchor xml:id="__x_buffer_8cpp_source_1l03103"/>03103 }
<anchor xml:id="__x_buffer_8cpp_source_1l03104"/>03104 
<anchor xml:id="__x_buffer_8cpp_source_1l03105"/>03105 
<anchor xml:id="__x_buffer_8cpp_source_1l03119"/>03119 <emphasis role="keywordtype">bool</emphasis>&#32;XBUFFER::AddXBufferWithMask(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l03120"/>03120 {
<anchor xml:id="__x_buffer_8cpp_source_1l03121"/>03121 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03122"/>03122 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask[0])&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03123"/>03123 
<anchor xml:id="__x_buffer_8cpp_source_1l03124"/>03124 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03125"/>03125 
<anchor xml:id="__x_buffer_8cpp_source_1l03126"/>03126 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(mask[c])
<anchor xml:id="__x_buffer_8cpp_source_1l03127"/>03127 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03128"/>03128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(mask[c])
<anchor xml:id="__x_buffer_8cpp_source_1l03129"/>03129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03130"/>03130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;B&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;bvar&#32;&#32;=&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)va_arg(arg,&#32;<emphasis role="keywordtype">int</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l03131"/>03131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)bvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03132"/>03132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03133"/>03133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03134"/>03134 
<anchor xml:id="__x_buffer_8cpp_source_1l03135"/>03135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;W&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;wvar&#32;&#32;=&#32;(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>)va_arg(arg,&#32;<emphasis role="keywordtype">int</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l03136"/>03136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>)wvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03137"/>03137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03138"/>03138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03139"/>03139 
<anchor xml:id="__x_buffer_8cpp_source_1l03140"/>03140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;D&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;dvar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03141"/>03141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)dvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03142"/>03142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03143"/>03143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03144"/>03144 
<anchor xml:id="__x_buffer_8cpp_source_1l03145"/>03145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;Q&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;dvar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03146"/>03146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)dvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03147"/>03147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03148"/>03148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03149"/>03149 
<anchor xml:id="__x_buffer_8cpp_source_1l03150"/>03150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>:&#32;{&#32;<emphasis role="keywordtype">float</emphasis>&#32;fvar&#32;=&#32;(float)va_arg(arg,&#32;<emphasis role="keywordtype">double</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l03151"/>03151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<emphasis role="keywordtype">float</emphasis>)fvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03152"/>03152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03153"/>03153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03154"/>03154 
<anchor xml:id="__x_buffer_8cpp_source_1l03155"/>03155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>:&#32;{&#32;<emphasis role="keywordtype">double</emphasis>&#32;lvar&#32;=&#32;va_arg(arg,&#32;<emphasis role="keywordtype">double</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l03156"/>03156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<emphasis role="keywordtype">double</emphasis>)lvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03157"/>03157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03158"/>03158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03159"/>03159 
<anchor xml:id="__x_buffer_8cpp_source_1l03160"/>03160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;O&apos;</emphasis>:&#32;{&#32;<emphasis role="keywordtype">int</emphasis>&#32;_bvar&#32;=&#32;va_arg(arg,&#32;<emphasis role="keywordtype">int</emphasis>);
<anchor xml:id="__x_buffer_8cpp_source_1l03161"/>03161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;bvar&#32;&#32;=&#32;(_bvar?1:0);
<anchor xml:id="__x_buffer_8cpp_source_1l03162"/>03162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)bvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03163"/>03163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03164"/>03164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03165"/>03165 
<anchor xml:id="__x_buffer_8cpp_source_1l03166"/>03166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;avar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03167"/>03167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;size;
<anchor xml:id="__x_buffer_8cpp_source_1l03168"/>03168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03169"/>03169 
<anchor xml:id="__x_buffer_8cpp_source_1l03170"/>03170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(mask[c]==<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;X&apos;</emphasis>))
<anchor xml:id="__x_buffer_8cpp_source_1l03171"/>03171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03172"/>03172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03173"/>03173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03174"/>03174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03175"/>03175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03176"/>03176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;sizestr;
<anchor xml:id="__x_buffer_8cpp_source_1l03177"/>03177 
<anchor xml:id="__x_buffer_8cpp_source_1l03178"/>03178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>((mask[c]&gt;=<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;0&apos;</emphasis>))&#32;&amp;&amp;&#32;(mask[c]&lt;=<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;9&apos;</emphasis>)))
<anchor xml:id="__x_buffer_8cpp_source_1l03179"/>03179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03180"/>03180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizestr.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(mask[c]);
<anchor xml:id="__x_buffer_8cpp_source_1l03181"/>03181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03182"/>03182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03183"/>03183 
<anchor xml:id="__x_buffer_8cpp_source_1l03184"/>03184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c--;
<anchor xml:id="__x_buffer_8cpp_source_1l03185"/>03185 
<anchor xml:id="__x_buffer_8cpp_source_1l03186"/>03186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;sizestr.<link linkend="_class_x_s_t_r_i_n_g_1af09eaeaee7d47050a5c75303f3ae842c">ConvertToInt</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03187"/>03187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03188"/>03188 
<anchor xml:id="__x_buffer_8cpp_source_1l03189"/>03189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(size&#32;&amp;&amp;&#32;avar)&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(avar,&#32;size);
<anchor xml:id="__x_buffer_8cpp_source_1l03190"/>03190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03191"/>03191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03192"/>03192 
<anchor xml:id="__x_buffer_8cpp_source_1l03193"/>03193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;S&apos;</emphasis>:&#32;{&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;&#32;svar&#32;=&#32;va_arg(arg,&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l03194"/>03194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;&#32;&#32;bufferexchange;
<anchor xml:id="__x_buffer_8cpp_source_1l03195"/>03195 
<anchor xml:id="__x_buffer_8cpp_source_1l03196"/>03196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*svar).ConvertToExchangeXBuffer(bufferexchange);
<anchor xml:id="__x_buffer_8cpp_source_1l03197"/>03197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>(bufferexchange);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_buffer_8cpp_source_1l03198"/>03198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03199"/>03199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03200"/>03200 
<anchor xml:id="__x_buffer_8cpp_source_1l03201"/>03201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;V&apos;</emphasis>:&#32;{&#32;<link linkend="_class_x_v_a_r_i_a_n_t">XVARIANT</link>*&#32;svar&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;va_arg(arg,&#32;<link linkend="_class_x_v_a_r_i_a_n_t">XVARIANT</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03202"/>03202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;svar-&gt;<link linkend="_class_x_v_a_r_i_a_n_t_1a70075e357dea2d13c7e1763e8800cbc6">GetType</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03203"/>03203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;&#32;&#32;isnull&#32;&#32;&#32;&#32;&#32;&#32;=&#32;svar-&gt;<link linkend="_class_x_v_a_r_i_a_n_t_1a3665b76bdc25dc4eb46822842dd2de3f">IsNull</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03204"/>03204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;sizevariant&#32;=&#32;svar-&gt;<link linkend="_class_x_v_a_r_i_a_n_t_1a155144d7ff244a740241cda1c50ed624">GetSize</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03205"/>03205 
<anchor xml:id="__x_buffer_8cpp_source_1l03206"/>03206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)type);
<anchor xml:id="__x_buffer_8cpp_source_1l03207"/>03207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)isnull);
<anchor xml:id="__x_buffer_8cpp_source_1l03208"/>03208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)sizevariant);
<anchor xml:id="__x_buffer_8cpp_source_1l03209"/>03209 
<anchor xml:id="__x_buffer_8cpp_source_1l03210"/>03210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(svar-&gt;<link linkend="_class_x_v_a_r_i_a_n_t_1abcac61acd6c466f93f23e9881f2a6742">GetData</link>()&#32;&amp;&amp;&#32;sizevariant)&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)svar-&gt;<link linkend="_class_x_v_a_r_i_a_n_t_1abcac61acd6c466f93f23e9881f2a6742">GetData</link>(),&#32;sizevariant);
<anchor xml:id="__x_buffer_8cpp_source_1l03211"/>03211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03212"/>03212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03213"/>03213 
<anchor xml:id="__x_buffer_8cpp_source_1l03214"/>03214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03215"/>03215 
<anchor xml:id="__x_buffer_8cpp_source_1l03216"/>03216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03217"/>03217 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03218"/>03218 
<anchor xml:id="__x_buffer_8cpp_source_1l03219"/>03219 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a726a6143d8a9293a199f8033c8198a0a">GetSize</link>()?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03220"/>03220 }
<anchor xml:id="__x_buffer_8cpp_source_1l03221"/>03221 
<anchor xml:id="__x_buffer_8cpp_source_1l03222"/>03222 
<anchor xml:id="__x_buffer_8cpp_source_1l03236"/>03236 <emphasis role="keywordtype">bool</emphasis>&#32;XBUFFER::AddXBufferWithMask(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer,&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l03237"/>03237 {
<anchor xml:id="__x_buffer_8cpp_source_1l03238"/>03238 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03239"/>03239 
<anchor xml:id="__x_buffer_8cpp_source_1l03240"/>03240 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;AddXBufferWithMask(xbuffer,&#32;mask-&gt;<link linkend="_class_x_s_t_r_i_n_g_1ad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l03241"/>03241 }
<anchor xml:id="__x_buffer_8cpp_source_1l03242"/>03242 
<anchor xml:id="__x_buffer_8cpp_source_1l03243"/>03243 
<anchor xml:id="__x_buffer_8cpp_source_1l03258"/>03258 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;XBUFFER::CalculeExtractSizeArgWithMask(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frompos,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l03259"/>03259 {
<anchor xml:id="__x_buffer_8cpp_source_1l03260"/>03260 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03261"/>03261 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask[0])&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03262"/>03262 
<anchor xml:id="__x_buffer_8cpp_source_1l03263"/>03263 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03264"/>03264 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03265"/>03265 
<anchor xml:id="__x_buffer_8cpp_source_1l03266"/>03266 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(mask[c])
<anchor xml:id="__x_buffer_8cpp_source_1l03267"/>03267 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03268"/>03268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(mask[c])
<anchor xml:id="__x_buffer_8cpp_source_1l03269"/>03269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03270"/>03270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;B&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//XBYTE*&#32;bvar&#32;&#32;=&#32;va_arg(arg,&#32;XBYTE*);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03271"/>03271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03272"/>03272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03273"/>03273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03274"/>03274 
<anchor xml:id="__x_buffer_8cpp_source_1l03275"/>03275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;W&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//XWORD&#32;wvar&#32;&#32;=&#32;(XWORD)va_arg(arg,&#32;int);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03276"/>03276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03277"/>03277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03278"/>03278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03279"/>03279 
<anchor xml:id="__x_buffer_8cpp_source_1l03280"/>03280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;D&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//XDWORD&#32;dvar&#32;=&#32;va_arg(arg,&#32;XDWORD);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03281"/>03281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03282"/>03282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03283"/>03283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03284"/>03284 
<anchor xml:id="__x_buffer_8cpp_source_1l03285"/>03285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;Q&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//XQWORD&#32;dvar&#32;=&#32;va_arg(arg,&#32;XQWORD);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03286"/>03286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03287"/>03287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03288"/>03288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03289"/>03289 
<anchor xml:id="__x_buffer_8cpp_source_1l03290"/>03290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//float&#32;fvar&#32;=&#32;(float)va_arg(arg,&#32;double);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03291"/>03291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(double);
<anchor xml:id="__x_buffer_8cpp_source_1l03292"/>03292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03293"/>03293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03294"/>03294 
<anchor xml:id="__x_buffer_8cpp_source_1l03295"/>03295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//double&#32;lvar&#32;=&#32;va_arg(arg,&#32;double);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03296"/>03296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(double);
<anchor xml:id="__x_buffer_8cpp_source_1l03297"/>03297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03298"/>03298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03299"/>03299 
<anchor xml:id="__x_buffer_8cpp_source_1l03300"/>03300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;O&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//int&#32;bvar&#32;=&#32;va_arg(arg,&#32;int);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03301"/>03301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03302"/>03302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03303"/>03303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03304"/>03304 
<anchor xml:id="__x_buffer_8cpp_source_1l03305"/>03305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>:&#32;{&#32;<emphasis role="comment">//XBYTE*&#32;avar&#32;=&#32;va_arg(arg,&#32;XBYTE*);</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03306"/>03306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sizearray&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03307"/>03307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03308"/>03308 
<anchor xml:id="__x_buffer_8cpp_source_1l03309"/>03309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(mask[c]==<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;X&apos;</emphasis>))
<anchor xml:id="__x_buffer_8cpp_source_1l03310"/>03310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03311"/>03311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;dvar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03312"/>03312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dvar)&#32;sizearray&#32;=&#32;dvar;
<anchor xml:id="__x_buffer_8cpp_source_1l03313"/>03313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03314"/>03314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03315"/>03315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03316"/>03316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;sizestr;
<anchor xml:id="__x_buffer_8cpp_source_1l03317"/>03317 
<anchor xml:id="__x_buffer_8cpp_source_1l03318"/>03318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>((mask[c]&gt;=<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;0&apos;</emphasis>))&#32;&amp;&amp;&#32;(mask[c]&lt;=<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;9&apos;</emphasis>)))
<anchor xml:id="__x_buffer_8cpp_source_1l03319"/>03319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03320"/>03320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizestr.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(mask[c]);
<anchor xml:id="__x_buffer_8cpp_source_1l03321"/>03321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03322"/>03322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03323"/>03323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c--;
<anchor xml:id="__x_buffer_8cpp_source_1l03324"/>03324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizearray&#32;=&#32;sizestr.<link linkend="_class_x_s_t_r_i_n_g_1af09eaeaee7d47050a5c75303f3ae842c">ConvertToInt</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03325"/>03325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03326"/>03326 
<anchor xml:id="__x_buffer_8cpp_source_1l03327"/>03327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;sizearray;
<anchor xml:id="__x_buffer_8cpp_source_1l03328"/>03328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03329"/>03329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03330"/>03330 
<anchor xml:id="__x_buffer_8cpp_source_1l03331"/>03331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;S&apos;</emphasis>:&#32;{&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;svar&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;va_arg(arg,&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03332"/>03332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;sizestring&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03333"/>03333 
<anchor xml:id="__x_buffer_8cpp_source_1l03334"/>03334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(svar)
<anchor xml:id="__x_buffer_8cpp_source_1l03335"/>03335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03336"/>03336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizestring&#32;&#32;=&#32;<link linkend="_class_x_s_t_r_i_n_g_1a7c3fa0dd7b650399470c76192fbd4916">XSTRING::GetSize</link>((<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>*)(&amp;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()[frompos&#32;+&#32;size]));
<anchor xml:id="__x_buffer_8cpp_source_1l03337"/>03337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizestring&#32;+=&#32;1;
<anchor xml:id="__x_buffer_8cpp_source_1l03338"/>03338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizestring&#32;*=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03339"/>03339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03340"/>03340 
<anchor xml:id="__x_buffer_8cpp_source_1l03341"/>03341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;sizestring;
<anchor xml:id="__x_buffer_8cpp_source_1l03342"/>03342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03343"/>03343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03344"/>03344 
<anchor xml:id="__x_buffer_8cpp_source_1l03345"/>03345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;V&apos;</emphasis>:&#32;{&#32;<link linkend="_class_x_v_a_r_i_a_n_t">XVARIANT</link>*&#32;svar&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;va_arg(arg,&#32;<link linkend="_class_x_v_a_r_i_a_n_t">XVARIANT</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03346"/>03346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;sizevariant&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03347"/>03347 
<anchor xml:id="__x_buffer_8cpp_source_1l03348"/>03348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizevariant&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03349"/>03349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizevariant&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03350"/>03350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizevariant&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03351"/>03351 
<anchor xml:id="__x_buffer_8cpp_source_1l03352"/>03352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(svar)&#32;sizevariant&#32;+=&#32;svar-&gt;<link linkend="_class_x_v_a_r_i_a_n_t_1a155144d7ff244a740241cda1c50ed624">GetSize</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03353"/>03353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;sizevariant;
<anchor xml:id="__x_buffer_8cpp_source_1l03354"/>03354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03355"/>03355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03356"/>03356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03357"/>03357 
<anchor xml:id="__x_buffer_8cpp_source_1l03358"/>03358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03359"/>03359 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03360"/>03360 
<anchor xml:id="__x_buffer_8cpp_source_1l03361"/>03361 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;size;
<anchor xml:id="__x_buffer_8cpp_source_1l03362"/>03362 }
<anchor xml:id="__x_buffer_8cpp_source_1l03363"/>03363 
<anchor xml:id="__x_buffer_8cpp_source_1l03364"/>03364 
<anchor xml:id="__x_buffer_8cpp_source_1l03378"/>03378 <emphasis role="keywordtype">bool</emphasis>&#32;XBUFFER::ExtractXBufferWithMask(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l03379"/>03379 {
<anchor xml:id="__x_buffer_8cpp_source_1l03380"/>03380 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03381"/>03381 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask[0])&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03382"/>03382 
<anchor xml:id="__x_buffer_8cpp_source_1l03383"/>03383 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03384"/>03384 
<anchor xml:id="__x_buffer_8cpp_source_1l03385"/>03385 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(mask[c])
<anchor xml:id="__x_buffer_8cpp_source_1l03386"/>03386 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03387"/>03387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(mask[c])
<anchor xml:id="__x_buffer_8cpp_source_1l03388"/>03388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03389"/>03389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;B&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;bvar&#32;&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03390"/>03390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&amp;)(*bvar));
<anchor xml:id="__x_buffer_8cpp_source_1l03391"/>03391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03392"/>03392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03393"/>03393 
<anchor xml:id="__x_buffer_8cpp_source_1l03394"/>03394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;W&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>*&#32;wvar&#32;&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03395"/>03395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&amp;)(*wvar));
<anchor xml:id="__x_buffer_8cpp_source_1l03396"/>03396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03397"/>03397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03398"/>03398 
<anchor xml:id="__x_buffer_8cpp_source_1l03399"/>03399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;D&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*&#32;dvar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03400"/>03400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&amp;)(*dvar));
<anchor xml:id="__x_buffer_8cpp_source_1l03401"/>03401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03402"/>03402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03403"/>03403 
<anchor xml:id="__x_buffer_8cpp_source_1l03404"/>03404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;Q&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>*&#32;dvar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03405"/>03405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&amp;)(*dvar));
<anchor xml:id="__x_buffer_8cpp_source_1l03406"/>03406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03407"/>03407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03408"/>03408 
<anchor xml:id="__x_buffer_8cpp_source_1l03409"/>03409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>:&#32;{&#32;<emphasis role="keywordtype">double</emphasis>*&#32;fvar&#32;=&#32;va_arg(arg,&#32;<emphasis role="keywordtype">double</emphasis>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03410"/>03410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<emphasis role="keywordtype">float</emphasis>&amp;)(*fvar),&#32;0);
<anchor xml:id="__x_buffer_8cpp_source_1l03411"/>03411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03412"/>03412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03413"/>03413 
<anchor xml:id="__x_buffer_8cpp_source_1l03414"/>03414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>:&#32;{&#32;<emphasis role="keywordtype">double</emphasis>*&#32;dvar&#32;=&#32;va_arg(arg,&#32;<emphasis role="keywordtype">double</emphasis>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03415"/>03415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>((<emphasis role="keywordtype">double</emphasis>&amp;)(*dvar),&#32;0);
<anchor xml:id="__x_buffer_8cpp_source_1l03416"/>03416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03417"/>03417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03418"/>03418 
<anchor xml:id="__x_buffer_8cpp_source_1l03419"/>03419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;O&apos;</emphasis>:&#32;{&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;&#32;bvar&#32;&#32;=&#32;va_arg(arg,&#32;<emphasis role="keywordtype">bool</emphasis>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03420"/>03420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;_bvar&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03421"/>03421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(_bvar);
<anchor xml:id="__x_buffer_8cpp_source_1l03422"/>03422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*bvar)&#32;=&#32;_bvar?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03423"/>03423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03424"/>03424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03425"/>03425 
<anchor xml:id="__x_buffer_8cpp_source_1l03426"/>03426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>:&#32;{&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;avar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03427"/>03427 
<anchor xml:id="__x_buffer_8cpp_source_1l03428"/>03428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03429"/>03429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03430"/>03430 
<anchor xml:id="__x_buffer_8cpp_source_1l03431"/>03431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(mask[c]==<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;X&apos;</emphasis>))
<anchor xml:id="__x_buffer_8cpp_source_1l03432"/>03432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03433"/>03433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;dvar&#32;=&#32;va_arg(arg,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03434"/>03434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dvar)&#32;size&#32;=&#32;dvar;
<anchor xml:id="__x_buffer_8cpp_source_1l03435"/>03435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03436"/>03436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03437"/>03437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03438"/>03438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;sizestr;
<anchor xml:id="__x_buffer_8cpp_source_1l03439"/>03439 
<anchor xml:id="__x_buffer_8cpp_source_1l03440"/>03440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>((mask[c]&gt;=<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;0&apos;</emphasis>))&#32;&amp;&amp;&#32;(mask[c]&lt;=<link linkend="__x_string_8h_1ab483f167129a5d1941ea1d30f3df8d8a">__C</link>(<emphasis role="charliteral">&apos;9&apos;</emphasis>)))
<anchor xml:id="__x_buffer_8cpp_source_1l03441"/>03441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_buffer_8cpp_source_1l03442"/>03442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizestr.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(mask[c]);
<anchor xml:id="__x_buffer_8cpp_source_1l03443"/>03443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03444"/>03444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03445"/>03445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c--;
<anchor xml:id="__x_buffer_8cpp_source_1l03446"/>03446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;sizestr.<link linkend="_class_x_s_t_r_i_n_g_1af09eaeaee7d47050a5c75303f3ae842c">ConvertToInt</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03447"/>03447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03448"/>03448 
<anchor xml:id="__x_buffer_8cpp_source_1l03449"/>03449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(size&#32;&amp;&amp;&#32;avar)&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(avar,&#32;0,&#32;size);
<anchor xml:id="__x_buffer_8cpp_source_1l03450"/>03450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03451"/>03451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03452"/>03452 
<anchor xml:id="__x_buffer_8cpp_source_1l03453"/>03453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;S&apos;</emphasis>:&#32;{&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;svar&#32;=&#32;va_arg(arg,&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03454"/>03454 
<anchor xml:id="__x_buffer_8cpp_source_1l03455"/>03455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;svar-&gt;<link linkend="_class_x_s_t_r_i_n_g_1a4e97e075650e9bc8cfb7deb28e4c9ce4">Set</link>((<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>*)(xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()));
<anchor xml:id="__x_buffer_8cpp_source_1l03456"/>03456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size&#32;=&#32;(svar-&gt;<link linkend="_class_x_s_t_r_i_n_g_1a7c3fa0dd7b650399470c76192fbd4916">GetSize</link>()+1)*<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>);
<anchor xml:id="__x_buffer_8cpp_source_1l03457"/>03457 
<anchor xml:id="__x_buffer_8cpp_source_1l03458"/>03458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;0,&#32;size);
<anchor xml:id="__x_buffer_8cpp_source_1l03459"/>03459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03460"/>03460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03461"/>03461 
<anchor xml:id="__x_buffer_8cpp_source_1l03462"/>03462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;V&apos;</emphasis>:&#32;{&#32;<link linkend="_class_x_v_a_r_i_a_n_t">XVARIANT</link>*&#32;svar&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;va_arg(arg,&#32;<link linkend="_class_x_v_a_r_i_a_n_t">XVARIANT</link>*);
<anchor xml:id="__x_buffer_8cpp_source_1l03463"/>03463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03464"/>03464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;&#32;&#32;isnull&#32;&#32;&#32;&#32;&#32;&#32;=&#32;svar-&gt;<link linkend="_class_x_v_a_r_i_a_n_t_1a3665b76bdc25dc4eb46822842dd2de3f">IsNull</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03465"/>03465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;sizevariant&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03466"/>03466 
<anchor xml:id="__x_buffer_8cpp_source_1l03467"/>03467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(type);
<anchor xml:id="__x_buffer_8cpp_source_1l03468"/>03468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(isnull);
<anchor xml:id="__x_buffer_8cpp_source_1l03469"/>03469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(sizevariant);
<anchor xml:id="__x_buffer_8cpp_source_1l03470"/>03470 
<anchor xml:id="__x_buffer_8cpp_source_1l03471"/>03471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Imanol&#32;:&#32;if&#32;xbuffer.GetSize()&#32;-&#32;9&#32;!=&#32;sizevariant&#32;something&#32;went&#32;wront&#32;and&#32;this&#32;variant&#32;might&#32;not&#32;be&#32;complete(but&#32;a&#32;full&#32;data&#32;array&#32;is&#32;allocated&#32;anyways)</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03472"/>03472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;svar-&gt;<link linkend="_class_x_v_a_r_i_a_n_t_1a238f6ef465ea6b1cc7f9882aee8c868f">Set</link>((<link linkend="__x_variant_8h_1ae6ba470d0708534cb56c359929a9eb30">XVARIANT_TYPE</link>)type,&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;sizevariant);
<anchor xml:id="__x_buffer_8cpp_source_1l03473"/>03473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(sizevariant)&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1aa18ae97bc16eca76dad45de57c4dd08c">Extract</link>(<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;0,&#32;sizevariant);
<anchor xml:id="__x_buffer_8cpp_source_1l03474"/>03474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03475"/>03475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03476"/>03476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03477"/>03477 
<anchor xml:id="__x_buffer_8cpp_source_1l03478"/>03478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
<anchor xml:id="__x_buffer_8cpp_source_1l03479"/>03479 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_buffer_8cpp_source_1l03480"/>03480 
<anchor xml:id="__x_buffer_8cpp_source_1l03481"/>03481 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xbuffer.<link linkend="_class_x_b_u_f_f_e_r_1a0007f465be1385ea663397e502c5280e">IsEmpty</link>();
<anchor xml:id="__x_buffer_8cpp_source_1l03482"/>03482 }
<anchor xml:id="__x_buffer_8cpp_source_1l03483"/>03483 
<anchor xml:id="__x_buffer_8cpp_source_1l03484"/>03484 
<anchor xml:id="__x_buffer_8cpp_source_1l03498"/>03498 <emphasis role="keywordtype">bool</emphasis>&#32;XBUFFER::ExtractXBufferWithMask(<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&amp;&#32;xbuffer,&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;mask,&#32;va_list&amp;&#32;arg)
<anchor xml:id="__x_buffer_8cpp_source_1l03499"/>03499 {
<anchor xml:id="__x_buffer_8cpp_source_1l03500"/>03500 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mask)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03501"/>03501 
<anchor xml:id="__x_buffer_8cpp_source_1l03502"/>03502 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ExtractXBufferWithMask(xbuffer,&#32;mask-&gt;<link linkend="_class_x_s_t_r_i_n_g_1ad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;arg);
<anchor xml:id="__x_buffer_8cpp_source_1l03503"/>03503 }
<anchor xml:id="__x_buffer_8cpp_source_1l03504"/>03504 
<anchor xml:id="__x_buffer_8cpp_source_1l03505"/>03505 
<anchor xml:id="__x_buffer_8cpp_source_1l03516"/>03516 <emphasis role="keywordtype">void</emphasis>&#32;XBUFFER::Clean()
<anchor xml:id="__x_buffer_8cpp_source_1l03517"/>03517 {
<anchor xml:id="__x_buffer_8cpp_source_1l03518"/>03518 &#32;&#32;buffer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l03519"/>03519 &#32;&#32;size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03520"/>03520 &#32;&#32;sizeassign&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03521"/>03521 &#32;&#32;position&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03522"/>03522 
<anchor xml:id="__x_buffer_8cpp_source_1l03523"/>03523 &#32;&#32;nbits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03524"/>03524 &#32;&#32;nbitsfree&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03525"/>03525 
<anchor xml:id="__x_buffer_8cpp_source_1l03526"/>03526 &#32;&#32;paddingtype&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_buffer_8h_1ac248004dbafba62384287a2eba38cd35aa2fccdb92c2ee954bbdf4083351347de">XBUFFER_PADDINGTYPE_NONE</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l03527"/>03527 &#32;&#32;paddinghas&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03528"/>03528 &#32;&#32;paddingbitadjust&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03529"/>03529 &#32;&#32;paddingsize&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_buffer_8cpp_source_1l03530"/>03530 
<anchor xml:id="__x_buffer_8cpp_source_1l03531"/>03531 &#32;&#32;xmutex&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_buffer_8cpp_source_1l03532"/>03532 
<anchor xml:id="__x_buffer_8cpp_source_1l03533"/>03533 &#32;&#32;localhardwareuselittleendian&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_buffer_8cpp_source_1l03534"/>03534 }
<anchor xml:id="__x_buffer_8cpp_source_1l03535"/>03535 
<anchor xml:id="__x_buffer_8cpp_source_1l03536"/>03536 
<anchor xml:id="__x_buffer_8cpp_source_1l03537"/>03537 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_buffer_8cpp_source_1l03538"/>03538 
</programlisting></section>
