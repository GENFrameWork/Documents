<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__hash_s_h_a1_8cpp_source" xml:lang="en-US">
<title>HashSHA1.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Cipher/HashSHA1.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__hash_s_h_a1_8cpp_source_1l00001"/>00001 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;INCLUDES&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;region&#32;PRECOMPILATION_INCLUDES</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00031"/>00031 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00033"/>00033 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00035"/>00035 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00036"/>00036 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00037"/>00037 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#pragma&#32;region&#32;INCLUDES</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00039"/>00039 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__hash_s_h_a1_8h">HashSHA1.h</link>&quot;</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00041"/>00041 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00042"/>00042 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00043"/>00043 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00044"/>00044 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_buffer_8h">XBuffer.h</link>&quot;</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00045"/>00045 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00046"/>00046 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00047"/>00047 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00048"/>00048 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00049"/>00049 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00050"/>00050 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00051"/>00051 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00052"/>00052 <emphasis role="preprocessor">#pragma&#32;region&#32;GENERAL_VARIABLE</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00053"/>00053 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00054"/>00054 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00055"/>00055 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00056"/>00056 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00057"/>00057 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00058"/>00058 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_MEMBERS</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00059"/>00059 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00060"/>00060 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00070"/><link linkend="_class_h_a_s_h_s_h_a1_1aa5ff00e93d1d6635ed32e6589b42d95a">00070</link> <link linkend="_class_h_a_s_h_s_h_a1_1aa5ff00e93d1d6635ed32e6589b42d95a">HASHSHA1::HASHSHA1</link>()&#32;:&#32;<link linkend="_class_h_a_s_h">HASH</link>()
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00071"/>00071 {
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00072"/>00072 &#32;&#32;Clean();
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00073"/>00073 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00074"/>00074 &#32;&#32;<link linkend="_class_h_a_s_h_1ad5af89903501908c4dcda95b37a5a785">type</link>&#32;=&#32;<link linkend="__hash_8h_1acf4dd3cf891bcd5c364340e2828a7ec9adbfa109221d3bf17ae979140d46a32fb">HASHTYPE_SHA1</link>;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00075"/>00075 &#32;&#32;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00076"/>00076 &#32;&#32;Reset();
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00077"/>00077 }
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00078"/>00078 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00079"/>00079 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00090"/><link linkend="_class_h_a_s_h_s_h_a1_1a5934921db3fa5728901278351bf2eedb">00090</link> <link linkend="_class_h_a_s_h_s_h_a1_1a5934921db3fa5728901278351bf2eedb">HASHSHA1::~HASHSHA1</link>()
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00091"/>00091 {
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00092"/>00092 &#32;&#32;Clean();
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00093"/>00093 }
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00094"/>00094 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00095"/>00095 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00108"/><link linkend="_class_h_a_s_h_s_h_a1_1a2ce86beb262a0aa3a251f84bfcfa9a10">00108</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_h_a_s_h_s_h_a1_1a2ce86beb262a0aa3a251f84bfcfa9a10">HASHSHA1::Do</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;size)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00109"/>00109 {
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00110"/>00110 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;msgdigest[5];
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00111"/>00111 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00112"/>00112 &#32;&#32;<link linkend="_class_h_a_s_h_1ae0e98c634df2385915a73f5226864094">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a0395231705663a2aeeee3b4be9d292bb">Delete</link>();
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00113"/>00113 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00114"/>00114 &#32;&#32;Input(input,&#32;size);
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00115"/>00115 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00116"/>00116 &#32;&#32;Result(msgdigest);
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00117"/>00117 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00118"/>00118 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;c&lt;5;c++)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_h_a_s_h_1ae0e98c634df2385915a73f5226864094">result</link>-&gt;<link linkend="_class_x_b_u_f_f_e_r_1a03212e4f31a9d07995ac4f72db1dd0cf">Add</link>((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)msgdigest[c]);
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00122"/>00122 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00123"/>00123 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00124"/>00124 }
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00125"/>00125 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00126"/>00126 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00136"/><link linkend="_class_h_a_s_h_s_h_a1_1a039cf3b0375ab0efb073bd6f7610062e">00136</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_h_a_s_h_s_h_a1_1a039cf3b0375ab0efb073bd6f7610062e">HASHSHA1::GetDefaultSize</link>()
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00137"/>00137 {
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00138"/>00138 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)*5;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00139"/>00139 }
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00140"/>00140 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00141"/>00141 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00151"/>00151 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA1::Reset()
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00152"/>00152 {
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00153"/>00153 &#32;&#32;lengthlow&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00154"/>00154 &#32;&#32;lengthhigh&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00155"/>00155 &#32;&#32;msgblockindex&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00156"/>00156 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00157"/>00157 &#32;&#32;H[0]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0x67452301;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00158"/>00158 &#32;&#32;H[1]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0xEFCDAB89;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00159"/>00159 &#32;&#32;H[2]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0x98BADCFE;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00160"/>00160 &#32;&#32;H[3]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0x10325476;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00161"/>00161 &#32;&#32;H[4]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0xC3D2E1F0;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00162"/>00162 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00163"/>00163 &#32;&#32;computed&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00164"/>00164 &#32;&#32;corrupted&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00165"/>00165 }
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00166"/>00166 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00167"/>00167 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00180"/>00180 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA1::Input(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;input,&#32;<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;length)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00181"/>00181 {
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00182"/>00182 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!length)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00183"/>00183 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00184"/>00184 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(computed&#32;||&#32;corrupted)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;corrupted&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00189"/>00189 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00190"/>00190 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(length--&#32;&amp;&amp;&#32;!corrupted)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(msgblockindex&#32;&lt;&#32;64)&#32;msgblock[msgblockindex++]&#32;=&#32;(*input&#32;&amp;&#32;0xFF);
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00193"/>00193 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;lengthlow&#32;+=&#32;8;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;lengthlow&#32;&amp;=&#32;0xFFFFFFFF;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Force&#32;it&#32;to&#32;32&#32;bits</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00196"/>00196 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(lengthlow&#32;==&#32;0)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lengthhigh++;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lengthhigh&#32;&amp;=&#32;0xFFFFFFFF;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Force&#32;it&#32;to&#32;32&#32;bits</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00201"/>00201 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(lengthhigh&#32;==&#32;0)&#32;corrupted&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Message&#32;is&#32;too&#32;long</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00204"/>00204 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(msgblockindex&#32;==&#32;64)&#32;ProcessMessageBlock();
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00206"/>00206 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;input++;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00209"/>00209 }
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00210"/>00210 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00211"/>00211 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00221"/>00221 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA1::ProcessMessageBlock()
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00222"/>00222 {
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00223"/>00223 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;K[]&#32;=&#32;{&#32;0x5A827999&#32;,
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x6ED9EBA1&#32;,
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x8F1BBCDC&#32;,
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xCA62C1D6
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00228"/>00228 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;t;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Loop&#32;counter</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00229"/>00229 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;temp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Temporary&#32;word&#32;value</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00230"/>00230 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;W[80];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Word&#32;sequence</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00231"/>00231 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;A;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00232"/>00232 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;B;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00233"/>00233 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;C;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00234"/>00234 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;D;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00235"/>00235 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;E;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Word&#32;buffers</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00236"/>00236 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00237"/>00237 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(t=0;t&lt;16;t++)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;W[t]&#32;&#32;=&#32;((unsigned)&#32;msgblock[t&#32;*&#32;4])&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;24;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;W[t]&#32;|=&#32;((unsigned)&#32;msgblock[t&#32;*&#32;4&#32;+&#32;1])&#32;&lt;&lt;&#32;16;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;W[t]&#32;|=&#32;((unsigned)&#32;msgblock[t&#32;*&#32;4&#32;+&#32;2])&#32;&lt;&lt;&#32;8;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;W[t]&#32;|=&#32;((unsigned)&#32;msgblock[t&#32;*&#32;4&#32;+&#32;3]);
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00244"/>00244 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00245"/>00245 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(t=16;t&lt;80;t++)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;W[t]&#32;=&#32;CircularShift(1,W[t-3]&#32;^&#32;W[t-8]&#32;^&#32;W[t-14]&#32;^&#32;W[t-16]);
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00249"/>00249 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00250"/>00250 &#32;&#32;A&#32;=&#32;H[0];
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00251"/>00251 &#32;&#32;B&#32;=&#32;H[1];
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00252"/>00252 &#32;&#32;C&#32;=&#32;H[2];
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00253"/>00253 &#32;&#32;D&#32;=&#32;H[3];
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00254"/>00254 &#32;&#32;E&#32;=&#32;H[4];
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00255"/>00255 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00256"/>00256 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(t=0;t&lt;20;t++)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;temp&#32;&#32;=&#32;CircularShift(5,A)&#32;+&#32;((B&#32;&amp;&#32;C)&#32;|&#32;((~B)&#32;&amp;&#32;D))&#32;+&#32;E&#32;+&#32;W[t]&#32;+&#32;K[0];
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;temp&#32;&amp;=&#32;0xFFFFFFFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;E&#32;&#32;&#32;&#32;&#32;=&#32;D;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;&#32;&#32;&#32;&#32;=&#32;C;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;C&#32;&#32;&#32;&#32;&#32;=&#32;CircularShift(30,B);
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;B&#32;&#32;&#32;&#32;&#32;=&#32;A;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;A&#32;&#32;&#32;&#32;&#32;=&#32;temp;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00266"/>00266 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00267"/>00267 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(t=20;t&lt;40;t++)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;temp&#32;=&#32;CircularShift(5,A)&#32;+&#32;(B&#32;^&#32;C&#32;^&#32;D)&#32;+&#32;E&#32;+&#32;W[t]&#32;+&#32;K[1];
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;temp&#32;&amp;=&#32;0xFFFFFFFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;E&#32;&#32;&#32;&#32;&#32;=&#32;D;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;&#32;&#32;&#32;&#32;=&#32;C;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;C&#32;&#32;&#32;&#32;&#32;=&#32;CircularShift(30,B);
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;B&#32;&#32;&#32;&#32;&#32;=&#32;A;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;A&#32;&#32;&#32;&#32;&#32;=&#32;temp;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00277"/>00277 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00278"/>00278 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(t=40;t&lt;60;t++)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;temp&#32;&#32;=&#32;CircularShift(5,A)&#32;+&#32;((B&#32;&amp;&#32;C)&#32;|&#32;(B&#32;&amp;&#32;D)&#32;|&#32;(C&#32;&amp;&#32;D))&#32;+&#32;E&#32;+&#32;W[t]&#32;+&#32;K[2];
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;temp&#32;&amp;=&#32;0xFFFFFFFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;E&#32;&#32;&#32;&#32;&#32;=&#32;D;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;&#32;&#32;&#32;&#32;=&#32;C;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;C&#32;&#32;&#32;&#32;&#32;=&#32;CircularShift(30,B);
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;B&#32;&#32;&#32;&#32;&#32;=&#32;A;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;A&#32;&#32;&#32;&#32;&#32;=&#32;temp;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00288"/>00288 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00289"/>00289 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(t=60;t&lt;80;t++)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;temp&#32;&#32;=&#32;CircularShift(5,A)&#32;+&#32;(B&#32;^&#32;C&#32;^&#32;D)&#32;+&#32;E&#32;+&#32;W[t]&#32;+&#32;K[3];
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;temp&#32;&amp;=&#32;0xFFFFFFFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;E&#32;&#32;&#32;&#32;&#32;=&#32;D;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;&#32;&#32;&#32;&#32;=&#32;C;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;C&#32;&#32;&#32;&#32;&#32;=&#32;CircularShift(30,B);
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;B&#32;&#32;&#32;&#32;&#32;=&#32;A;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;A&#32;&#32;&#32;&#32;&#32;=&#32;temp;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00299"/>00299 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00300"/>00300 &#32;&#32;H[0]&#32;=&#32;(H[0]&#32;+&#32;A)&#32;&amp;&#32;0xFFFFFFFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00301"/>00301 &#32;&#32;H[1]&#32;=&#32;(H[1]&#32;+&#32;B)&#32;&amp;&#32;0xFFFFFFFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00302"/>00302 &#32;&#32;H[2]&#32;=&#32;(H[2]&#32;+&#32;C)&#32;&amp;&#32;0xFFFFFFFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00303"/>00303 &#32;&#32;H[3]&#32;=&#32;(H[3]&#32;+&#32;D)&#32;&amp;&#32;0xFFFFFFFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00304"/>00304 &#32;&#32;H[4]&#32;=&#32;(H[4]&#32;+&#32;E)&#32;&amp;&#32;0xFFFFFFFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00305"/>00305 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00306"/>00306 &#32;&#32;msgblockindex&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00307"/>00307 }
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00308"/>00308 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00309"/>00309 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00319"/>00319 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA1::PadMessage()
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00320"/>00320 {
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00321"/>00321 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;to&#32;see&#32;if&#32;the&#32;current&#32;message&#32;block&#32;is&#32;too&#32;small&#32;to&#32;hold</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00322"/>00322 &#32;&#32;<emphasis role="comment">//&#32;the&#32;initial&#32;padding&#32;bits&#32;and&#32;length.&#32;&#32;If&#32;so,&#32;we&#32;will&#32;pad&#32;the</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00323"/>00323 &#32;&#32;<emphasis role="comment">//&#32;block,&#32;process&#32;it,&#32;and&#32;then&#32;continue&#32;padding&#32;into&#32;a&#32;second&#32;block.</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00324"/>00324 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00325"/>00325 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(msgblockindex&#32;&gt;&#32;55)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;msgblock[msgblockindex++]&#32;=&#32;0x80;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00328"/>00328 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(msgblockindex&#32;&lt;&#32;64)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgblock[msgblockindex++]&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00333"/>00333 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;ProcessMessageBlock();
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00335"/>00335 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(msgblockindex&#32;&lt;&#32;56)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgblock[msgblockindex++]&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;msgblock[msgblockindex++]&#32;=&#32;0x80;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00344"/>00344 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(msgblockindex&#32;&lt;&#32;56)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgblock[msgblockindex++]&#32;=&#32;0;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00349"/>00349 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00351"/>00351 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00352"/>00352 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00353"/>00353 &#32;&#32;<emphasis role="comment">//&#32;Store&#32;the&#32;message&#32;length&#32;as&#32;the&#32;last&#32;8&#32;octets</emphasis>
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00354"/>00354 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00355"/>00355 &#32;&#32;msgblock[56]&#32;=&#32;(lengthhigh&#32;&gt;&gt;&#32;24)&#32;&amp;&#32;0xFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00356"/>00356 &#32;&#32;msgblock[57]&#32;=&#32;(lengthhigh&#32;&gt;&gt;&#32;16)&#32;&amp;&#32;0xFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00357"/>00357 &#32;&#32;msgblock[58]&#32;=&#32;(lengthhigh&#32;&gt;&gt;&#32;8)&#32;&amp;&#32;0xFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00358"/>00358 &#32;&#32;msgblock[59]&#32;=&#32;(lengthhigh)&#32;&amp;&#32;0xFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00359"/>00359 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00360"/>00360 &#32;&#32;msgblock[60]&#32;=&#32;(lengthlow&#32;&gt;&gt;&#32;24)&#32;&amp;&#32;0xFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00361"/>00361 &#32;&#32;msgblock[61]&#32;=&#32;(lengthlow&#32;&gt;&gt;&#32;16)&#32;&amp;&#32;0xFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00362"/>00362 &#32;&#32;msgblock[62]&#32;=&#32;(lengthlow&#32;&gt;&gt;&#32;8)&#32;&amp;&#32;0xFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00363"/>00363 &#32;&#32;msgblock[63]&#32;=&#32;(lengthlow)&#32;&amp;&#32;0xFF;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00364"/>00364 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00365"/>00365 &#32;&#32;ProcessMessageBlock();
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00366"/>00366 }
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00367"/>00367 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00368"/>00368 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00381"/>00381 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;HASHSHA1::CircularShift(<emphasis role="keywordtype">int</emphasis>&#32;bits,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;word)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00382"/>00382 {
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00383"/>00383 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((word&#32;&lt;&lt;&#32;bits)&#32;&amp;&#32;0xFFFFFFFF)&#32;|&#32;((word&#32;&amp;&#32;0xFFFFFFFF)&#32;&gt;&gt;&#32;(32-bits));
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00384"/>00384 }
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00385"/>00385 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00386"/>00386 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00398"/>00398 <emphasis role="keywordtype">bool</emphasis>&#32;HASHSHA1::Result(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*&#32;msgdigest)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00399"/>00399 {
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00400"/>00400 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(corrupted)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00401"/>00401 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00402"/>00402 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!computed)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00403"/>00403 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;PadMessage();
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;computed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00406"/>00406 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00407"/>00407 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00408"/>00408 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;5;&#32;i++)
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00409"/>00409 &#32;&#32;&#32;&#32;{
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;msgdigest[i]&#32;=&#32;H[i];
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00411"/>00411 &#32;&#32;&#32;&#32;}
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00412"/>00412 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00413"/>00413 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00414"/>00414 }
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00415"/>00415 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00416"/>00416 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00427"/>00427 <emphasis role="keywordtype">void</emphasis>&#32;HASHSHA1::Clean()
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00428"/>00428 {
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00429"/>00429 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00430"/>00430 }
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00431"/>00431 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00432"/>00432 
<anchor xml:id="__hash_s_h_a1_8cpp_source_1l00433"/>00433 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
</programlisting></section>
