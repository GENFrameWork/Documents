<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source" xml:lang="en-US">
<title>DIOSTM32GPIO.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Platforms/Microcontrollers/STM32/DIOSTM32GPIO.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00001"/>00001 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;CONTROL&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00030"/>00030 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00031"/>00031 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00032"/>00032 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00033"/>00033 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00034"/>00034 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00035"/>00035 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00036"/>00036 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_s_t_m32___h_a_l_8h">XSTM32_HAL.h</link>&quot;</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_trace_8h">XTrace.h</link>&quot;</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00038"/>00038 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00039"/>00039 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__d_i_o_s_t_m32_g_p_i_o_8h">DIOSTM32GPIO.h</link>&quot;</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00040"/>00040 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00041"/>00041 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00042"/>00042 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00043"/>00043 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00044"/>00044 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00045"/>00045 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00046"/>00046 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00047"/>00047 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00048"/>00048 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00058"/><link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1a2b5bd9e800a80a6260a25660821113e6">00058</link> <link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1a2b5bd9e800a80a6260a25660821113e6">DIOSTM32GPIO::DIOSTM32GPIO</link>():&#32;<link linkend="_class_d_i_o_g_p_i_o">DIOGPIO</link>()
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00059"/>00059 {
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00060"/>00060 &#32;&#32;Clean();
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00061"/>00061 }
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00062"/>00062 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00063"/>00063 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00064"/>00064 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00075"/><link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1a4e5cd60174433291baa541640317039c">00075</link> <link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1a4e5cd60174433291baa541640317039c">DIOSTM32GPIO::~DIOSTM32GPIO</link>()
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00076"/>00076 {
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00077"/>00077 &#32;&#32;Clean();
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00078"/>00078 }
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00079"/>00079 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00080"/>00080 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00081"/>00081 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00091"/><link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1ab078c492b91096e62c5595a488941a5b">00091</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1ab078c492b91096e62c5595a488941a5b">DIOSTM32GPIO::Ini</link>()
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00092"/>00092 {
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00093"/>00093 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00094"/>00094 }
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00095"/>00095 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00096"/>00096 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00097"/>00097 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00110"/><link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1acceb2dea35dc998ea6818e2ae563cc01">00110</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1acceb2dea35dc998ea6818e2ae563cc01">DIOSTM32GPIO::SetMode</link>(<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y">DIOGPIO_ENTRY</link>*&#32;entry,&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;mode)
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00111"/>00111 {
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00112"/>00112 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!entry)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00113"/>00113 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00114"/>00114 &#32;&#32;entry-&gt;<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y_1a1b2bb814609b192da96fdd0bc58d4769">SetMode</link>(mode);&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00115"/>00115 &#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00116"/>00116 &#32;&#32;GPIO_InitTypeDef&#32;&#32;GPIO_initstruct&#32;=&#32;{0};&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00117"/>00117 &#32;&#32;GPIO_TypeDef*&#32;&#32;&#32;&#32;&#32;GPIOgroup&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00118"/>00118 &#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00119"/>00119 &#32;&#32;GPIO_initstruct.Pin&#32;&#32;=&#32;entry-&gt;<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y_1ac3212f52c3ff08015185d4af84128fd2">GetPin</link>();
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00120"/>00120 &#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00121"/>00121 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(entry-&gt;<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y_1a4d282cfa7507c4d22c07736502cfdb1a">GetGroup</link>())
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833a457847bab4384467c564c27d846b47df">DIOGPIO_PINSGROUP_NONE</link>&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833addf96d42c87fea93ae22570e3004af9e">DIOGPIO_PINSGROUP_A</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOA;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833ad9edcb04429923d451c7fd3ae3d5b582">DIOGPIO_PINSGROUP_B</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOB;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833adb6b67ee47eb1ebefdbc51a81c17f70d">DIOGPIO_PINSGROUP_C</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOC;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833aaa8e2bd8093c255520eee09e271021b8">DIOGPIO_PINSGROUP_D</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOD;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833ac2489c6a643f19b991e9109f5caacf13">DIOGPIO_PINSGROUP_E</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOE;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00129"/>00129 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;defined(HW_STM32F4XX)</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833af1db60cd3e6801f4151e31ba32b2b302">DIOGPIO_PINSGROUP_F</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOF;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00131"/>00131 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#else&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833af1db60cd3e6801f4151e31ba32b2b302">DIOGPIO_PINSGROUP_F</link>&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00133"/>00133 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#endif&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00135"/>00135 &#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00136"/>00136 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((mode&#32;&amp;&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a4fa9329aaa840e643f98dba8211d63ba">DIOGPIO_MODE_INTERRUPT</link>)&#32;==&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a4fa9329aaa840e643f98dba8211d63ba">DIOGPIO_MODE_INTERRUPT</link>)
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;GPIO_initstruct.Mode&#32;=&#32;GPIO_MODE_IT_RISING_FALLING;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;GPIO_initstruct.Pull&#32;=&#32;GPIO_NOPULL;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;GPIO_initstruct.Mode&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;GPIO_MODE_INPUT;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((mode&#32;&amp;&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a35602bfdf7d8cd6a558027a378f50041">DIOGPIO_MODE_INPUT</link>)&#32;&#32;==&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a35602bfdf7d8cd6a558027a378f50041">DIOGPIO_MODE_INPUT</link>)&#32;&#32;&#32;GPIO_initstruct.Mode&#32;=&#32;GPIO_MODE_INPUT;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((mode&#32;&amp;&#32;<link linkend="__d_i_o_g_p_i_o_8h_1af43e26d0701212b8857b22becaa4c416">DIOGPIO_MODE_OUTPUT</link>)&#32;==&#32;<link linkend="__d_i_o_g_p_i_o_8h_1af43e26d0701212b8857b22becaa4c416">DIOGPIO_MODE_OUTPUT</link>)&#32;&#32;GPIO_initstruct.Mode&#32;=&#32;GPIO_MODE_OUTPUT_PP;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(entry-&gt;<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y_1a908c5198e9460b394c4f5b41891be1aa">GetPullMode</link>())
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a694a6cec909ef12734a3a12597773462a2d699e9b280aba5f65a869626b93aaf8">DIOGPIO_PULLMODE_OFF</link>&#32;&#32;&#32;:&#32;GPIO_initstruct.Pull&#32;=&#32;GPIO_NOPULL;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a694a6cec909ef12734a3a12597773462afd0056e78b801961caedf4d881a421ec">DIOGPIO_PULLMODE_UP</link>&#32;&#32;&#32;&#32;:&#32;GPIO_initstruct.Pull&#32;=&#32;GPIO_PULLUP;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a694a6cec909ef12734a3a12597773462af6b3e106270a05fc957116fd39e948f3">DIOGPIO_PULLMODE_DOWN</link>&#32;&#32;:&#32;GPIO_initstruct.Pull&#32;=&#32;GPIO_PULLDOWN;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;&#32;&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;GPIO_initstruct.Speed&#32;&#32;&#32;&#32;&#32;&#32;=&#32;GPIO_SPEED_FREQ_LOW;&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00157"/>00157 &#32;&#32;HAL_GPIO_Init(GPIOgroup,&#32;&amp;GPIO_initstruct);
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00158"/>00158 &#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00159"/>00159 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((mode&#32;&amp;&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a4fa9329aaa840e643f98dba8211d63ba">DIOGPIO_MODE_INTERRUPT</link>)&#32;==&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a4fa9329aaa840e643f98dba8211d63ba">DIOGPIO_MODE_INTERRUPT</link>)
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;EXTI&#32;interrupt&#32;init</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;HAL_NVIC_SetPriority((IRQn_Type)entry-&gt;<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y_1a4c4911f6a9a28e19b0f8cf892026ebe1">GetIntIRQ</link>(),&#32;entry-&gt;<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y_1a827dd0e69f4636503afeeb3956b94ed3">GetIntPriority</link>(),&#32;0);
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;HAL_NVIC_EnableIRQ((IRQn_Type)entry-&gt;<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y_1a4c4911f6a9a28e19b0f8cf892026ebe1">GetIntIRQ</link>());&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00165"/>00165 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00166"/>00166 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00167"/>00167 }
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00168"/>00168 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00169"/>00169 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00170"/>00170 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00182"/><link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1a5376c658cbc8ac41477c5a24bf984a36">00182</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1a5376c658cbc8ac41477c5a24bf984a36">DIOSTM32GPIO::GetValue</link>(<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y">DIOGPIO_ENTRY</link>*&#32;entry)
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00183"/>00183 {&#32;&#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00184"/>00184 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!entry)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00185"/>00185 &#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00186"/>00186 &#32;&#32;GPIO_TypeDef*&#32;GPIOgroup&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00187"/>00187 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00188"/>00188 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(entry-&gt;<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y_1a4d282cfa7507c4d22c07736502cfdb1a">GetGroup</link>())
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833a457847bab4384467c564c27d846b47df">DIOGPIO_PINSGROUP_NONE</link>&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833addf96d42c87fea93ae22570e3004af9e">DIOGPIO_PINSGROUP_A</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOA;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833ad9edcb04429923d451c7fd3ae3d5b582">DIOGPIO_PINSGROUP_B</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOB;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833adb6b67ee47eb1ebefdbc51a81c17f70d">DIOGPIO_PINSGROUP_C</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOC;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833aaa8e2bd8093c255520eee09e271021b8">DIOGPIO_PINSGROUP_D</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOD;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833ac2489c6a643f19b991e9109f5caacf13">DIOGPIO_PINSGROUP_E</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOE;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00196"/>00196 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;defined(HW_STM32F4XX)</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833af1db60cd3e6801f4151e31ba32b2b302">DIOGPIO_PINSGROUP_F</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOF;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00198"/>00198 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#else</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833af1db60cd3e6801f4151e31ba32b2b302">DIOGPIO_PINSGROUP_F</link>&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00200"/>00200 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00202"/>00202 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00203"/>00203 &#32;&#32;GPIO_PinState&#32;state&#32;=&#32;HAL_GPIO_ReadPin(GPIOgroup,&#32;entry-&gt;<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y_1ac3212f52c3ff08015185d4af84128fd2">GetPin</link>());
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00204"/>00204 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(state&#32;==&#32;GPIO_PIN_RESET)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00205"/>00205 &#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00206"/>00206 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00207"/>00207 }
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00208"/>00208 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00209"/>00209 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00210"/>00210 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00223"/><link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1aa230788158df4dadfab6d59b279b7f6d">00223</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1aa230788158df4dadfab6d59b279b7f6d">DIOSTM32GPIO::SetValue</link>(<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y">DIOGPIO_ENTRY</link>*&#32;entry,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value)
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00224"/>00224 {
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00225"/>00225 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!entry)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00226"/>00226 &#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00227"/>00227 &#32;&#32;GPIO_TypeDef*&#32;GPIOgroup&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00228"/>00228 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00229"/>00229 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(entry-&gt;<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y_1a4d282cfa7507c4d22c07736502cfdb1a">GetGroup</link>())
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;{
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833a457847bab4384467c564c27d846b47df">DIOGPIO_PINSGROUP_NONE</link>&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833addf96d42c87fea93ae22570e3004af9e">DIOGPIO_PINSGROUP_A</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOA;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833ad9edcb04429923d451c7fd3ae3d5b582">DIOGPIO_PINSGROUP_B</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOB;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833adb6b67ee47eb1ebefdbc51a81c17f70d">DIOGPIO_PINSGROUP_C</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOC;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833aaa8e2bd8093c255520eee09e271021b8">DIOGPIO_PINSGROUP_D</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOD;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833ac2489c6a643f19b991e9109f5caacf13">DIOGPIO_PINSGROUP_E</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOE;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00237"/>00237 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;defined(HW_STM32F4XX)</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833af1db60cd3e6801f4151e31ba32b2b302">DIOGPIO_PINSGROUP_F</link>&#32;&#32;&#32;&#32;:&#32;GPIOgroup&#32;=&#32;GPIOF;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00239"/>00239 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#else</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__d_i_o_g_p_i_o_8h_1add0367874dc2c8576ce5d14a3e2a0833af1db60cd3e6801f4151e31ba32b2b302">DIOGPIO_PINSGROUP_F</link>&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00241"/>00241 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00243"/>00243 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00244"/>00244 &#32;&#32;HAL_GPIO_WritePin(GPIOgroup,&#32;entry-&gt;<link linkend="_class_d_i_o_g_p_i_o___e_n_t_r_y_1ac3212f52c3ff08015185d4af84128fd2">GetPin</link>(),&#32;value?GPIO_PIN_SET:GPIO_PIN_RESET);
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00245"/>00245 &#32;&#32;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00246"/>00246 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00247"/>00247 }
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00248"/>00248 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00249"/>00249 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00250"/>00250 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00251"/>00251 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00261"/><link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1a8d85f0ce83f2ebfe99e1dde9e7ca023a">00261</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_d_i_o_s_t_m32_g_p_i_o_1a8d85f0ce83f2ebfe99e1dde9e7ca023a">DIOSTM32GPIO::End</link>()
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00262"/>00262 {
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00263"/>00263 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00264"/>00264 }
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00265"/>00265 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00266"/>00266 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00267"/>00267 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00278"/>00278 <emphasis role="keywordtype">void</emphasis>&#32;DIOSTM32GPIO::Clean()
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00279"/>00279 {
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00280"/>00280 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00281"/>00281 
<anchor xml:id="__d_i_o_s_t_m32_g_p_i_o_8cpp_source_1l00282"/>00282 }
</programlisting></section>
