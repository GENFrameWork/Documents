<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_thread_collected_8cpp_source" xml:lang="en-US">
<title>XThreadCollected.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/XUtils/XThreadCollected.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_thread_collected_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;INCLUDES&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;region&#32;PRECOMPILATION_INCLUDES</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00031"/>00031 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00036"/>00036 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">#ifdef&#32;XTHREADCOLLECTED_ACTIVE</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00038"/>00038 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00039"/>00039 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00040"/>00040 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00041"/>00041 <emphasis role="preprocessor">#pragma&#32;region&#32;INCLUDES</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00042"/>00042 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_thread_collected_8h">XThreadCollected.h</link>&quot;</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00044"/>00044 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00046"/>00046 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00047"/>00047 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00048"/>00048 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00049"/>00049 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00050"/>00050 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00051"/>00051 <emphasis role="preprocessor">#pragma&#32;region&#32;GENERAL_VARIABLE</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00052"/>00052 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00053"/>00053 XTHREADSCOLLECTEDMANAGER*&#32;XTHREADSCOLLECTEDMANAGER::instance&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00054"/>00054 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00055"/>00055 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00056"/>00056 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00057"/>00057 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00058"/>00058 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00059"/>00059 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_MEMBERS</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00060"/>00060 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00061"/>00061 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00062"/>00062 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_XTHREADCOLLECTED</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00063"/>00063 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00064"/>00064 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00074"/>00074 XTHREADCOLLECTED::XTHREADCOLLECTED()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00075"/>00075 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00076"/>00076 &#32;&#32;Clean();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00077"/>00077 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00078"/>00078 &#32;&#32;GEN_XFACTORY_CREATE(xtimerout,&#32;CreateTimer())
<anchor xml:id="__x_thread_collected_8cpp_source_1l00079"/>00079 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00080"/>00080 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00081"/>00081 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00096"/>00096 XTHREADCOLLECTED::XTHREADCOLLECTED(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;ID,&#32;<link linkend="__x_thread_8h_1a75cd5e654ca0f2255ae2473172af98d6">XTHREADFUNCTION</link>&#32;function,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;param)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00097"/>00097 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00098"/>00098 &#32;&#32;Clean();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00099"/>00099 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00100"/>00100 &#32;&#32;GEN_XFACTORY_CREATE(directxthread,&#32;CreateThread(groupID,&#32;ID,&#32;function,&#32;param))
<anchor xml:id="__x_thread_collected_8cpp_source_1l00101"/>00101 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;ID&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ID;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;function&#32;=&#32;function;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;param&#32;&#32;&#32;&#32;=&#32;param;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00107"/>00107 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00108"/>00108 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00109"/>00109 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00120"/>00120 XTHREADCOLLECTED::~XTHREADCOLLECTED()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00121"/>00121 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00122"/>00122 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(xtimerout)&#32;&#32;&#32;&#32;&#32;GEN_XFACTORY.DeleteTimer(xtimerout);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00123"/>00123 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;GEN_XFACTORY.DeleteThread(groupID,&#32;directxthread);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00124"/>00124 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00125"/>00125 &#32;&#32;Clean();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00126"/>00126 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00127"/>00127 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00128"/>00128 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00140"/>00140 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADCOLLECTED::Ini(<emphasis role="keywordtype">bool</emphasis>&#32;run)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00141"/>00141 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00142"/>00142 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;Ini(run);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00143"/>00143 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00144"/>00144 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(run)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!Run(<emphasis role="keyword">true</emphasis>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a38a37e3fa13a372c1389ecbfa4b8af62">XTHREADSTATUS_STOP</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00152"/>00152 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00153"/>00153 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00154"/>00154 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00155"/>00155 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00156"/>00156 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00168"/>00168 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADCOLLECTED::Wait(<emphasis role="keywordtype">int</emphasis>&#32;milliseconds)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00169"/>00169 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00170"/>00170 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;directxthread-&gt;Wait(milliseconds);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00175"/>00175 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00176"/>00176 &#32;&#32;GEN_XSLEEP.MilliSeconds(milliseconds);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00177"/>00177 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00178"/>00178 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00179"/>00179 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00189"/>00189 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADCOLLECTED::End()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00190"/>00190 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00191"/>00191 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;End();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00195"/>00195 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00196"/>00196 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;==&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a0810d58d25021355fa8ae7bf348ed610">XTHREADSTATUS_END</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00197"/>00197 &#32;&#32;status&#32;=&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a93f78a60f2a85c943ec7559ae1893aec">XTHREADSTATUS_EXIT</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00198"/>00198 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00199"/>00199 &#32;&#32;WaitToEnd();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00200"/>00200 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00201"/>00201 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00202"/>00202 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00203"/>00203 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00204"/>00204 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00214"/>00214 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADCOLLECTED::IsRunning()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00215"/>00215 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00216"/>00216 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;IsRunning();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00217"/>00217 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00218"/>00218 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;==&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a4e8ecb23b264abef1f4f9bee700b5513">XTHREADSTATUS_RUN</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00219"/>00219 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00220"/>00220 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00221"/>00221 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00222"/>00222 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00234"/>00234 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADCOLLECTED::Run(<emphasis role="keywordtype">bool</emphasis>&#32;activate)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00235"/>00235 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00236"/>00236 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;Run(activate);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00237"/>00237 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00238"/>00238 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(activate)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(IsRunning())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a4e8ecb23b264abef1f4f9bee700b5513">XTHREADSTATUS_RUN</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!IsRunning())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a38a37e3fa13a372c1389ecbfa4b8af62">XTHREADSTATUS_STOP</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00248"/>00248 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00249"/>00249 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00250"/>00250 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00251"/>00251 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00252"/>00252 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00262"/>00262 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADCOLLECTED::Exit()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00263"/>00263 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00264"/>00264 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;Exit();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00265"/>00265 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00266"/>00266 &#32;&#32;status&#32;=&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a93f78a60f2a85c943ec7559ae1893aec">XTHREADSTATUS_EXIT</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00267"/>00267 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00268"/>00268 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00269"/>00269 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00270"/>00270 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00280"/>00280 <link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;XTHREADCOLLECTED::GetGroupID()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00281"/>00281 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00282"/>00282 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;groupID;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00283"/>00283 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00284"/>00284 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00285"/>00285 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00297"/>00297 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADCOLLECTED::SetGroupID(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00298"/>00298 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00299"/>00299 &#32;&#32;this-&gt;groupID&#32;=&#32;groupID;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00300"/>00300 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00301"/>00301 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00302"/>00302 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00312"/>00312 <link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>*&#32;XTHREADCOLLECTED::GetID()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00313"/>00313 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00314"/>00314 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;GetID();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;ID;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00322"/>00322 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00323"/>00323 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00324"/>00324 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00334"/>00334 <link linkend="__x_thread_8h_1a75cd5e654ca0f2255ae2473172af98d6">XTHREADFUNCTION</link>&#32;&#32;XTHREADCOLLECTED::GetFunction()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00335"/>00335 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00336"/>00336 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;GetFunction();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;function;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00344"/>00344 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00345"/>00345 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00346"/>00346 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00358"/>00358 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADCOLLECTED::SetFunction(<link linkend="__x_thread_8h_1a75cd5e654ca0f2255ae2473172af98d6">XTHREADFUNCTION</link>&#32;function)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00359"/>00359 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00360"/>00360 &#32;&#32;this-&gt;function&#32;=&#32;function;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00361"/>00361 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00362"/>00362 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00363"/>00363 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00373"/>00373 <emphasis role="keywordtype">void</emphasis>*&#32;XTHREADCOLLECTED::GetParam()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00374"/>00374 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00375"/>00375 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;GetParam();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00376"/>00376 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;param;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00377"/>00377 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00378"/>00378 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00379"/>00379 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00391"/>00391 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADCOLLECTED::SetParam(<emphasis role="keywordtype">void</emphasis>*&#32;param)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00392"/>00392 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00393"/>00393 &#32;&#32;this-&gt;param&#32;=&#32;param;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00394"/>00394 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00395"/>00395 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00396"/>00396 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00406"/>00406 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;XTHREADCOLLECTED::GetWaitYield()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00407"/>00407 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00408"/>00408 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;GetWaitYield();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00409"/>00409 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;waityield;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00410"/>00410 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00411"/>00411 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00412"/>00412 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00424"/>00424 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADCOLLECTED::SetWaitYield(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;waityield)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00425"/>00425 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00426"/>00426 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;SetWaitYield(priority);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00427"/>00427 &#32;&#32;this-&gt;waityield&#32;=&#32;waityield;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00428"/>00428 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00429"/>00429 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00430"/>00430 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00440"/>00440 <link linkend="__x_thread_8h_1a9082e176800b19a3e755ff93b5678735">XTHREADPRIORITY</link>&#32;XTHREADCOLLECTED::GetPriority()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00441"/>00441 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00442"/>00442 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;GetPriority();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00443"/>00443 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;priority;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00444"/>00444 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00445"/>00445 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00446"/>00446 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00458"/>00458 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADCOLLECTED::SetPriority(<link linkend="__x_thread_8h_1a9082e176800b19a3e755ff93b5678735">XTHREADPRIORITY</link>&#32;priority)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00459"/>00459 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00460"/>00460 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;SetPriority(priority);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00461"/>00461 &#32;&#32;this-&gt;priority&#32;=&#32;priority;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00462"/>00462 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00463"/>00463 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00464"/>00464 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00474"/>00474 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;XTHREADCOLLECTED::GetStackSize()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00475"/>00475 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00476"/>00476 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stacksize;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00477"/>00477 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00478"/>00478 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00479"/>00479 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00491"/>00491 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADCOLLECTED::SetStackSize(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;stacksize)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00492"/>00492 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00493"/>00493 &#32;&#32;this-&gt;stacksize&#32;=&#32;stacksize;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00494"/>00494 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00495"/>00495 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00496"/>00496 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00506"/>00506 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADCOLLECTED::IsInFunction()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00507"/>00507 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00508"/>00508 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;IsInFunction();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00509"/>00509 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;isinfunction;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00510"/>00510 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00511"/>00511 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00512"/>00512 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00524"/>00524 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADCOLLECTED::SetIsInFunction(<emphasis role="keywordtype">bool</emphasis>&#32;isinfunction)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00525"/>00525 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00526"/>00526 &#32;&#32;this-&gt;isinfunction&#32;=&#32;isinfunction;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00527"/>00527 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00528"/>00528 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00529"/>00529 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00539"/>00539 <link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927">XTHREADSTATUS</link>&#32;XTHREADCOLLECTED::GetStatus()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00540"/>00540 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00541"/>00541 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(directxthread)&#32;<emphasis role="keywordflow">return</emphasis>&#32;directxthread-&gt;GetStatusFunc();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00542"/>00542 &#32;&#32;<emphasis role="comment">//if(status&#32;==&#32;XTHREADSTATUS_EXIT)&#32;return&#32;XTHREADSTATUS_UNKNOWN;&#32;//&#32;#Imanol</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00543"/>00543 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00544"/>00544 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00545"/>00545 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00546"/>00546 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00547"/>00547 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00559"/>00559 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADCOLLECTED::SetStatus(<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927">XTHREADSTATUS</link>&#32;status)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00560"/>00560 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00561"/>00561 &#32;&#32;this-&gt;status&#32;=&#32;status;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00562"/>00562 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00563"/>00563 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00564"/>00564 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00574"/>00574 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADCOLLECTED::WaitToEnd()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00575"/>00575 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00576"/>00576 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(GetStatus()&#32;!=&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a0810d58d25021355fa8ae7bf348ed610">XTHREADSTATUS_END</link>)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00577"/>00577 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;Wait();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00579"/>00579 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00580"/>00580 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00581"/>00581 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00582"/>00582 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00583"/>00583 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00584"/>00584 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00595"/>00595 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADCOLLECTED::Clean()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00596"/>00596 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00597"/>00597 &#32;&#32;groupID&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6aeceae7195c2308897817e2cc44a49192">XTHREADGROUPID_UNKNOWN</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00598"/>00598 &#32;&#32;ID.Empty();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00599"/>00599 &#32;&#32;function&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00600"/>00600 &#32;&#32;param&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00601"/>00601 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00602"/>00602 &#32;&#32;waityield&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_thread_8h_1abc7512ca71aa3c705da3806b4f6672bc">XTHREAD_DEFAULTWAITYIELD</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00603"/>00603 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00604"/>00604 &#32;&#32;priority&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_thread_8h_1a9082e176800b19a3e755ff93b5678735adc950499a79db57aa66cdb3ab7a1e96e">XTHREADPRIORITY_UNKNOWN</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00605"/>00605 &#32;&#32;stacksize&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00606"/>00606 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00607"/>00607 &#32;&#32;isinfunction&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00608"/>00608 &#32;&#32;status&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a81963178051e48ef3134324308613eee">XTHREADSTATUS_NONE</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00609"/>00609 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00610"/>00610 &#32;&#32;xtimerout&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00611"/>00611 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00612"/>00612 &#32;&#32;directxthread&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00613"/>00613 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00614"/>00614 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00615"/>00615 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00616"/>00616 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00617"/>00617 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00618"/>00618 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00619"/>00619 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_THREADSCOLLECTED</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00620"/>00620 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00621"/>00621 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00633"/>00633 XTHREADSCOLLECTED::XTHREADSCOLLECTED(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00634"/>00634 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00635"/>00635 &#32;&#32;Clean();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00636"/>00636 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00637"/>00637 &#32;&#32;this-&gt;groupID&#32;=&#32;groupID;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00638"/>00638 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00639"/>00639 &#32;&#32;GEN_XFACTORY_CREATE(xthreadsvectormutex,&#32;Create_Mutex())
<anchor xml:id="__x_thread_collected_8cpp_source_1l00640"/>00640 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00641"/>00641 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;stringID;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00642"/>00642 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00643"/>00643 &#32;&#32;GetGroupThreadIDString(stringID);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00644"/>00644 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00645"/>00645 &#32;&#32;if(xthreadsvectormutex)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00646"/>00646 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00647"/>00647 &#32;&#32;&#32;&#32;&#32;&#32;GEN_XFACTORY_CREATE(xthread,&#32;CreateThread(groupID,&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ad1470753a96f93e2feb3ee54e6fef95f">Get</link>(),&#32;ThreadRunFunction,&#32;(<emphasis role="keywordtype">void</emphasis>*)<emphasis role="keyword">this</emphasis>));
<anchor xml:id="__x_thread_collected_8cpp_source_1l00648"/>00648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthread)&#32;xthread-&gt;Ini();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00649"/>00649 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00650"/>00650 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00651"/>00651 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00652"/>00652 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00662"/>00662 XTHREADSCOLLECTED::XTHREADSCOLLECTED()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00663"/>00663 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00664"/>00664 &#32;&#32;Clean();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00665"/>00665 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00666"/>00666 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00667"/>00667 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00678"/>00678 XTHREADSCOLLECTED::~XTHREADSCOLLECTED()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00679"/>00679 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00680"/>00680 &#32;&#32;ExitAll();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00681"/>00681 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00682"/>00682 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthread)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00683"/>00683 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00684"/>00684 &#32;&#32;&#32;&#32;&#32;&#32;xthread-&gt;End();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00685"/>00685 &#32;&#32;&#32;&#32;&#32;&#32;GEN_XFACTORY.DeleteThread(groupID,&#32;xthread);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00686"/>00686 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00687"/>00687 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00688"/>00688 &#32;&#32;DeleteAll();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00689"/>00689 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00690"/>00690 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthreadsvectormutex)&#32;GEN_XFACTORY.Delete_Mutex(xthreadsvectormutex);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00691"/>00691 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00692"/>00692 &#32;&#32;Clean();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00693"/>00693 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00694"/>00694 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00695"/>00695 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00705"/>00705 <link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;XTHREADSCOLLECTED::GetGroupID()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00706"/>00706 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00707"/>00707 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;groupID;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00708"/>00708 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00709"/>00709 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00710"/>00710 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00722"/>00722 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADSCOLLECTED::SetGroupID(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00723"/>00723 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00724"/>00724 &#32;&#32;this-&gt;groupID&#32;=&#32;groupID;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00725"/>00725 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00726"/>00726 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00727"/>00727 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00742"/>00742 <link linkend="_class_x_t_h_r_e_a_d_c_o_l_l_e_c_t_e_d">XTHREADCOLLECTED</link>*&#32;XTHREADSCOLLECTED::Create(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;ID,&#32;<link linkend="__x_thread_8h_1a75cd5e654ca0f2255ae2473172af98d6">XTHREADFUNCTION</link>&#32;function,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;param)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00743"/>00743 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00744"/>00744 &#32;&#32;<link linkend="_class_x_t_h_r_e_a_d_c_o_l_l_e_c_t_e_d">XTHREADCOLLECTED</link>*&#32;xthreadcollected&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00745"/>00745 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00746"/>00746 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthread)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00747"/>00747 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00748"/>00748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xthreadsvectormutex)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00749"/>00749 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00750"/>00750 &#32;&#32;&#32;&#32;&#32;&#32;xthreadsvectormutex-&gt;Lock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00751"/>00751 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00752"/>00752 &#32;&#32;&#32;&#32;&#32;&#32;xthreadcollected&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="__x_thread_collected_8h_1a75f25da29b8b842713b49e5893910fd5">XTHREADCOLLECTED</link>();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00753"/>00753 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthreadcollected)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00754"/>00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00755"/>00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadcollected-&gt;SetGroupID(groupID);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00756"/>00756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadcollected-&gt;GetID()-&gt;Set(ID);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00757"/>00757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadcollected-&gt;SetFunction(function);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00758"/>00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadcollected-&gt;SetParam(param);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00759"/>00759 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00760"/>00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadsvector.Add(xthreadcollected);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00761"/>00761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00762"/>00762 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00763"/>00763 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00764"/>00764 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;XTRACE_ACTIVE</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00765"/>00765 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;XSTRING&#32;groupID;</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00766"/>00766 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;GetGroupThreadIDString(groupID);</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00767"/>00767 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;XTRACE_PRINTCOLOR(XDEBUG_COLORINFO,&#32;__L(&quot;Create&#32;THREAD&#32;COLLECTED&#32;(%02d)&#32;grupo&#32;%s:&#32;%s&quot;),&#32;xthreadsvector.GetSize(),&#32;groupID.Get(),&#32;ID);</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00768"/>00768 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00769"/>00769 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00770"/>00770 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00771"/>00771 &#32;&#32;&#32;&#32;&#32;&#32;xthreadsvectormutex-&gt;UnLock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00772"/>00772 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00773"/>00773 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00774"/>00774 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00775"/>00775 &#32;&#32;&#32;&#32;&#32;&#32;xthreadcollected&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="__x_thread_collected_8h_1a75f25da29b8b842713b49e5893910fd5">XTHREADCOLLECTED</link>(groupID,&#32;ID,&#32;function,&#32;param);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00776"/>00776 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthreadcollected)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00777"/>00777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00778"/>00778 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00779"/>00779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00780"/>00780 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00781"/>00781 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00782"/>00782 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xthreadcollected;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00783"/>00783 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00784"/>00784 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00785"/>00785 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00798"/>00798 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADSCOLLECTED::Delete(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID,&#32;<link linkend="_class_x_t_h_r_e_a_d_c_o_l_l_e_c_t_e_d">XTHREADCOLLECTED</link>*&#32;xthreadcollected)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00799"/>00799 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00800"/>00800 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00801"/>00801 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00802"/>00802 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthread)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00803"/>00803 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00804"/>00804 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xthreadsvectormutex)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00805"/>00805 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00806"/>00806 &#32;&#32;&#32;&#32;&#32;&#32;xthreadsvectormutex-&gt;Lock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00807"/>00807 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00808"/>00808 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;index&#32;=&#32;0;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00809"/>00809 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00810"/>00810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;<link linkend="_class_x_t_h_r_e_a_d_c_o_l_l_e_c_t_e_d">XTHREADCOLLECTED</link>*&#32;_xthreadcollected&#32;=&#32;xthreadsvector.Get(index);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00811"/>00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthreadcollected&#32;==&#32;_xthreadcollected)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00812"/>00812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00813"/>00813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00814"/>00814 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;XTRACE_ACTIVE</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00815"/>00815 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XSTRING&#32;groupID;</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00816"/>00816 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GetGroupThreadIDString(groupID);</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00817"/>00817 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XTRACE_PRINTCOLOR(XDEBUG_COLORINFO,&#32;__L(&quot;Delete&#32;THREAD&#32;COLLECTED&#32;(%02d)&#32;grupo&#32;%s:&#32;%s&quot;),&#32;xthreadsvector.GetSize(),&#32;groupID.Get(),&#32;xthreadcollected-&gt;GetID()-&gt;Get());</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00818"/>00818 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00819"/>00819 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00820"/>00820 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00821"/>00821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadcollected-&gt;Exit();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00822"/>00822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadsvector.Delete(xthreadcollected);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00823"/>00823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;xthreadcollected;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00824"/>00824 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00825"/>00825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00826"/>00826 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00827"/>00827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00828"/>00828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00829"/>00829 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00830"/>00830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index++;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00831"/>00831 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00832"/>00832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(index&#32;&lt;&#32;xthreadsvector.GetSize());
<anchor xml:id="__x_thread_collected_8cpp_source_1l00833"/>00833 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00834"/>00834 &#32;&#32;&#32;&#32;&#32;&#32;xthreadsvectormutex-&gt;UnLock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00835"/>00835 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00836"/>00836 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l00837"/>00837 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00838"/>00838 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;xthreadcollected;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00839"/>00839 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00840"/>00840 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00841"/>00841 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00842"/>00842 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00843"/>00843 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00844"/>00844 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00854"/>00854 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADSCOLLECTED::ExitAll()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00855"/>00855 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00856"/>00856 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xthreadsvectormutex)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00857"/>00857 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00858"/>00858 &#32;&#32;xthreadsvectormutex-&gt;Lock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00859"/>00859 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00860"/>00860 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=0;&#32;c&lt;xthreadsvector.GetSize();&#32;c++)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00861"/>00861 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00862"/>00862 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_t_h_r_e_a_d_c_o_l_l_e_c_t_e_d">XTHREADCOLLECTED</link>*&#32;xthreadcollected&#32;&#32;=&#32;xthreadsvector.Get(c);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00863"/>00863 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthreadcollected)&#32;xthreadcollected-&gt;Exit();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00864"/>00864 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00865"/>00865 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00866"/>00866 &#32;&#32;xthreadsvectormutex-&gt;UnLock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00867"/>00867 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00868"/>00868 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00869"/>00869 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00870"/>00870 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00871"/>00871 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00881"/>00881 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADSCOLLECTED::DeleteAll()
<anchor xml:id="__x_thread_collected_8cpp_source_1l00882"/>00882 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00883"/>00883 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xthreadsvectormutex)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00884"/>00884 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00885"/>00885 &#32;&#32;xthreadsvectormutex-&gt;Lock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00886"/>00886 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00887"/>00887 &#32;&#32;xthreadsvector.DeleteContents();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00888"/>00888 &#32;&#32;xthreadsvector.DeleteAll();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00889"/>00889 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00890"/>00890 &#32;&#32;xthreadsvectormutex-&gt;UnLock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00891"/>00891 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00892"/>00892 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00893"/>00893 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00894"/>00894 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00895"/>00895 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00907"/>00907 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADSCOLLECTED::ThreadRunFunction(<emphasis role="keywordtype">void</emphasis>*&#32;param)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00908"/>00908 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00909"/>00909 &#32;&#32;XTHREADSCOLLECTED*&#32;xthreadscollected&#32;=&#32;(XTHREADSCOLLECTED*)param;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00910"/>00910 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xthreadscollected)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00911"/>00911 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00912"/>00912 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xthreadscollected-&gt;xthreadsvectormutex)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00913"/>00913 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00914"/>00914 &#32;&#32;xthreadscollected-&gt;xthreadsvectormutex-&gt;Lock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00915"/>00915 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00916"/>00916 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=0;&#32;c&lt;xthreadscollected-&gt;xthreadsvector.GetSize();&#32;c++)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00917"/>00917 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00918"/>00918 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_t_h_r_e_a_d_c_o_l_l_e_c_t_e_d">XTHREADCOLLECTED</link>*&#32;xthreadcollected&#32;&#32;=&#32;xthreadscollected-&gt;xthreadsvector.Get(c);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00919"/>00919 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthreadcollected)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00920"/>00920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00921"/>00921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(xthreadcollected-&gt;GetStatus())
<anchor xml:id="__x_thread_collected_8cpp_source_1l00922"/>00922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00923"/>00923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a4e8ecb23b264abef1f4f9bee700b5513">XTHREADSTATUS_RUN</link>&#32;&#32;&#32;&#32;:&#32;xthreadcollected-&gt;SetIsInFunction(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00924"/>00924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadcollected-&gt;GetFunction()(xthreadcollected-&gt;GetParam());
<anchor xml:id="__x_thread_collected_8cpp_source_1l00925"/>00925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadcollected-&gt;SetIsInFunction(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00926"/>00926 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00927"/>00927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadscollected-&gt;xthread-&gt;Wait();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00928"/>00928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00929"/>00929 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00930"/>00930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a93f78a60f2a85c943ec7559ae1893aec">XTHREADSTATUS_EXIT</link>&#32;&#32;&#32;:&#32;xthreadcollected-&gt;SetStatus(<link linkend="__x_thread_8h_1a366a30be55b44789bcfebf624c8cb927a0810d58d25021355fa8ae7bf348ed610">XTHREADSTATUS_END</link>);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00931"/>00931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00932"/>00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00933"/>00933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00934"/>00934 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00935"/>00935 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00936"/>00936 &#32;&#32;xthreadscollected-&gt;xthreadsvectormutex-&gt;UnLock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l00937"/>00937 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00938"/>00938 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00939"/>00939 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00951"/>00951 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADSCOLLECTED::GetGroupThreadIDString(<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&amp;&#32;stringID)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00952"/>00952 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l00953"/>00953 &#32;&#32;stringID&#32;=&#32;<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;TGRP_&quot;</emphasis>);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00954"/>00954 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00955"/>00955 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(groupID)
<anchor xml:id="__x_thread_collected_8cpp_source_1l00956"/>00956 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l00957"/>00957 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6aeceae7195c2308897817e2cc44a49192">XTHREADGROUPID_UNKNOWN</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;UNKNOWN&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00958"/>00958 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a60757c697f84ba3ee59e54ad99c3b6fe">XTHREADGROUPID_SCHEDULER</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;SCHEDULE&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00959"/>00959 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a382da90833173dd82ea60c8ab490a1e1">XTHREADGROUPID_SCRIPT</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;SCRIPT&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00960"/>00960 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6ada7b3bfa71269bbca6f7b6680fa5c20c">XTHREADGROUPID_DIOSTREAM</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOSTREAM&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00961"/>00961 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6afd5ea3f57252c8ca31afbd92ac8292ea">XTHREADGROUPID_DIOSTREAMUART</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOSTREAMUART&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00962"/>00962 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6ab8479c55eebafff2cd86d042ae6937fb">XTHREADGROUPID_DIOSTREAMUDP</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOSTREAMUDP&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00963"/>00963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6ada2e589a571a125daf1059834f358c91">XTHREADGROUPID_DIOSTREAMTCPIP</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOSTREAMTCPIP&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00964"/>00964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a37d26fb19e36a95c597124f179da2da5">XTHREADGROUPID_DIOSTREAMWIFI</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOSTREAMWIFI&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00965"/>00965 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6ae5fe84bac24b5801142accfc171ea7df">XTHREADGROUPID_DIOSTREAMBLUETOOTH</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOSTREAMBLUETOOTH&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00966"/>00966 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a84cb8ce10e9d83f06cdd1b368d0b67ea">XTHREADGROUPID_DIOSTREAMUSB</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOSTREAMUSB&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00967"/>00967 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a9c0348562e57324dfddf5c0b1cf8d81f">XTHREADGROUPID_DIOSTREAMICMP</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOSTREAMICMP&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00968"/>00968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a30fc7b8d19c0a99364d2df8b682f6e5b">XTHREADGROUPID_DIOSTREAMSPI</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOSTREAMSPI&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00969"/>00969 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6af27fef13ef4a6c463e7a4be2795e126c">XTHREADGROUPID_DIOSTREAMCIPHER</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOSTREAMCIPHER&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00970"/>00970 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a8dce842e574ea112a8e631392ccc611e">XTHREADGROUPID_DIOPROTOCOL</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOPROTOCOL&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00971"/>00971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6adeb7510774d91a5e4bd4f69d61f9a36d">XTHREADGROUPID_DIOPROTOCOL_CONNECTIONMANAGER</link>&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOPROTOCOL_CONNECTIONMANAGER&quot;</emphasis>));&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00972"/>00972 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a47da7ae89a8ab44bce4f7bfa034be687">XTHREADGROUPID_DIOWEBSERVER</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOWEBSERVER&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00973"/>00973 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a19f067386794af4e73a4c53286d885a7">XTHREADGROUPID_DIOATCMS</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOATCMS&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00974"/>00974 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a341b0909dee4ba53548b3df06192acb2">XTHREADGROUPID_DIOALERTS</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOALERTS&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00975"/>00975 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a8571eded63180e29f70d8a9764c2f27c">XTHREADGROUPID_DIOPCAP</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;DIOPCAP&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00976"/>00976 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a4594d7b6ee3560d52ab46a59b7936113">XTHREADGROUPID_VIDEO</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;VIDEO&quot;</emphasis>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00977"/>00977 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6aad4478226de0b952e69aedb96c97aa0c">XTHREADGROUPID_APPOWNER</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="__x_thread_collected_8cpp_source_1l00978"/>00978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;{&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;IDlocal;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00979"/>00979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IDlocal.<link linkend="_class_x_s_t_r_i_n_g_1a2177bf8a150174dfd155c7fe1b7b2af9">Format</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;APPOWNER[%d]&quot;</emphasis>),&#32;groupID);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00980"/>00980 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00981"/>00981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stringID.<link linkend="_class_x_s_t_r_i_n_g_1ae19f84471c20a914d10a8ac757cacb9a">Add</link>(IDlocal);
<anchor xml:id="__x_thread_collected_8cpp_source_1l00982"/>00982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00983"/>00983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00984"/>00984 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l00985"/>00985 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00986"/>00986 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l00987"/>00987 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l00988"/>00988 
<anchor xml:id="__x_thread_collected_8cpp_source_1l00989"/>00989 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01000"/>01000 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADSCOLLECTED::Clean()
<anchor xml:id="__x_thread_collected_8cpp_source_1l01001"/>01001 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01002"/>01002 &#32;&#32;groupID&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6aeceae7195c2308897817e2cc44a49192">XTHREADGROUPID_UNKNOWN</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01003"/>01003 &#32;&#32;xthreadsvectormutex&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01004"/>01004 &#32;&#32;xthread&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01005"/>01005 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01006"/>01006 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01007"/>01007 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01008"/>01008 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l01009"/>01009 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01010"/>01010 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01011"/>01011 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_XTHREADSCOLLECTEDMANAGER</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l01012"/>01012 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01013"/>01013 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01023"/>01023 XTHREADSCOLLECTEDMANAGER&amp;&#32;XTHREADSCOLLECTEDMANAGER::GetInstance()
<anchor xml:id="__x_thread_collected_8cpp_source_1l01024"/>01024 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01025"/>01025 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!instance)&#32;instance&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;XTHREADSCOLLECTEDMANAGER();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01026"/>01026 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01027"/>01027 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*instance);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01028"/>01028 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01029"/>01029 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01030"/>01030 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01040"/>01040 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADSCOLLECTEDMANAGER::DelInstance()
<anchor xml:id="__x_thread_collected_8cpp_source_1l01041"/>01041 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01042"/>01042 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(instance)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01043"/>01043 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01044"/>01044 &#32;&#32;&#32;&#32;&#32;&#32;instance-&gt;DeleteAll();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01045"/>01045 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01046"/>01046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;instance;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01047"/>01047 &#32;&#32;&#32;&#32;&#32;&#32;instance&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01048"/>01048 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01049"/>01049 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01050"/>01050 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01051"/>01051 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01052"/>01052 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01053"/>01053 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01054"/>01054 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01055"/>01055 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01067"/>01067 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADSCOLLECTEDMANAGER::ActivateGroup(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01068"/>01068 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01069"/>01069 &#32;&#32;groupthreadsactivate.Add(groupID);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01070"/>01070 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01071"/>01071 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01072"/>01072 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01073"/>01073 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01085"/>01085 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADSCOLLECTEDMANAGER::DeactivateGroup(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01086"/>01086 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01087"/>01087 &#32;&#32;groupthreadsactivate.Delete(groupID);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01088"/>01088 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01089"/>01089 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01090"/>01090 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01091"/>01091 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01103"/>01103 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADSCOLLECTEDMANAGER::IsActivateGroup(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01104"/>01104 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01105"/>01105 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=0;&#32;c&lt;groupthreadsactivate.GetSize();&#32;c++)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01106"/>01106 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01107"/>01107 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;_groupID&#32;=&#32;groupthreadsactivate.Get(c);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01108"/>01108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(groupID&#32;==&#32;_groupID)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01109"/>01109 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01110"/>01110 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01111"/>01111 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01112"/>01112 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01113"/>01113 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01114"/>01114 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01126"/>01126 XTHREADSCOLLECTED*&#32;XTHREADSCOLLECTEDMANAGER::GetThreadsCollectedByGroupID(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01127"/>01127 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01128"/>01128 &#32;&#32;XTHREADSCOLLECTED*&#32;xthreadscollected&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01129"/>01129 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01130"/>01130 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=0;&#32;c&lt;groupthreadsvector.GetSize();&#32;c++)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01131"/>01131 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01132"/>01132 &#32;&#32;&#32;&#32;&#32;&#32;XTHREADSCOLLECTED*&#32;_xthreadscollected&#32;=&#32;groupthreadsvector.Get(c);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01133"/>01133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(_xthreadscollected)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01134"/>01134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01135"/>01135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(_xthreadscollected-&gt;GetGroupID()&#32;==&#32;groupID)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01136"/>01136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01137"/>01137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadscollected&#32;=&#32;_xthreadscollected;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01138"/>01138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01139"/>01139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01140"/>01140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01141"/>01141 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01142"/>01142 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01143"/>01143 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xthreadscollected;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01144"/>01144 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01145"/>01145 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01146"/>01146 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01161"/>01161 <link linkend="_class_x_t_h_r_e_a_d_c_o_l_l_e_c_t_e_d">XTHREADCOLLECTED</link>*&#32;XTHREADSCOLLECTEDMANAGER::CreateThread(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;ID,&#32;<link linkend="__x_thread_8h_1a75cd5e654ca0f2255ae2473172af98d6">XTHREADFUNCTION</link>&#32;function,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;param)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01162"/>01162 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01163"/>01163 &#32;&#32;<link linkend="_class_x_t_h_r_e_a_d_c_o_l_l_e_c_t_e_d">XTHREADCOLLECTED</link>*&#32;&#32;xthreadcollected&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01164"/>01164 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isactivategroup&#32;&#32;=&#32;IsActivateGroup(groupID);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01165"/>01165 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01166"/>01166 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(isactivategroup)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01167"/>01167 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01168"/>01168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!groupthreadsmutex)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01169"/>01169 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01170"/>01170 &#32;&#32;&#32;&#32;&#32;&#32;groupthreadsmutex-&gt;Lock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01171"/>01171 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01172"/>01172 &#32;&#32;&#32;&#32;&#32;&#32;XTHREADSCOLLECTED*&#32;xthreadscollected&#32;=&#32;GetThreadsCollectedByGroupID(groupID);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01173"/>01173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!xthreadscollected)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01174"/>01174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01175"/>01175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadscollected&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;XTHREADSCOLLECTED(groupID);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01176"/>01176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthreadscollected)&#32;groupthreadsvector.Add(xthreadscollected);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01177"/>01177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01178"/>01178 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01179"/>01179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthreadscollected)&#32;xthreadcollected&#32;=&#32;xthreadscollected-&gt;Create(groupID,&#32;ID,&#32;function,&#32;param);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01180"/>01180 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01181"/>01181 &#32;&#32;&#32;&#32;&#32;&#32;groupthreadsmutex-&gt;UnLock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01182"/>01182 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01183"/>01183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l01184"/>01184 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01185"/>01185 &#32;&#32;&#32;&#32;&#32;&#32;XTHREADSCOLLECTED*&#32;xthreadscollected&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;XTHREADSCOLLECTED();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01186"/>01186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthreadscollected)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01187"/>01187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01188"/>01188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xthreadcollected&#32;=&#32;xthreadscollected-&gt;Create(groupID,&#32;ID,&#32;function,&#32;param);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01189"/>01189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;xthreadscollected;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01190"/>01190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01191"/>01191 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01192"/>01192 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01193"/>01193 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xthreadcollected;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01194"/>01194 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01195"/>01195 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01196"/>01196 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01209"/>01209 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADSCOLLECTEDMANAGER::DeleteThread(<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6">XTHREADGROUPID</link>&#32;groupID,&#32;<link linkend="_class_x_t_h_r_e_a_d_c_o_l_l_e_c_t_e_d">XTHREADCOLLECTED</link>*&#32;xthreadcollected)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01210"/>01210 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01211"/>01211 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isactivategroup&#32;=&#32;IsActivateGroup(groupID);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01212"/>01212 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01213"/>01213 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01214"/>01214 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(isactivategroup)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01215"/>01215 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01216"/>01216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!groupthreadsmutex)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01217"/>01217 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01218"/>01218 &#32;&#32;&#32;&#32;&#32;&#32;groupthreadsmutex-&gt;Lock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01219"/>01219 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01220"/>01220 &#32;&#32;&#32;&#32;&#32;&#32;XTHREADSCOLLECTED*&#32;xthreadscollected&#32;=&#32;GetThreadsCollectedByGroupID(isactivategroup?groupID:<link linkend="__x_thread_8h_1a32ad650cdcf0656f543da04bc3ac68a6a3602f88b0771a975e509357d259b8431">XTHREADGROUPID_UNGROUP</link>);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01221"/>01221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthreadscollected)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01222"/>01222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01223"/>01223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;xthreadscollected-&gt;Delete(groupID,&#32;xthreadcollected);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01224"/>01224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01225"/>01225 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01226"/>01226 &#32;&#32;&#32;&#32;&#32;&#32;groupthreadsmutex-&gt;UnLock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01227"/>01227 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01228"/>01228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l01229"/>01229 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01230"/>01230 &#32;&#32;&#32;&#32;&#32;&#32;XTHREADSCOLLECTED*&#32;xthreadscollected&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;XTHREADSCOLLECTED();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01231"/>01231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(xthreadscollected)
<anchor xml:id="__x_thread_collected_8cpp_source_1l01232"/>01232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_thread_collected_8cpp_source_1l01233"/>01233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;xthreadscollected-&gt;Delete(groupID,&#32;xthreadcollected);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01234"/>01234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;xthreadscollected;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01235"/>01235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01236"/>01236 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_thread_collected_8cpp_source_1l01237"/>01237 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01238"/>01238 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01239"/>01239 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01240"/>01240 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01241"/>01241 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01251"/>01251 <emphasis role="keywordtype">bool</emphasis>&#32;XTHREADSCOLLECTEDMANAGER::DeleteAll()
<anchor xml:id="__x_thread_collected_8cpp_source_1l01252"/>01252 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01253"/>01253 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!groupthreadsmutex)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01254"/>01254 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01255"/>01255 &#32;&#32;groupthreadsmutex-&gt;Lock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01256"/>01256 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01257"/>01257 &#32;&#32;groupthreadsvector.DeleteContents();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01258"/>01258 &#32;&#32;groupthreadsvector.DeleteAll();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01259"/>01259 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01260"/>01260 &#32;&#32;groupthreadsmutex-&gt;UnLock();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01261"/>01261 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01262"/>01262 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01263"/>01263 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01264"/>01264 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01265"/>01265 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01275"/>01275 XTHREADSCOLLECTEDMANAGER::XTHREADSCOLLECTEDMANAGER()
<anchor xml:id="__x_thread_collected_8cpp_source_1l01276"/>01276 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01277"/>01277 &#32;&#32;Clean();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01278"/>01278 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01279"/>01279 &#32;&#32;GEN_XFACTORY_CREATE(groupthreadsmutex,&#32;Create_Mutex())
<anchor xml:id="__x_thread_collected_8cpp_source_1l01280"/>01280 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01281"/>01281 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01282"/>01282 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01293"/>01293 XTHREADSCOLLECTEDMANAGER::~XTHREADSCOLLECTEDMANAGER()
<anchor xml:id="__x_thread_collected_8cpp_source_1l01294"/>01294 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01295"/>01295 &#32;&#32;DeleteAll();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01296"/>01296 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01297"/>01297 &#32;&#32;groupthreadsactivate.DeleteAll();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01298"/>01298 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01299"/>01299 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(groupthreadsmutex)&#32;GEN_XFACTORY.Delete_Mutex(groupthreadsmutex);
<anchor xml:id="__x_thread_collected_8cpp_source_1l01300"/>01300 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01301"/>01301 &#32;&#32;Clean();
<anchor xml:id="__x_thread_collected_8cpp_source_1l01302"/>01302 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01303"/>01303 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01304"/>01304 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01315"/>01315 <emphasis role="keywordtype">void</emphasis>&#32;XTHREADSCOLLECTEDMANAGER::Clean()
<anchor xml:id="__x_thread_collected_8cpp_source_1l01316"/>01316 {
<anchor xml:id="__x_thread_collected_8cpp_source_1l01317"/>01317 &#32;&#32;nogroupthread&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01318"/>01318 &#32;&#32;groupthreadsmutex&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_thread_collected_8cpp_source_1l01319"/>01319 }
<anchor xml:id="__x_thread_collected_8cpp_source_1l01320"/>01320 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01321"/>01321 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01322"/>01322 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l01323"/>01323 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01324"/>01324 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01325"/>01325 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__x_thread_collected_8cpp_source_1l01326"/>01326 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01327"/>01327 
<anchor xml:id="__x_thread_collected_8cpp_source_1l01328"/>01328 
</programlisting></section>
