<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_memory___control_8cpp_source" xml:lang="en-US">
<title>XMemory_Control.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/XUtils/XMemory_Control.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_memory___control_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_memory___control_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;INCLUDES&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;region&#32;PRECOMPILATION_INCLUDES</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00031"/>00031 
<anchor xml:id="__x_memory___control_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_memory___control_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_memory___control_8cpp_source_1l00036"/>00036 
<anchor xml:id="__x_memory___control_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">#ifdef&#32;XMEMORY_CONTROL_ACTIVE</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00038"/>00038 
<anchor xml:id="__x_memory___control_8cpp_source_1l00039"/>00039 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#pragma&#32;region&#32;INCLUDES</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00041"/>00041 
<anchor xml:id="__x_memory___control_8cpp_source_1l00042"/>00042 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00043"/>00043 
<anchor xml:id="__x_memory___control_8cpp_source_1l00044"/>00044 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00046"/>00046 
<anchor xml:id="__x_memory___control_8cpp_source_1l00047"/>00047 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_factory_8h">XFactory.h</link>&quot;</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00048"/>00048 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_string_8h">XString.h</link>&quot;</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00049"/>00049 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_trace_8h">XTrace.h</link>&quot;</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00050"/>00050 
<anchor xml:id="__x_memory___control_8cpp_source_1l00051"/>00051 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00052"/>00052 
<anchor xml:id="__x_memory___control_8cpp_source_1l00053"/>00053 
<anchor xml:id="__x_memory___control_8cpp_source_1l00054"/>00054 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00055"/>00055 <emphasis role="preprocessor">#pragma&#32;region&#32;GENERAL_VARIABLE</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00056"/>00056 
<anchor xml:id="__x_memory___control_8cpp_source_1l00057"/>00057 <link linkend="_class_x_m_e_m_o_r_y___c_o_n_t_r_o_l">XMEMORY_CONTROL</link>&#32;XMemory_Control;
<anchor xml:id="__x_memory___control_8cpp_source_1l00058"/>00058 
<anchor xml:id="__x_memory___control_8cpp_source_1l00059"/>00059 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00060"/>00060 
<anchor xml:id="__x_memory___control_8cpp_source_1l00061"/>00061 
<anchor xml:id="__x_memory___control_8cpp_source_1l00062"/>00062 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00063"/>00063 <emphasis role="preprocessor">#pragma&#32;region&#32;CLASS_MEMBERS</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00064"/>00064 
<anchor xml:id="__x_memory___control_8cpp_source_1l00065"/>00065 
<anchor xml:id="__x_memory___control_8cpp_source_1l00075"/>00075 XMEMORY_CONTROL::XMEMORY_CONTROL()
<anchor xml:id="__x_memory___control_8cpp_source_1l00076"/>00076 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00077"/>00077 &#32;&#32;Clean();
<anchor xml:id="__x_memory___control_8cpp_source_1l00078"/>00078 
<anchor xml:id="__x_memory___control_8cpp_source_1l00079"/>00079 <emphasis role="comment">//int&#32;index&#32;=&#32;0;</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00080"/>00080 
<anchor xml:id="__x_memory___control_8cpp_source_1l00081"/>00081 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;WINDOWS</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00082"/>00082 &#32;&#32;mutexhandle&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)CreateMutex(&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;<link linkend="__x_s_t_m32___h_a_l_8h_1aa93f0eb578d23995850d61f7d61c55c1">FALSE</link>,&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>&#32;);
<anchor xml:id="__x_memory___control_8cpp_source_1l00083"/>00083 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mutexhandle)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00084"/>00084 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00085"/>00085 
<anchor xml:id="__x_memory___control_8cpp_source_1l00086"/>00086 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;LINUX</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00087"/>00087 &#32;&#32;pthread_mutexattr_init(&amp;attr);
<anchor xml:id="__x_memory___control_8cpp_source_1l00088"/>00088 
<anchor xml:id="__x_memory___control_8cpp_source_1l00089"/>00089 &#32;&#32;pthread_mutexattr_settype(&amp;attr,&#32;PTHREAD_MUTEX_RECURSIVE);
<anchor xml:id="__x_memory___control_8cpp_source_1l00090"/>00090 
<anchor xml:id="__x_memory___control_8cpp_source_1l00091"/>00091 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!pthread_mutex_init(&amp;mutex,&#32;&amp;attr))&#32;mutexhandle&#32;=&#32;1;
<anchor xml:id="__x_memory___control_8cpp_source_1l00092"/>00092 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00093"/>00093 
<anchor xml:id="__x_memory___control_8cpp_source_1l00094"/>00094 &#32;&#32;ResizeAssignList();
<anchor xml:id="__x_memory___control_8cpp_source_1l00095"/>00095 
<anchor xml:id="__x_memory___control_8cpp_source_1l00096"/>00096 &#32;&#32;<emphasis role="comment">//isactive&#32;=&#32;true;</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00097"/>00097 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00098"/>00098 
<anchor xml:id="__x_memory___control_8cpp_source_1l00099"/>00099 
<anchor xml:id="__x_memory___control_8cpp_source_1l00110"/>00110 XMEMORY_CONTROL::~XMEMORY_CONTROL()
<anchor xml:id="__x_memory___control_8cpp_source_1l00111"/>00111 
<anchor xml:id="__x_memory___control_8cpp_source_1l00112"/>00112 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00113"/>00113 &#32;&#32;isactive&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00114"/>00114 
<anchor xml:id="__x_memory___control_8cpp_source_1l00115"/>00115 &#32;&#32;FreeAll();
<anchor xml:id="__x_memory___control_8cpp_source_1l00116"/>00116 
<anchor xml:id="__x_memory___control_8cpp_source_1l00117"/>00117 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;WINDOWS</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00118"/>00118 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(mutexhandle)
<anchor xml:id="__x_memory___control_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;CloseHandle((HANDLE)mutexhandle);
<anchor xml:id="__x_memory___control_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;mutexhandle&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00123"/>00123 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00124"/>00124 
<anchor xml:id="__x_memory___control_8cpp_source_1l00125"/>00125 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;LINUX</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00126"/>00126 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(mutexhandle)
<anchor xml:id="__x_memory___control_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;pthread_mutex_destroy(&amp;mutex);
<anchor xml:id="__x_memory___control_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;mutexhandle&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00131"/>00131 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00132"/>00132 
<anchor xml:id="__x_memory___control_8cpp_source_1l00133"/>00133 &#32;&#32;Clean();
<anchor xml:id="__x_memory___control_8cpp_source_1l00134"/>00134 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00135"/>00135 
<anchor xml:id="__x_memory___control_8cpp_source_1l00136"/>00136 
<anchor xml:id="__x_memory___control_8cpp_source_1l00146"/>00146 <emphasis role="keywordtype">bool</emphasis>&#32;XMEMORY_CONTROL::IsActive()
<anchor xml:id="__x_memory___control_8cpp_source_1l00147"/>00147 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00148"/>00148 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;isactive;
<anchor xml:id="__x_memory___control_8cpp_source_1l00149"/>00149 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00150"/>00150 
<anchor xml:id="__x_memory___control_8cpp_source_1l00151"/>00151 
<anchor xml:id="__x_memory___control_8cpp_source_1l00163"/>00163 <emphasis role="keywordtype">bool</emphasis>&#32;XMEMORY_CONTROL::Activate(<emphasis role="keywordtype">bool</emphasis>&#32;isactive)
<anchor xml:id="__x_memory___control_8cpp_source_1l00164"/>00164 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00165"/>00165 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(this-&gt;isactive&#32;==&#32;isactive)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00166"/>00166 
<anchor xml:id="__x_memory___control_8cpp_source_1l00167"/>00167 &#32;&#32;this-&gt;isactive&#32;=&#32;isactive;
<anchor xml:id="__x_memory___control_8cpp_source_1l00168"/>00168 
<anchor xml:id="__x_memory___control_8cpp_source_1l00169"/>00169 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00170"/>00170 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00171"/>00171 
<anchor xml:id="__x_memory___control_8cpp_source_1l00172"/>00172 
<anchor xml:id="__x_memory___control_8cpp_source_1l00186"/>00186 <emphasis role="keywordtype">void</emphasis>*&#32;XMEMORY_CONTROL::Assign(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pathfile,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)
<anchor xml:id="__x_memory___control_8cpp_source_1l00187"/>00187 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00188"/>00188 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!size)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00189"/>00189 
<anchor xml:id="__x_memory___control_8cpp_source_1l00190"/>00190 &#32;&#32;Lock();
<anchor xml:id="__x_memory___control_8cpp_source_1l00191"/>00191 &#32;
<anchor xml:id="__x_memory___control_8cpp_source_1l00192"/>00192 &#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00193"/>00193 &#32;&#32;ptr&#32;=&#32;malloc(size);
<anchor xml:id="__x_memory___control_8cpp_source_1l00194"/>00194 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ptr)
<anchor xml:id="__x_memory___control_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;UnLock();
<anchor xml:id="__x_memory___control_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00199"/>00199 
<anchor xml:id="__x_memory___control_8cpp_source_1l00200"/>00200 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!RegisterAssign(ptr,&#32;size,&#32;pathfile,&#32;line))
<anchor xml:id="__x_memory___control_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XTRACE_PRINTCOLOR(4,&#32;__L(&quot;[XMemory&#32;Control]&#32;ALERT:&#32;Make&#32;Malloc&#32;-&gt;&#32;The&#32;memory&#32;allocation&#32;could&#32;not&#32;be&#32;registered!&quot;));</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00204"/>00204 
<anchor xml:id="__x_memory___control_8cpp_source_1l00205"/>00205 &#32;&#32;nassigns++;
<anchor xml:id="__x_memory___control_8cpp_source_1l00206"/>00206 &#32;&#32;maxnassigns&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1adb5f23e5ea7901d5a9db45c55950bcac">__MAX</link>(nassigns,&#32;maxnassigns);
<anchor xml:id="__x_memory___control_8cpp_source_1l00207"/>00207 
<anchor xml:id="__x_memory___control_8cpp_source_1l00208"/>00208 &#32;&#32;used&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+=&#32;size;
<anchor xml:id="__x_memory___control_8cpp_source_1l00209"/>00209 &#32;&#32;maxused&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1adb5f23e5ea7901d5a9db45c55950bcac">__MAX</link>(used,&#32;maxused);
<anchor xml:id="__x_memory___control_8cpp_source_1l00210"/>00210 
<anchor xml:id="__x_memory___control_8cpp_source_1l00211"/>00211 &#32;&#32;UnLock();
<anchor xml:id="__x_memory___control_8cpp_source_1l00212"/>00212 
<anchor xml:id="__x_memory___control_8cpp_source_1l00213"/>00213 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr;
<anchor xml:id="__x_memory___control_8cpp_source_1l00214"/>00214 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00215"/>00215 
<anchor xml:id="__x_memory___control_8cpp_source_1l00216"/>00216 
<anchor xml:id="__x_memory___control_8cpp_source_1l00228"/>00228 <emphasis role="keywordtype">void</emphasis>&#32;XMEMORY_CONTROL::Free(<emphasis role="keywordtype">void</emphasis>*&#32;ptr)
<anchor xml:id="__x_memory___control_8cpp_source_1l00229"/>00229 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00230"/>00230 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ptr)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00231"/>00231 
<anchor xml:id="__x_memory___control_8cpp_source_1l00232"/>00232 &#32;&#32;Lock();
<anchor xml:id="__x_memory___control_8cpp_source_1l00233"/>00233 
<anchor xml:id="__x_memory___control_8cpp_source_1l00234"/>00234 &#32;&#32;free(ptr);
<anchor xml:id="__x_memory___control_8cpp_source_1l00235"/>00235 
<anchor xml:id="__x_memory___control_8cpp_source_1l00236"/>00236 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size;
<anchor xml:id="__x_memory___control_8cpp_source_1l00237"/>00237 
<anchor xml:id="__x_memory___control_8cpp_source_1l00238"/>00238 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!DeRegisterAssign(ptr,&#32;size))
<anchor xml:id="__x_memory___control_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XTRACE_PRINTCOLOR(XTRACE_COLOR_RED,&#32;__L(&quot;[XMemory&#32;Control]&#32;ALERT:&#32;Make&#32;Free&#32;-&gt;&#32;The&#32;memory&#32;allocation&#32;has&#32;not&#32;been&#32;registered!&quot;));</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;nassigns--;
<anchor xml:id="__x_memory___control_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;used&#32;-=&#32;size;
<anchor xml:id="__x_memory___control_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00247"/>00247 
<anchor xml:id="__x_memory___control_8cpp_source_1l00248"/>00248 &#32;&#32;UnLock();
<anchor xml:id="__x_memory___control_8cpp_source_1l00249"/>00249 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00250"/>00250 
<anchor xml:id="__x_memory___control_8cpp_source_1l00251"/>00251 
<anchor xml:id="__x_memory___control_8cpp_source_1l00261"/>00261 <emphasis role="keywordtype">bool</emphasis>&#32;XMEMORY_CONTROL::FreeAll()
<anchor xml:id="__x_memory___control_8cpp_source_1l00262"/>00262 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00263"/>00263 &#32;&#32;Lock();
<anchor xml:id="__x_memory___control_8cpp_source_1l00264"/>00264 
<anchor xml:id="__x_memory___control_8cpp_source_1l00265"/>00265 &#32;&#32;memset(assignlist,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(XMEMORY_CONTROL_ASSIGN*)*nregisterelements);
<anchor xml:id="__x_memory___control_8cpp_source_1l00266"/>00266 
<anchor xml:id="__x_memory___control_8cpp_source_1l00267"/>00267 &#32;&#32;free(assignlist);
<anchor xml:id="__x_memory___control_8cpp_source_1l00268"/>00268 
<anchor xml:id="__x_memory___control_8cpp_source_1l00269"/>00269 &#32;&#32;UnLock();
<anchor xml:id="__x_memory___control_8cpp_source_1l00270"/>00270 
<anchor xml:id="__x_memory___control_8cpp_source_1l00271"/>00271 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00272"/>00272 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00273"/>00273 
<anchor xml:id="__x_memory___control_8cpp_source_1l00274"/>00274 
<anchor xml:id="__x_memory___control_8cpp_source_1l00284"/>00284 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;XMEMORY_CONTROL::GetUsed()
<anchor xml:id="__x_memory___control_8cpp_source_1l00285"/>00285 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00286"/>00286 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;used;
<anchor xml:id="__x_memory___control_8cpp_source_1l00287"/>00287 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00288"/>00288 
<anchor xml:id="__x_memory___control_8cpp_source_1l00289"/>00289 
<anchor xml:id="__x_memory___control_8cpp_source_1l00299"/>00299 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;XMEMORY_CONTROL::GetNAssigns()
<anchor xml:id="__x_memory___control_8cpp_source_1l00300"/>00300 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00301"/>00301 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nassigns;
<anchor xml:id="__x_memory___control_8cpp_source_1l00302"/>00302 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00303"/>00303 
<anchor xml:id="__x_memory___control_8cpp_source_1l00304"/>00304 
<anchor xml:id="__x_memory___control_8cpp_source_1l00316"/>00316 <emphasis role="keywordtype">bool</emphasis>&#32;XMEMORY_CONTROL::DisplayAll(<emphasis role="keywordtype">bool</emphasis>&#32;displaydata)
<anchor xml:id="__x_memory___control_8cpp_source_1l00317"/>00317 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nassigned&#32;=&#32;0;&#32;&#32;
<anchor xml:id="__x_memory___control_8cpp_source_1l00319"/>00319 
<anchor xml:id="__x_memory___control_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=0;&#32;c&lt;nregisterelements;&#32;c++)
<anchor xml:id="__x_memory___control_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(assignlist[c].ptr)&#32;
<anchor xml:id="__x_memory___control_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nassigned++;
<anchor xml:id="__x_memory___control_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00327"/>00327 
<anchor xml:id="__x_memory___control_8cpp_source_1l00328"/>00328 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;XTRACE_ACTIVE</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00329"/>00329 
<anchor xml:id="__x_memory___control_8cpp_source_1l00330"/>00330 &#32;&#32;<link linkend="__x_trace_8h_1a2f684915f5f52dfab7be1ecfb4650618">XTRACE_PRINTHEADER</link>((!nassigned)?<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;ALL&#32;FREE&#32;MEMORY&#32;RESOURCES&quot;</emphasis>):<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;NOT&#32;FREE&#32;MEMORY&#32;RESOURCES&quot;</emphasis>));
<anchor xml:id="__x_memory___control_8cpp_source_1l00331"/>00331 &#32;&#32;<link linkend="__x_trace_8h_1a78443ac3ff6a4ffb6de77a6168c9ca2d">XTRACE_PRINT</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>));
<anchor xml:id="__x_memory___control_8cpp_source_1l00332"/>00332 &#32;&#32;<link linkend="__x_trace_8h_1a78443ac3ff6a4ffb6de77a6168c9ca2d">XTRACE_PRINT</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;Maximum&#32;allocated&#32;blocks&#32;at&#32;a&#32;time&#32;:&#32;%d&quot;</emphasis>)&#32;,&#32;maxnassigns);
<anchor xml:id="__x_memory___control_8cpp_source_1l00333"/>00333 &#32;&#32;<link linkend="__x_trace_8h_1a78443ac3ff6a4ffb6de77a6168c9ca2d">XTRACE_PRINT</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;Maximum&#32;memory&#32;used&#32;at&#32;a&#32;time&#32;&#32;&#32;&#32;&#32;&#32;:&#32;%dk&quot;</emphasis>),&#32;maxused/1024);&#32;
<anchor xml:id="__x_memory___control_8cpp_source_1l00334"/>00334 &#32;&#32;<link linkend="__x_trace_8h_1a78443ac3ff6a4ffb6de77a6168c9ca2d">XTRACE_PRINT</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>));
<anchor xml:id="__x_memory___control_8cpp_source_1l00335"/>00335 
<anchor xml:id="__x_memory___control_8cpp_source_1l00336"/>00336 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(nassigned)
<anchor xml:id="__x_memory___control_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_trace_8h_1a78443ac3ff6a4ffb6de77a6168c9ca2d">XTRACE_PRINT</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;Number&#32;memory&#32;blocks&#32;not&#32;free&#32;&#32;&#32;&#32;&#32;&#32;:&#32;%d&quot;</emphasis>),&#32;nassigned);
<anchor xml:id="__x_memory___control_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_trace_8h_1a78443ac3ff6a4ffb6de77a6168c9ca2d">XTRACE_PRINT</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>));
<anchor xml:id="__x_memory___control_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_trace_8h_1a78443ac3ff6a4ffb6de77a6168c9ca2d">XTRACE_PRINT</link>(<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Address&#32;&#32;Size&#32;&#32;&#32;&#32;Line&#32;&#32;Module&quot;</emphasis>));
<anchor xml:id="__x_memory___control_8cpp_source_1l00341"/>00341 
<anchor xml:id="__x_memory___control_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00343"/>00343 
<anchor xml:id="__x_memory___control_8cpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=0;&#32;c&lt;nregisterelements;&#32;c++)
<anchor xml:id="__x_memory___control_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(assignlist[c].ptr)
<anchor xml:id="__x_memory___control_8cpp_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;namemodule;
<anchor xml:id="__x_memory___control_8cpp_source_1l00349"/>00349 
<anchor xml:id="__x_memory___control_8cpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namemodule&#32;=&#32;assignlist[c].namemodule;
<anchor xml:id="__x_memory___control_8cpp_source_1l00351"/>00351 
<anchor xml:id="__x_memory___control_8cpp_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;ptr&#32;=&#32;(size_t)assignlist[c].ptr;
<anchor xml:id="__x_memory___control_8cpp_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;address&#32;=&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)ptr;
<anchor xml:id="__x_memory___control_8cpp_source_1l00354"/>00354 
<anchor xml:id="__x_memory___control_8cpp_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_trace_8h_1ad3489a73cc8c0aa8e64f91a03735e525">XTRACE_PRINTCOLOR</link>(<link linkend="__x_trace_8h_1a435ffc0233bcfc5e0e15d9965a071c52">XTRACE_COLOR_RED</link>,&#32;<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;%08d&#32;%08X&#32;%07d&#32;%05d&#32;%s&quot;</emphasis>)&#32;&#32;&#32;,&#32;c
<anchor xml:id="__x_memory___control_8cpp_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;address
<anchor xml:id="__x_memory___control_8cpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;assignlist[c].size
<anchor xml:id="__x_memory___control_8cpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;assignlist[c].linemodule
<anchor xml:id="__x_memory___control_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;namemodule.<link linkend="_class_x_s_t_r_i_n_g_1ad1470753a96f93e2feb3ee54e6fef95f">Get</link>());
<anchor xml:id="__x_memory___control_8cpp_source_1l00360"/>00360 
<anchor xml:id="__x_memory___control_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//-----------------------------------------------------------------</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00362"/>00362 
<anchor xml:id="__x_memory___control_8cpp_source_1l00363"/>00363 
<anchor xml:id="__x_memory___control_8cpp_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;datablocksize&#32;&#32;=&#32;assignlist[c].size;
<anchor xml:id="__x_memory___control_8cpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(datablocksize&#32;&gt;&#32;XMEMORY_CONTROL_SHOWDATABLOCKSIZE)&#32;datablocksize&#32;=&#32;XMEMORY_CONTROL_SHOWDATABLOCKSIZE;
<anchor xml:id="__x_memory___control_8cpp_source_1l00366"/>00366 
<anchor xml:id="__x_memory___control_8cpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(displaydata)
<anchor xml:id="__x_memory___control_8cpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_trace_8h_1aa5641d4de4ccb3d60b0773a911ad180f">XTRACE_PRINTDATABLOCK</link>(XDEBUGLEVELCOLOR(<link linkend="__x_trace_8h_1a435ffc0233bcfc5e0e15d9965a071c52">XTRACE_COLOR_RED</link>),&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)assignlist[c].ptr,&#32;datablocksize,&#32;1);
<anchor xml:id="__x_memory___control_8cpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00371"/>00371 
<anchor xml:id="__x_memory___control_8cpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//-----------------------------------------------------------------</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00373"/>00373 
<anchor xml:id="__x_memory___control_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>++;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_memory___control_8cpp_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>&#32;&gt;&#32;XMEMORY_CONTROL_MAXIMUNLEAKSTODISPLAY)
<anchor xml:id="__x_memory___control_8cpp_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_trace_8h_1ad3489a73cc8c0aa8e64f91a03735e525">XTRACE_PRINTCOLOR</link>(<link linkend="__x_trace_8h_1ade12e8ff93575605036364fbdf529da2">XTRACE_LEVEL_COLOR</link>(<link linkend="__x_trace_8h_1a435ffc0233bcfc5e0e15d9965a071c52">XTRACE_COLOR_RED</link>),&#32;<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;Too&#32;many&#32;leaks:&#32;&gt;&#32;%d&#32;and&#32;have&#32;%d.&#32;&quot;</emphasis>),&#32;XMEMORY_CONTROL_MAXIMUNLEAKSTODISPLAY,&#32;nassigned);
<anchor xml:id="__x_memory___control_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_memory___control_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00382"/>00382 
<anchor xml:id="__x_memory___control_8cpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__x_trace_8h_1a2f684915f5f52dfab7be1ecfb4650618">XTRACE_PRINTHEADER</link>(<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
<anchor xml:id="__x_memory___control_8cpp_source_1l00384"/>00384 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00385"/>00385 
<anchor xml:id="__x_memory___control_8cpp_source_1l00386"/>00386 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00387"/>00387 
<anchor xml:id="__x_memory___control_8cpp_source_1l00388"/>00388 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00389"/>00389 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00390"/>00390 
<anchor xml:id="__x_memory___control_8cpp_source_1l00391"/>00391 
<anchor xml:id="__x_memory___control_8cpp_source_1l00401"/>00401 <emphasis role="keywordtype">bool</emphasis>&#32;XMEMORY_CONTROL::Lock()
<anchor xml:id="__x_memory___control_8cpp_source_1l00402"/>00402 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00403"/>00403 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;WINDOWS</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00404"/>00404 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mutexhandle)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00405"/>00405 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(WaitForSingleObject((HANDLE)mutexhandle,&#32;INFINITE)&#32;==&#32;WAIT_FAILED)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00406"/>00406 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00407"/>00407 
<anchor xml:id="__x_memory___control_8cpp_source_1l00408"/>00408 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;LINUX</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00409"/>00409 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mutexhandle)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00410"/>00410 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pthread_mutex_lock(&amp;mutex))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00411"/>00411 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00412"/>00412 
<anchor xml:id="__x_memory___control_8cpp_source_1l00413"/>00413 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00414"/>00414 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00415"/>00415 
<anchor xml:id="__x_memory___control_8cpp_source_1l00416"/>00416 
<anchor xml:id="__x_memory___control_8cpp_source_1l00426"/>00426 <emphasis role="keywordtype">bool</emphasis>&#32;XMEMORY_CONTROL::UnLock()
<anchor xml:id="__x_memory___control_8cpp_source_1l00427"/>00427 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00428"/>00428 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;WINDOWS</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00429"/>00429 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mutexhandle)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00430"/>00430 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ReleaseMutex((HANDLE)mutexhandle))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00431"/>00431 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00432"/>00432 
<anchor xml:id="__x_memory___control_8cpp_source_1l00433"/>00433 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;LINUX</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00434"/>00434 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!mutexhandle)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00435"/>00435 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pthread_mutex_unlock(&amp;mutex))&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00436"/>00436 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00437"/>00437 
<anchor xml:id="__x_memory___control_8cpp_source_1l00438"/>00438 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00439"/>00439 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00440"/>00440 
<anchor xml:id="__x_memory___control_8cpp_source_1l00441"/>00441 
<anchor xml:id="__x_memory___control_8cpp_source_1l00453"/>00453 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;XMEMORY_CONTROL::CRC32ForByte(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;ini)
<anchor xml:id="__x_memory___control_8cpp_source_1l00454"/>00454 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00455"/>00455 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;0;&#32;c&lt;8;&#32;++c)
<anchor xml:id="__x_memory___control_8cpp_source_1l00456"/>00456 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;ini&#32;=&#32;(ini&#32;&amp;&#32;1?&#32;0:&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)0xEDB88320L)&#32;^&#32;ini&#32;&gt;&gt;&#32;1;
<anchor xml:id="__x_memory___control_8cpp_source_1l00458"/>00458 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00459"/>00459 
<anchor xml:id="__x_memory___control_8cpp_source_1l00460"/>00460 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ini&#32;^&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)0xFF000000L;
<anchor xml:id="__x_memory___control_8cpp_source_1l00461"/>00461 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00462"/>00462 
<anchor xml:id="__x_memory___control_8cpp_source_1l00463"/>00463 
<anchor xml:id="__x_memory___control_8cpp_source_1l00476"/>00476 <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;XMEMORY_CONTROL::CRC32(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;data,&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;size)
<anchor xml:id="__x_memory___control_8cpp_source_1l00477"/>00477 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00478"/>00478 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;table[0x100];
<anchor xml:id="__x_memory___control_8cpp_source_1l00479"/>00479 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crc&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00480"/>00480 
<anchor xml:id="__x_memory___control_8cpp_source_1l00481"/>00481 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!*table)
<anchor xml:id="__x_memory___control_8cpp_source_1l00482"/>00482 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;c=0;&#32;c&lt;0x100;&#32;++c)
<anchor xml:id="__x_memory___control_8cpp_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;table[c]&#32;=&#32;CRC32ForByte(c);
<anchor xml:id="__x_memory___control_8cpp_source_1l00486"/>00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00487"/>00487 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00488"/>00488 
<anchor xml:id="__x_memory___control_8cpp_source_1l00489"/>00489 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;c=0;&#32;c&lt;size;&#32;++c)
<anchor xml:id="__x_memory___control_8cpp_source_1l00490"/>00490 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;crc&#32;=&#32;table[(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)crc&#32;^&#32;((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)data)[c]]&#32;^&#32;crc&#32;&gt;&gt;&#32;8;
<anchor xml:id="__x_memory___control_8cpp_source_1l00492"/>00492 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00493"/>00493 
<anchor xml:id="__x_memory___control_8cpp_source_1l00494"/>00494 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;crc;
<anchor xml:id="__x_memory___control_8cpp_source_1l00495"/>00495 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00496"/>00496 
<anchor xml:id="__x_memory___control_8cpp_source_1l00497"/>00497 
<anchor xml:id="__x_memory___control_8cpp_source_1l00512"/>00512 <emphasis role="keywordtype">bool</emphasis>&#32;XMEMORY_CONTROL::RegisterAssign(<emphasis role="keywordtype">void</emphasis>*&#32;ptr,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pathfile,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)
<anchor xml:id="__x_memory___control_8cpp_source_1l00513"/>00513 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00514"/>00514 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;index&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00515"/>00515 
<anchor xml:id="__x_memory___control_8cpp_source_1l00516"/>00516 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!SearchAssignIndex(<emphasis role="keyword">true</emphasis>,&#32;ptr,&#32;index))
<anchor xml:id="__x_memory___control_8cpp_source_1l00517"/>00517 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ResizeAssignList())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!SearchAssignIndex(<emphasis role="keyword">true</emphasis>,&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;index))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00520"/>00520 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00521"/>00521 
<anchor xml:id="__x_memory___control_8cpp_source_1l00522"/>00522 &#32;&#32;assignlist[index].ptr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ptr;
<anchor xml:id="__x_memory___control_8cpp_source_1l00523"/>00523 &#32;&#32;assignlist[index].size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;size;
<anchor xml:id="__x_memory___control_8cpp_source_1l00524"/>00524 
<anchor xml:id="__x_memory___control_8cpp_source_1l00525"/>00525 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sizenamemodule&#32;=&#32;(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)strlen(pathfile)+1;
<anchor xml:id="__x_memory___control_8cpp_source_1l00526"/>00526 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;c&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(int)sizenamemodule;
<anchor xml:id="__x_memory___control_8cpp_source_1l00527"/>00527 
<anchor xml:id="__x_memory___control_8cpp_source_1l00528"/>00528 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(c&gt;=0)
<anchor xml:id="__x_memory___control_8cpp_source_1l00529"/>00529 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((pathfile[c]&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)&#32;&#32;||&#32;(pathfile[c]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>))&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00531"/>00531 &#32;&#32;&#32;&#32;&#32;&#32;c--;
<anchor xml:id="__x_memory___control_8cpp_source_1l00532"/>00532 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00533"/>00533 
<anchor xml:id="__x_memory___control_8cpp_source_1l00534"/>00534 &#32;&#32;sizenamemodule&#32;&#32;&#32;&#32;-=&#32;c;
<anchor xml:id="__x_memory___control_8cpp_source_1l00535"/>00535 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(sizenamemodule&#32;&gt;=&#32;XMEMORY_CONTROL_MAXNAMEMODULESIZE)&#32;sizenamemodule&#32;=&#32;(XMEMORY_CONTROL_MAXNAMEMODULESIZE-1);
<anchor xml:id="__x_memory___control_8cpp_source_1l00536"/>00536 
<anchor xml:id="__x_memory___control_8cpp_source_1l00537"/>00537 &#32;&#32;memcpy(assignlist[index].namemodule,&#32;&amp;pathfile[c+1],&#32;sizenamemodule);
<anchor xml:id="__x_memory___control_8cpp_source_1l00538"/>00538 
<anchor xml:id="__x_memory___control_8cpp_source_1l00539"/>00539 &#32;&#32;assignlist[index].linemodule&#32;&#32;=&#32;line;
<anchor xml:id="__x_memory___control_8cpp_source_1l00540"/>00540 
<anchor xml:id="__x_memory___control_8cpp_source_1l00541"/>00541 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00542"/>00542 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00543"/>00543 
<anchor xml:id="__x_memory___control_8cpp_source_1l00544"/>00544 
<anchor xml:id="__x_memory___control_8cpp_source_1l00557"/>00557 <emphasis role="keywordtype">bool</emphasis>&#32;XMEMORY_CONTROL::DeRegisterAssign(<emphasis role="keywordtype">void</emphasis>*&#32;ptr,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&amp;&#32;size)
<anchor xml:id="__x_memory___control_8cpp_source_1l00558"/>00558 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00559"/>00559 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;index&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00560"/>00560 
<anchor xml:id="__x_memory___control_8cpp_source_1l00561"/>00561 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!SearchAssignIndex(<emphasis role="keyword">false</emphasis>,&#32;ptr,&#32;index))
<anchor xml:id="__x_memory___control_8cpp_source_1l00562"/>00562 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00563"/>00563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00564"/>00564 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00565"/>00565 
<anchor xml:id="__x_memory___control_8cpp_source_1l00566"/>00566 &#32;&#32;size&#32;=&#32;assignlist[index].size;
<anchor xml:id="__x_memory___control_8cpp_source_1l00567"/>00567 
<anchor xml:id="__x_memory___control_8cpp_source_1l00568"/>00568 &#32;&#32;assignlist[index].ptr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00569"/>00569 &#32;&#32;assignlist[index].size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00570"/>00570 &#32;&#32;memset(assignlist[index].namemodule,&#32;0,&#32;XMEMORY_CONTROL_MAXNAMEMODULESIZE);
<anchor xml:id="__x_memory___control_8cpp_source_1l00571"/>00571 &#32;&#32;assignlist[index].linemodule&#32;&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00572"/>00572 
<anchor xml:id="__x_memory___control_8cpp_source_1l00573"/>00573 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00574"/>00574 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00575"/>00575 
<anchor xml:id="__x_memory___control_8cpp_source_1l00576"/>00576 
<anchor xml:id="__x_memory___control_8cpp_source_1l00586"/>00586 <emphasis role="keywordtype">bool</emphasis>&#32;XMEMORY_CONTROL::ResizeAssignList()
<anchor xml:id="__x_memory___control_8cpp_source_1l00587"/>00587 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00588"/>00588 &#32;&#32;nblockregisterelements++;
<anchor xml:id="__x_memory___control_8cpp_source_1l00589"/>00589 
<anchor xml:id="__x_memory___control_8cpp_source_1l00590"/>00590 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;newnregisterelements&#32;=&#32;(nblockregisterelements&#32;*&#32;XMEMORY_CONTROL_MAXBLOCKASSIGN);
<anchor xml:id="__x_memory___control_8cpp_source_1l00591"/>00591 
<anchor xml:id="__x_memory___control_8cpp_source_1l00592"/>00592 &#32;&#32;assignlist&#32;=&#32;(XMEMORY_CONTROL_ASSIGN*)realloc(assignlist,&#32;(<emphasis role="keyword">sizeof</emphasis>(XMEMORY_CONTROL_ASSIGN)&#32;*&#32;newnregisterelements));
<anchor xml:id="__x_memory___control_8cpp_source_1l00593"/>00593 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!assignlist)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00594"/>00594 
<anchor xml:id="__x_memory___control_8cpp_source_1l00595"/>00595 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sizeextra&#32;&#32;=&#32;(<emphasis role="keyword">sizeof</emphasis>(XMEMORY_CONTROL_ASSIGN)&#32;*&#32;&#32;(newnregisterelements&#32;-&#32;nregisterelements));
<anchor xml:id="__x_memory___control_8cpp_source_1l00596"/>00596 
<anchor xml:id="__x_memory___control_8cpp_source_1l00597"/>00597 &#32;&#32;<emphasis role="comment">//&#32;Erase&#32;new&#32;block</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00598"/>00598 &#32;&#32;memset(&amp;assignlist[nregisterelements],&#32;0,&#32;sizeextra);
<anchor xml:id="__x_memory___control_8cpp_source_1l00599"/>00599 
<anchor xml:id="__x_memory___control_8cpp_source_1l00600"/>00600 &#32;&#32;nregisterelements&#32;=&#32;newnregisterelements;
<anchor xml:id="__x_memory___control_8cpp_source_1l00601"/>00601 
<anchor xml:id="__x_memory___control_8cpp_source_1l00602"/>00602 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00603"/>00603 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00604"/>00604 
<anchor xml:id="__x_memory___control_8cpp_source_1l00605"/>00605 
<anchor xml:id="__x_memory___control_8cpp_source_1l00618"/>00618 <emphasis role="keywordtype">bool</emphasis>&#32;XMEMORY_CONTROL::SearchAssignIndex(<emphasis role="keywordtype">bool</emphasis>&#32;free,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;ptr,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&amp;&#32;index)
<anchor xml:id="__x_memory___control_8cpp_source_1l00619"/>00619 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00620"/>00620 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;start&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00621"/>00621 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;counter&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00622"/>00622 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;limit&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00623"/>00623 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;found&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00624"/>00624 
<anchor xml:id="__x_memory___control_8cpp_source_1l00625"/>00625 &#32;&#32;index&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00626"/>00626 
<anchor xml:id="__x_memory___control_8cpp_source_1l00627"/>00627 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;MICROCONTROLLER</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00628"/>00628 &#32;&#32;start&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00629"/>00629 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00630"/>00630 &#32;&#32;start&#32;=&#32;CRC32((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)&amp;ptr,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>));
<anchor xml:id="__x_memory___control_8cpp_source_1l00631"/>00631 &#32;&#32;start&#32;&amp;=&#32;(nregisterelements&#32;-1);
<anchor xml:id="__x_memory___control_8cpp_source_1l00632"/>00632 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00633"/>00633 
<anchor xml:id="__x_memory___control_8cpp_source_1l00634"/>00634 &#32;&#32;counter&#32;=&#32;start;
<anchor xml:id="__x_memory___control_8cpp_source_1l00635"/>00635 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(counter&#32;&gt;=&#32;nregisterelements-1)&#32;&#32;counter&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00636"/>00636 
<anchor xml:id="__x_memory___control_8cpp_source_1l00637"/>00637 &#32;&#32;limit&#32;=&#32;(nregisterelements-1);
<anchor xml:id="__x_memory___control_8cpp_source_1l00638"/>00638 
<anchor xml:id="__x_memory___control_8cpp_source_1l00639"/>00639 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;2;&#32;c++)
<anchor xml:id="__x_memory___control_8cpp_source_1l00640"/>00640 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00641"/>00641 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(counter&#32;&lt;&#32;limit)
<anchor xml:id="__x_memory___control_8cpp_source_1l00642"/>00642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00643"/>00643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(free)
<anchor xml:id="__x_memory___control_8cpp_source_1l00644"/>00644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00645"/>00645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!assignlist[counter].ptr)
<anchor xml:id="__x_memory___control_8cpp_source_1l00646"/>00646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00647"/>00647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index&#32;=&#32;counter;
<anchor xml:id="__x_memory___control_8cpp_source_1l00648"/>00648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;found&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00649"/>00649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00650"/>00650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00651"/>00651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00652"/>00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00653"/>00653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00654"/>00654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(assignlist[counter].ptr&#32;==&#32;ptr)
<anchor xml:id="__x_memory___control_8cpp_source_1l00655"/>00655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00656"/>00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index&#32;=&#32;counter;
<anchor xml:id="__x_memory___control_8cpp_source_1l00657"/>00657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;found&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00658"/>00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00659"/>00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00660"/>00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00661"/>00661 
<anchor xml:id="__x_memory___control_8cpp_source_1l00662"/>00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;counter++;
<anchor xml:id="__x_memory___control_8cpp_source_1l00663"/>00663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00664"/>00664 
<anchor xml:id="__x_memory___control_8cpp_source_1l00665"/>00665 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(found)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00666"/>00666 
<anchor xml:id="__x_memory___control_8cpp_source_1l00667"/>00667 &#32;&#32;&#32;&#32;&#32;counter&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00668"/>00668 &#32;&#32;&#32;&#32;&#32;limit&#32;&#32;&#32;=&#32;start;
<anchor xml:id="__x_memory___control_8cpp_source_1l00669"/>00669 &#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00670"/>00670 
<anchor xml:id="__x_memory___control_8cpp_source_1l00671"/>00671 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00672"/>00672 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00673"/>00673 
<anchor xml:id="__x_memory___control_8cpp_source_1l00674"/>00674 
<anchor xml:id="__x_memory___control_8cpp_source_1l00685"/>00685 <emphasis role="keywordtype">void</emphasis>&#32;XMEMORY_CONTROL::Clean()
<anchor xml:id="__x_memory___control_8cpp_source_1l00686"/>00686 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00687"/>00687 &#32;&#32;isactive&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00688"/>00688 
<anchor xml:id="__x_memory___control_8cpp_source_1l00689"/>00689 &#32;&#32;assignlist&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_memory___control_8cpp_source_1l00690"/>00690 
<anchor xml:id="__x_memory___control_8cpp_source_1l00691"/>00691 &#32;&#32;nregisterelements&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00692"/>00692 &#32;&#32;nblockregisterelements&#32;&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00693"/>00693 
<anchor xml:id="__x_memory___control_8cpp_source_1l00694"/>00694 &#32;&#32;nassigns&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00695"/>00695 &#32;&#32;maxnassigns&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00696"/>00696 
<anchor xml:id="__x_memory___control_8cpp_source_1l00697"/>00697 &#32;&#32;used&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00698"/>00698 &#32;&#32;maxused&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00699"/>00699 
<anchor xml:id="__x_memory___control_8cpp_source_1l00700"/>00700 &#32;&#32;mutexhandle&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_memory___control_8cpp_source_1l00701"/>00701 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00702"/>00702 
<anchor xml:id="__x_memory___control_8cpp_source_1l00703"/>00703 
<anchor xml:id="__x_memory___control_8cpp_source_1l00704"/>00704 <emphasis role="preprocessor">#undef&#32;new</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00705"/>00705 
<anchor xml:id="__x_memory___control_8cpp_source_1l00706"/>00706 
<anchor xml:id="__x_memory___control_8cpp_source_1l00720"/>00720 <emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;namefile,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)
<anchor xml:id="__x_memory___control_8cpp_source_1l00721"/>00721 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00722"/>00722 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(XMemory_Control.IsActive())
<anchor xml:id="__x_memory___control_8cpp_source_1l00723"/>00723 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00724"/>00724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;XMemory_Control.Assign((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)size,&#32;(<emphasis role="keywordtype">char</emphasis>*)namefile,&#32;line);
<anchor xml:id="__x_memory___control_8cpp_source_1l00725"/>00725 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00726"/>00726 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00727"/>00727 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00728"/>00728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;malloc(size);
<anchor xml:id="__x_memory___control_8cpp_source_1l00729"/>00729 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00730"/>00730 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00731"/>00731 
<anchor xml:id="__x_memory___control_8cpp_source_1l00732"/>00732 
<anchor xml:id="__x_memory___control_8cpp_source_1l00746"/>00746 <emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>[](<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;namefile,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)
<anchor xml:id="__x_memory___control_8cpp_source_1l00747"/>00747 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00748"/>00748 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(XMemory_Control.IsActive())
<anchor xml:id="__x_memory___control_8cpp_source_1l00749"/>00749 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00750"/>00750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;XMemory_Control.Assign((<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>)size,&#32;(<emphasis role="keywordtype">char</emphasis>*)namefile,&#32;line);
<anchor xml:id="__x_memory___control_8cpp_source_1l00751"/>00751 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00752"/>00752 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00753"/>00753 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00754"/>00754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;malloc(size);
<anchor xml:id="__x_memory___control_8cpp_source_1l00755"/>00755 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00756"/>00756 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00757"/>00757 
<anchor xml:id="__x_memory___control_8cpp_source_1l00758"/>00758 
<anchor xml:id="__x_memory___control_8cpp_source_1l00770"/>00770 <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>(<emphasis role="keywordtype">void</emphasis>*&#32;ptr)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;()
<anchor xml:id="__x_memory___control_8cpp_source_1l00771"/>00771 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00772"/>00772 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(XMemory_Control.IsActive())
<anchor xml:id="__x_memory___control_8cpp_source_1l00773"/>00773 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00774"/>00774 &#32;&#32;&#32;&#32;&#32;&#32;XMemory_Control.Free(ptr);
<anchor xml:id="__x_memory___control_8cpp_source_1l00775"/>00775 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00776"/>00776 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00777"/>00777 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00778"/>00778 &#32;&#32;&#32;&#32;&#32;&#32;free(ptr);
<anchor xml:id="__x_memory___control_8cpp_source_1l00779"/>00779 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00780"/>00780 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00781"/>00781 
<anchor xml:id="__x_memory___control_8cpp_source_1l00782"/>00782 
<anchor xml:id="__x_memory___control_8cpp_source_1l00794"/>00794 <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>[]&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;()
<anchor xml:id="__x_memory___control_8cpp_source_1l00795"/>00795 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00796"/>00796 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(XMemory_Control.IsActive())
<anchor xml:id="__x_memory___control_8cpp_source_1l00797"/>00797 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00798"/>00798 &#32;&#32;&#32;&#32;&#32;&#32;XMemory_Control.Free(ptr);
<anchor xml:id="__x_memory___control_8cpp_source_1l00799"/>00799 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00800"/>00800 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00801"/>00801 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_memory___control_8cpp_source_1l00802"/>00802 &#32;&#32;&#32;&#32;&#32;&#32;free(ptr);
<anchor xml:id="__x_memory___control_8cpp_source_1l00803"/>00803 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_memory___control_8cpp_source_1l00804"/>00804 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00805"/>00805 
<anchor xml:id="__x_memory___control_8cpp_source_1l00806"/>00806 
<anchor xml:id="__x_memory___control_8cpp_source_1l00807"/>00807 <emphasis role="preprocessor">#define&#32;new&#32;new(GEN_MODULE_EXEC,&#32;GEN_LINE_EXEC)</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00808"/>00808 
<anchor xml:id="__x_memory___control_8cpp_source_1l00809"/>00809 
<anchor xml:id="__x_memory___control_8cpp_source_1l00822"/>00822 <emphasis role="keywordtype">void</emphasis>*&#32;ReAlloc(<emphasis role="keywordtype">void</emphasis>*&#32;assign,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size)
<anchor xml:id="__x_memory___control_8cpp_source_1l00823"/>00823 {
<anchor xml:id="__x_memory___control_8cpp_source_1l00824"/>00824 &#32;&#32;<link linkend="__x_memory___control_8h_1a723adebda3a0f9739b4c7644d3531cb7">FREE</link>((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)assign);
<anchor xml:id="__x_memory___control_8cpp_source_1l00825"/>00825 &#32;&#32;
<anchor xml:id="__x_memory___control_8cpp_source_1l00826"/>00826 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_memory___control_8h_1a3078f3c259e2a871314e3e0194896357">MALLOC</link>(size);
<anchor xml:id="__x_memory___control_8cpp_source_1l00827"/>00827 }
<anchor xml:id="__x_memory___control_8cpp_source_1l00828"/>00828 
<anchor xml:id="__x_memory___control_8cpp_source_1l00829"/>00829 
<anchor xml:id="__x_memory___control_8cpp_source_1l00830"/>00830 <emphasis role="preprocessor">#pragma&#32;endregion</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00831"/>00831 
<anchor xml:id="__x_memory___control_8cpp_source_1l00832"/>00832 
<anchor xml:id="__x_memory___control_8cpp_source_1l00833"/>00833 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__x_memory___control_8cpp_source_1l00834"/>00834 
<anchor xml:id="__x_memory___control_8cpp_source_1l00835"/>00835 
<anchor xml:id="__x_memory___control_8cpp_source_1l00836"/>00836 
</programlisting></section>
