<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source" xml:lang="en-US">
<title>XSTM32_FATSD_SPI.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Platforms/Microcontrollers/STM32/XSTM32_FATSD_SPI.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;CONTROL&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00030"/>00030 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00031"/>00031 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00032"/>00032 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00034"/>00034 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00036"/>00036 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h">XSTM32_FATSD_SPI.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00037"/>00037 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00039"/>00039 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00040"/>00040 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00041"/>00041 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00042"/>00042 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00043"/>00043 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00044"/>00044 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00045"/>00045 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00046"/>00046 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00056"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a57facf92de109e2ab005a9a595bd8035">00056</link> <link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a57facf92de109e2ab005a9a595bd8035">XSTM32_FATSD_SPI::XSTM32_FATSD_SPI</link>()&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00057"/>00057 {&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00058"/>00058 &#32;&#32;Clean();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00059"/>00059 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00060"/>00060 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00061"/>00061 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00062"/>00062 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00073"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1ade10692466872bd7bf1c5ff8781ee2d9">00073</link> <link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1ade10692466872bd7bf1c5ff8781ee2d9">XSTM32_FATSD_SPI::~XSTM32_FATSD_SPI</link>()&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00074"/>00074 {&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00075"/>00075 &#32;&#32;Clean();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00076"/>00076 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00077"/>00077 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00078"/>00078 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00079"/>00079 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00093"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a757f5f80503ed3efa19b5322a0dfc8d7">00093</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a757f5f80503ed3efa19b5322a0dfc8d7">XSTM32_FATSD_SPI::Ini</link>(SPI_HandleTypeDef*&#32;handleSPI,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;GPIOentryID_CS,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;GPIOentryID_switch,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="__x_l_i_n_u_x_system_8cpp_1a493b57f443cc38b3d3df9c1e584d9d82">timeout</link>)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00094"/>00094 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00095"/>00095 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!handleSPI)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00096"/>00096 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00097"/>00097 &#32;&#32;this-&gt;GPIOentryID_CS&#32;&#32;&#32;&#32;&#32;&#32;=&#32;GPIOentryID_CS;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00098"/>00098 &#32;&#32;this-&gt;GPIOentryID_switch&#32;&#32;=&#32;GPIOentryID_switch;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00099"/>00099 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00100"/>00100 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GPIOentryID_CS&#32;&#32;&#32;&#32;&#32;!=&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>)&#32;&#32;&#32;GEN_DIOGPIO.SetMode(GPIOentryID_CS&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="__d_i_o_g_p_i_o_8h_1af43e26d0701212b8857b22becaa4c416">DIOGPIO_MODE_OUTPUT</link>);&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00101"/>00101 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GPIOentryID_switch&#32;!=&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>)&#32;&#32;&#32;GEN_DIOGPIO.SetMode(GPIOentryID_switch&#32;,&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a35602bfdf7d8cd6a558027a378f50041">DIOGPIO_MODE_INPUT</link>);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00102"/>00102 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00103"/>00103 &#32;&#32;this-&gt;handleSPI&#32;=&#32;handleSPI;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00104"/>00104 &#32;&#32;this-&gt;timeout&#32;&#32;&#32;=&#32;<link linkend="__x_l_i_n_u_x_system_8cpp_1a493b57f443cc38b3d3df9c1e584d9d82">timeout</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00105"/>00105 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00106"/>00106 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00107"/>00107 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00108"/>00108 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00109"/>00109 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00110"/>00110 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00120"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a8c12f0d99a4098167353bc21b917018c">00120</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a8c12f0d99a4098167353bc21b917018c">XSTM32_FATSD_SPI::GetGPIOEntryID_CS</link>()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00121"/>00121 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00122"/>00122 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GPIOentryID_CS;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00123"/>00123 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00124"/>00124 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00125"/>00125 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00126"/>00126 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00138"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1aee284e69090a86a9c5a1b84676ccd2d4">00138</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1aee284e69090a86a9c5a1b84676ccd2d4">XSTM32_FATSD_SPI::SetGPIOEntryID_CS</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;GPIOentryID)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00139"/>00139 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00140"/>00140 &#32;&#32;GPIOentryID_CS&#32;=&#32;GPIOentryID;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00141"/>00141 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00142"/>00142 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00144"/>00144 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00154"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1aa6de702f982209643f50fd87e12c0693">00154</link> <link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1aa6de702f982209643f50fd87e12c0693">XSTM32_FATSD_SPI::GetGPIOEntryID_Switch</link>()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00155"/>00155 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00156"/>00156 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GPIOentryID_switch;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00157"/>00157 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00158"/>00158 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00159"/>00159 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00160"/>00160 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00161"/>00161 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00173"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a51e995b5e983ba159bdcd0fd1a640338">00173</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a51e995b5e983ba159bdcd0fd1a640338">XSTM32_FATSD_SPI::SetGPIOEntryID_Switch</link>(<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;GPIOentryID)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00174"/>00174 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00175"/>00175 &#32;&#32;GPIOentryID_switch&#32;=&#32;GPIOentryID;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00176"/>00176 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00177"/>00177 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00178"/>00178 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00179"/>00179 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00189"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1ad9a86e5abe645d9723f4944f398dd44c">00189</link> SPI_HandleTypeDef*&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1ad9a86e5abe645d9723f4944f398dd44c">XSTM32_FATSD_SPI::GetHandleSPI</link>()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00190"/>00190 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00191"/>00191 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleSPI;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00192"/>00192 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00193"/>00193 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00194"/>00194 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00195"/>00195 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00196"/>00196 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00208"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a51066f29afe40b1de444b7b85f3f2d54">00208</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a51066f29afe40b1de444b7b85f3f2d54">XSTM32_FATSD_SPI::SetHandleSPI</link>(SPI_HandleTypeDef*&#32;handleSPI)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00209"/>00209 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00210"/>00210 &#32;&#32;this-&gt;handleSPI&#32;=&#32;handleSPI;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00211"/>00211 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00212"/>00212 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00213"/>00213 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00214"/>00214 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00224"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a4624eb00eea320602ab12c5a2b938a8d">00224</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a4624eb00eea320602ab12c5a2b938a8d">XSTM32_FATSD_SPI::Disk_IsInserted</link>()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00225"/>00225 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00226"/>00226 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GPIOentryID_switch&#32;==&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00227"/>00227 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00228"/>00228 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GEN_DIOGPIO.GetValue(GPIOentryID_switch);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00229"/>00229 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00230"/>00230 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00231"/>00231 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00232"/>00232 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00244"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a3d8b1467193885f3e017eacbb4046026">00244</link> DSTATUS&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a3d8b1467193885f3e017eacbb4046026">XSTM32_FATSD_SPI::Disk_Initialize</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;drive)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00245"/>00245 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00246"/>00246 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;n;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00247"/>00247 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;type;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00248"/>00248 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;ocr[4];
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00249"/>00249 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00250"/>00250 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(drive)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;STA_NOINIT;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00251"/>00251 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;&amp;&#32;STA_NODISK)&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00252"/>00252 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00253"/>00253 &#32;&#32;<emphasis role="comment">//&#32;SD&#32;Power&#32;On&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00254"/>00254 &#32;&#32;SD_PowerOn();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00255"/>00255 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00256"/>00256 &#32;&#32;<emphasis role="comment">//&#32;SPI&#32;Chip&#32;Select&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00257"/>00257 &#32;&#32;CS_Select();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00258"/>00258 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00259"/>00259 &#32;&#32;type&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00260"/>00260 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00261"/>00261 &#32;&#32;<emphasis role="comment">//&#32;Idle&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00262"/>00262 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1aafaa9f000d0fc2a3720d8d3f15a10fc1">XSTM32_FATSD_SPI_CMD0</link>,&#32;0)&#32;==&#32;1)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;timer1&#32;=&#32;100;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ac8ffb2f5bfe8bc93a06fb491931a7f83">XSTM32_FATSD_SPI_CMD8</link>,&#32;0x1AA)&#32;==&#32;1)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SDC&#32;Ver2+&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(n=0;&#32;n&lt;4;&#32;n++)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ocr[n]&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00273"/>00273 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(ocr[2]&#32;==&#32;0x01&#32;&amp;&amp;&#32;ocr[3]&#32;==&#32;0xAA)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2.7-3.6V&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a6fa5eb81b6e5d8e32de4b523fb824d16">XSTM32_FATSD_SPI_CMD55</link>,&#32;0)&#32;&lt;=&#32;1&#32;&amp;&amp;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1aeeb02cecc6925708aeb25a7afd98415b">XSTM32_FATSD_SPI_CMD41</link>,&#32;1UL&#32;&lt;&lt;&#32;30)&#32;==&#32;0)&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;<emphasis role="comment">//&#32;ACMD41&#32;with&#32;HCS&#32;bit&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00278"/>00278 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(timer1);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00280"/>00280 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(timer1&#32;&amp;&amp;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a83200676164221b35b4de8184310c48f">XSTM32_FATSD_SPI_CMD58</link>,&#32;0)&#32;==&#32;0)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;CCS&#32;bit&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(n=0;&#32;n&lt;4;&#32;n++)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ocr[n]&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00288"/>00288 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;=&#32;(ocr[0]&#32;&amp;&#32;0x40)&#32;?&#32;6&#32;:&#32;2;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SDC&#32;Ver1&#32;or&#32;MMC&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;=&#32;(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a6fa5eb81b6e5d8e32de4b523fb824d16">XSTM32_FATSD_SPI_CMD55</link>,&#32;0)&#32;&lt;=&#32;1&#32;&amp;&amp;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1aeeb02cecc6925708aeb25a7afd98415b">XSTM32_FATSD_SPI_CMD41</link>,&#32;0)&#32;&lt;=&#32;1)&#32;?&#32;2&#32;:&#32;1;&#32;<emphasis role="comment">//&#32;SDC&#32;:&#32;MMC&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00297"/>00297 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;<emphasis role="keywordflow">if</emphasis>(type&#32;==&#32;2)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a6fa5eb81b6e5d8e32de4b523fb824d16">XSTM32_FATSD_SPI_CMD55</link>,&#32;0)&#32;&lt;=&#32;1&#32;&amp;&amp;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1aeeb02cecc6925708aeb25a7afd98415b">XSTM32_FATSD_SPI_CMD41</link>,&#32;0)&#32;==&#32;0)&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;<emphasis role="comment">//&#32;ACMD41&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1abd62f15996b505d5d0c492154f59dea9">XSTM32_FATSD_SPI_CMD1</link>,&#32;0)&#32;==&#32;0)&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;<emphasis role="comment">//&#32;CMD1&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00306"/>00306 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(timer1);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00308"/>00308 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!timer1&#32;||&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a25125ae37bd37bad1ad604acf1939c24">XSTM32_FATSD_SPI_CMD16</link>,&#32;512)&#32;!=&#32;0)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00315"/>00315 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00316"/>00316 &#32;&#32;cardtype&#32;=&#32;type;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00317"/>00317 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00318"/>00318 &#32;&#32;CS_Deselect();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00319"/>00319 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00320"/>00320 &#32;&#32;SPI_ReadByte();&#32;<emphasis role="comment">//&#32;Idle&#32;(Release&#32;DO)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00321"/>00321 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00322"/>00322 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(type)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clear&#32;STA_NOINIT&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;status&#32;&amp;=&#32;~STA_NOINIT;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialization&#32;failed&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;SD_PowerOff();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00332"/>00332 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00333"/>00333 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00334"/>00334 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00335"/>00335 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00336"/>00336 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00337"/>00337 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00338"/>00338 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00350"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a33f7b623d82602e71d843e14815dd975">00350</link> DSTATUS&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a33f7b623d82602e71d843e14815dd975">XSTM32_FATSD_SPI::Disk_Status</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;drive)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00351"/>00351 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00352"/>00352 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(drive)&#32;<emphasis role="keywordflow">return</emphasis>&#32;STA_NOINIT;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00353"/>00353 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00354"/>00354 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00355"/>00355 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00356"/>00356 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00357"/>00357 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00358"/>00358 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00373"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a3dbd408bc29e23a8b79e2f67b0433fa5">00373</link> DRESULT&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a3dbd408bc29e23a8b79e2f67b0433fa5">XSTM32_FATSD_SPI::Disk_Read</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;pdrive,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sector,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00374"/>00374 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00375"/>00375 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pdrive&#32;||&#32;!<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>)&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_PARERR;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00376"/>00376 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;&amp;&#32;STA_NOINIT)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_NOTRDY;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00377"/>00377 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00378"/>00378 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(cardtype&#32;&amp;&#32;4))&#32;sector&#32;*=&#32;512;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sector&#32;Byte&#32;addresultsing&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00379"/>00379 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00380"/>00380 &#32;&#32;CS_Select();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00381"/>00381 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00382"/>00382 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>&#32;==&#32;1)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ab4dd7db0cfd814a99d5287b14745f5e6">XSTM32_FATSD_SPI_CMD17</link>,&#32;sector)&#32;==&#32;0)&#32;&amp;&amp;&#32;SD_ReadDataBlock(buffer,&#32;512))&#32;&#32;<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00387"/>00387 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ac167d8024c4703a2e4fb97349e500e65">XSTM32_FATSD_SPI_CMD18</link>,&#32;sector)&#32;==&#32;0)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;<emphasis role="keywordflow">if</emphasis>(!SD_ReadDataBlock(buffer,&#32;512))&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00391"/>00391 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;+=&#32;512;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00393"/>00393 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(--<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00395"/>00395 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;STOP_TRANSMISSION&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1adc77e4da2349826e383adae5d2e4a470">XSTM32_FATSD_SPI_CMD12</link>,&#32;0);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00399"/>00399 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00400"/>00400 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00401"/>00401 &#32;&#32;CS_Deselect();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00402"/>00402 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00403"/>00403 &#32;&#32;SPI_ReadByte();&#32;<emphasis role="comment">//&#32;Idle&#32;Release&#32;DO</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00404"/>00404 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00405"/>00405 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>?RES_ERROR:RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00406"/>00406 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00407"/>00407 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00408"/>00408 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00409"/>00409 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00424"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a97629e76cc36206b196bd22a69318df3">00424</link> DRESULT&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1a97629e76cc36206b196bd22a69318df3">XSTM32_FATSD_SPI::Disk_Write</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;pdrive,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;sector,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00425"/>00425 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00426"/>00426 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pdrive&#32;||&#32;!<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>)&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_PARERR;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00427"/>00427 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;&amp;&#32;STA_NOINIT)&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_NOTRDY;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00428"/>00428 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00429"/>00429 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;&amp;&#32;STA_PROTECT)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_WRPRT;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00430"/>00430 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00431"/>00431 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!(cardtype&#32;&amp;&#32;4))&#32;&#32;&#32;&#32;&#32;sector&#32;*=&#32;512;&#32;<emphasis role="comment">/*&#32;지정&#32;sector를&#32;Byte&#32;addresultsing&#32;단위로&#32;변경&#32;*/</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00432"/>00432 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00433"/>00433 &#32;&#32;CS_Select();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00434"/>00434 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00435"/>00435 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>&#32;==&#32;1)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00436"/>00436 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a0edcf2963865e47006e28ac1e23f2bd2">XSTM32_FATSD_SPI_CMD24</link>,&#32;sector)&#32;==&#32;0)&#32;&amp;&amp;&#32;SD_WriteDataBlock(buffer,&#32;0xFE))&#32;<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00438"/>00438 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00439"/>00439 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00440"/>00440 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(cardtype&#32;&amp;&#32;2)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a6fa5eb81b6e5d8e32de4b523fb824d16">XSTM32_FATSD_SPI_CMD55</link>,&#32;0);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a6f721e2ebd6df0fec2927a9e282438b9">XSTM32_FATSD_SPI_CMD23</link>,&#32;<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>);&#32;<emphasis role="comment">/*&#32;ACMD23&#32;*/</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00446"/>00446 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a796d039969a5d8d26a092c24a8d33c27">XSTM32_FATSD_SPI_CMD25</link>,&#32;sector)&#32;==&#32;0)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;<emphasis role="keywordflow">if</emphasis>(!SD_WriteDataBlock(buffer,&#32;0xFC))&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00450"/>00450 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;+=&#32;512;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00452"/>00452 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(--<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00454"/>00454 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!SD_WriteDataBlock(0,&#32;0xFD))
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>&#32;=&#32;1;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00461"/>00461 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00462"/>00462 &#32;&#32;CS_Deselect();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00463"/>00463 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00464"/>00464 &#32;&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00465"/>00465 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00466"/>00466 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>?RES_ERROR:RES_OK);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00467"/>00467 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00468"/>00468 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00469"/>00469 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00470"/>00470 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00471"/>00471 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00485"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1aa80b5f2b076ab7672dfbd10dcde56f11">00485</link> DRESULT&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1aa80b5f2b076ab7672dfbd10dcde56f11">XSTM32_FATSD_SPI::Disk_IOTCL</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;drive,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;ctrl,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;buffer)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00486"/>00486 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00487"/>00487 &#32;&#32;DRESULT&#32;result;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00488"/>00488 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;n;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00489"/>00489 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;csd[16];
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00490"/>00490 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;&#32;ptr&#32;=&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*)buffer;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00491"/>00491 &#32;&#32;<link linkend="__x_base_8h_1a3f1fe1487089bc987e3d549a9064e653">XWORD</link>&#32;&#32;&#32;csize;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00492"/>00492 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00493"/>00493 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(drive)&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_PARERR;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00494"/>00494 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00495"/>00495 &#32;&#32;result&#32;=&#32;RES_ERROR;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00496"/>00496 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00497"/>00497 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(ctrl&#32;==&#32;CTRL_POWER)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00498"/>00498 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(*ptr)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;&#32;0&#32;:&#32;<emphasis role="keywordflow">if</emphasis>(SD_CheckPower())&#32;&#32;SD_PowerOff();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Power&#32;Off&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00504"/>00504 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;&#32;1&#32;:&#32;SD_PowerOn();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Power&#32;On&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00508"/>00508 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;&#32;2&#32;:&#32;*(ptr&#32;+&#32;1)&#32;=&#32;(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)&#32;SD_CheckPower();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00510"/>00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Power&#32;Check&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00512"/>00512 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;:&#32;result&#32;=&#32;RES_PARERR;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00515"/>00515 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00516"/>00516 &#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00517"/>00517 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(status&#32;&amp;&#32;STA_NOINIT)&#32;<emphasis role="keywordflow">return</emphasis>&#32;RES_NOTRDY;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00519"/>00519 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;CS_Select();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00521"/>00521 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(ctrl)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;GET_SECTOR_COUNT&#32;&#32;&#32;:&#32;<emphasis role="comment">//&#32;SD&#32;Sector&#32;(DWORD)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ab433dca76abe358286a843f1e944213b">XSTM32_FATSD_SPI_CMD9</link>,&#32;0)&#32;==&#32;0)&#32;&amp;&amp;&#32;SD_ReadDataBlock(csd,&#32;16))
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00526"/>00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((csd[0]&#32;&gt;&gt;&#32;6)&#32;==&#32;1)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SDC&#32;ver&#32;2.00&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;csize&#32;=&#32;csd[9]&#32;+&#32;((WORD)&#32;csd[8]&#32;&lt;&lt;&#32;8)&#32;+&#32;1;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00531"/>00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(DWORD*)&#32;buffer&#32;=&#32;(DWORD)&#32;csize&#32;&lt;&lt;&#32;10;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00533"/>00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00534"/>00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00535"/>00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MMC&#32;or&#32;SDC&#32;ver&#32;1.XX&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;(csd[5]&#32;&amp;&#32;15)&#32;+&#32;((csd[10]&#32;&amp;&#32;128)&#32;&gt;&gt;&#32;7)&#32;+&#32;((csd[9]&#32;&amp;&#32;3)&#32;&lt;&lt;&#32;1)&#32;+&#32;2;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;csize&#32;=&#32;(csd[8]&#32;&gt;&gt;&#32;6)&#32;+&#32;((WORD)&#32;csd[7]&#32;&lt;&lt;&#32;2)&#32;+&#32;((WORD)&#32;(csd[6]&#32;&amp;&#32;3)&#32;&lt;&lt;&#32;10)&#32;+&#32;1;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00538"/>00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(DWORD*)&#32;buffer&#32;=&#32;(DWORD)&#32;csize&#32;&lt;&lt;&#32;(n&#32;-&#32;9);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00540"/>00540 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00541"/>00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00542"/>00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00544"/>00544 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00545"/>00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;GET_SECTOR_SIZE&#32;&#32;&#32;&#32;:&#32;<emphasis role="comment">//&#32;(WORD)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(WORD*)&#32;buffer&#32;=&#32;512;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00547"/>00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00549"/>00549 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CTRL_SYNC&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">if</emphasis>(SD_ReadyWait()&#32;==&#32;0xFF)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00551"/>00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00553"/>00553 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;MMC_GET_CSD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="comment">//&#32;CSD&#32;(16&#32;bytes)</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ab433dca76abe358286a843f1e944213b">XSTM32_FATSD_SPI_CMD9</link>,&#32;0)&#32;==&#32;0&#32;&amp;&amp;&#32;SD_ReadDataBlock(ptr,&#32;16))&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00557"/>00557 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;MMC_GET_CID&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="comment">//&#32;CID&#32;&#32;(16&#32;bytes)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00559"/>00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ac19a5745a78ce4ca6abdac9fd8d32106">XSTM32_FATSD_SPI_CMD10</link>,&#32;0)&#32;==&#32;0&#32;&amp;&amp;&#32;SD_ReadDataBlock(ptr,&#32;16))&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00560"/>00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00561"/>00561 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00562"/>00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;MMC_GET_OCR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="comment">//&#32;OCR&#32;(4&#32;bytes)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00563"/>00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_SendCmd(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1a83200676164221b35b4de8184310c48f">XSTM32_FATSD_SPI_CMD58</link>,&#32;0)&#32;==&#32;0)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00565"/>00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;4;&#32;n++)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00566"/>00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00567"/>00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*ptr++&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00568"/>00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00569"/>00569 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00570"/>00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;RES_OK;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00571"/>00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00572"/>00572 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00573"/>00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;&#32;&#32;:&#32;&#32;result&#32;=&#32;RES_PARERR;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00574"/>00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00575"/>00575 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00576"/>00576 &#32;&#32;&#32;&#32;CS_Deselect();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00577"/>00577 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00578"/>00578 &#32;&#32;&#32;&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00579"/>00579 &#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00580"/>00580 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00581"/>00581 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00582"/>00582 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00583"/>00583 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00584"/>00584 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00585"/>00585 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00595"/><link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1af6ec241464f65cd9442d103502f76308">00595</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32___f_a_t_s_d___s_p_i_1af6ec241464f65cd9442d103502f76308">XSTM32_FATSD_SPI::End</link>()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00596"/>00596 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00597"/>00597 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00598"/>00598 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00599"/>00599 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00600"/>00600 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00601"/>00601 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00613"/>00613 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32_FATSD_SPI::CS_Select()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00614"/>00614 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00615"/>00615 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GPIOentryID_CS&#32;==&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00616"/>00616 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00617"/>00617 &#32;&#32;GEN_DIOGPIO.SetValue(GPIOentryID_CS,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00618"/>00618 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00619"/>00619 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00620"/>00620 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00621"/>00621 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00633"/>00633 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32_FATSD_SPI::CS_Deselect()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00634"/>00634 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00635"/>00635 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(GPIOentryID_CS&#32;==&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00636"/>00636 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00637"/>00637 &#32;&#32;GEN_DIOGPIO.SetValue(GPIOentryID_CS,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00638"/>00638 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00639"/>00639 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00640"/>00640 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00641"/>00641 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00642"/>00642 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00652"/>00652 <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;XSTM32_FATSD_SPI::SPI_ReadByte()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00653"/>00653 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00654"/>00654 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;dummy;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00655"/>00655 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00656"/>00656 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00657"/>00657 &#32;&#32;dummy&#32;=&#32;0xFF;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00658"/>00658 &#32;&#32;data&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00659"/>00659 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00660"/>00660 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((HAL_SPI_GetState(handleSPI)&#32;!=&#32;HAL_SPI_STATE_READY));
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00661"/>00661 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00662"/>00662 &#32;&#32;HAL_SPI_TransmitReceive(handleSPI,&#32;&amp;dummy,&#32;&amp;data,&#32;1,&#32;timeout);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00663"/>00663 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00664"/>00664 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00665"/>00665 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00666"/>00666 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00667"/>00667 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00668"/>00668 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00680"/>00680 <emphasis role="keywordtype">bool</emphasis>&#32;XSTM32_FATSD_SPI::SPI_WriteByte(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;data)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00681"/>00681 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00682"/>00682 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!handleSPI)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00683"/>00683 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00684"/>00684 &#32;&#32;<emphasis role="keywordflow">while</emphasis>(HAL_SPI_GetState(handleSPI)&#32;!=&#32;HAL_SPI_STATE_READY);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00685"/>00685 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00686"/>00686 &#32;&#32;HAL_SPI_Transmit(handleSPI,&#32;&amp;data,&#32;1,&#32;timeout);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00687"/>00687 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00688"/>00688 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00689"/>00689 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00690"/>00690 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00691"/>00691 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00703"/>00703 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32_FATSD_SPI::SPI_ReadBytePtr(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00704"/>00704 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00705"/>00705 &#32;&#32;(*buffer)&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00706"/>00706 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00707"/>00707 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00708"/>00708 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00709"/>00709 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00710"/>00710 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00720"/>00720 <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;XSTM32_FATSD_SPI::SD_ReadyWait()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00721"/>00721 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00722"/>00722 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;resultult;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00723"/>00723 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00724"/>00724 &#32;&#32;<emphasis role="comment">//&#32;500ms&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00725"/>00725 &#32;&#32;timer2&#32;=&#32;50;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00726"/>00726 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00727"/>00727 &#32;&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00728"/>00728 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00729"/>00729 &#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;<emphasis role="comment">//&#32;0xFF&#32;SPI&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00730"/>00730 &#32;&#32;&#32;&#32;&#32;&#32;resultult&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00731"/>00731 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00732"/>00732 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;((resultult&#32;!=&#32;0xFF)&#32;&amp;&amp;&#32;timer2);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00733"/>00733 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00734"/>00734 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;resultult;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00735"/>00735 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00736"/>00736 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00737"/>00737 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00738"/>00738 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00748"/>00748 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32_FATSD_SPI::SD_PowerOn()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00749"/>00749 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00750"/>00750 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;&#32;&#32;&#32;&#32;cmd_arg[6];
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00751"/>00751 &#32;&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;&#32;&#32;&#32;<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>&#32;=&#32;0x1FFF;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00752"/>00752 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00753"/>00753 &#32;&#32;CS_Deselect();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00754"/>00754 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00755"/>00755 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;10;&#32;c++)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00756"/>00756 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00757"/>00757 &#32;&#32;&#32;&#32;&#32;&#32;SPI_WriteByte(0xFF);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00758"/>00758 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00759"/>00759 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00760"/>00760 &#32;&#32;<emphasis role="comment">//&#32;SPI&#32;Chips&#32;Select&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00761"/>00761 &#32;&#32;CS_Select();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00762"/>00762 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00763"/>00763 &#32;&#32;<emphasis role="comment">//&#32;GO_IDLE_STATE</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00764"/>00764 &#32;&#32;cmd_arg[0]&#32;=&#32;(<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1aafaa9f000d0fc2a3720d8d3f15a10fc1">XSTM32_FATSD_SPI_CMD0</link>&#32;|&#32;0x40);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00765"/>00765 &#32;&#32;cmd_arg[1]&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00766"/>00766 &#32;&#32;cmd_arg[2]&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00767"/>00767 &#32;&#32;cmd_arg[3]&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00768"/>00768 &#32;&#32;cmd_arg[4]&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00769"/>00769 &#32;&#32;cmd_arg[5]&#32;=&#32;0x95;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00770"/>00770 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00771"/>00771 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00772"/>00772 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;c=0;&#32;c&lt;6;&#32;c++)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00773"/>00773 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00774"/>00774 &#32;&#32;&#32;&#32;&#32;&#32;SPI_WriteByte(cmd_arg[c]);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00775"/>00775 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00776"/>00776 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00777"/>00777 &#32;&#32;<emphasis role="keywordflow">while</emphasis>((SPI_ReadByte()&#32;!=&#32;0x01)&#32;&amp;&amp;&#32;<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00778"/>00778 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00779"/>00779 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__d_i_o_w_i_n_d_o_w_s_notifications_manager_8h_1a6651a982e902850154af16d890039253">count</link>--;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00780"/>00780 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00781"/>00781 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00782"/>00782 &#32;&#32;CS_Deselect();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00783"/>00783 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00784"/>00784 &#32;&#32;SPI_WriteByte(0XFF);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00785"/>00785 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00786"/>00786 &#32;&#32;powerflag&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00787"/>00787 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00788"/>00788 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00789"/>00789 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00790"/>00790 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00791"/>00791 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00801"/>00801 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32_FATSD_SPI::SD_PowerOff()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00802"/>00802 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00803"/>00803 &#32;&#32;powerflag&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00804"/>00804 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00805"/>00805 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00806"/>00806 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00807"/>00807 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00817"/>00817 <emphasis role="keywordtype">bool</emphasis>&#32;XSTM32_FATSD_SPI::SD_CheckPower()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00818"/>00818 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00819"/>00819 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;powerflag;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00820"/>00820 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00821"/>00821 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00822"/>00822 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00823"/>00823 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00824"/>00824 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00837"/>00837 <emphasis role="keywordtype">bool</emphasis>&#32;XSTM32_FATSD_SPI::SD_ReadDataBlock(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;btr)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00838"/>00838 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00839"/>00839 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;token;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00840"/>00840 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00841"/>00841 &#32;&#32;<emphasis role="comment">//&#32;100ms&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00842"/>00842 &#32;&#32;timer1&#32;=&#32;10;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00843"/>00843 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00844"/>00844 &#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;token&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00845"/>00845 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00846"/>00846 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>((token&#32;==&#32;0xFF)&#32;&amp;&amp;&#32;timer1);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00847"/>00847 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00848"/>00848 &#32;&#32;<emphasis role="comment">//&#32;0xFE&#32;Token</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00849"/>00849 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(token&#32;!=&#32;0xFE)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_s_t_m32___h_a_l_8h_1aa93f0eb578d23995850d61f7d61c55c1">FALSE</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00850"/>00850 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00851"/>00851 &#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;SPI_ReadBytePtr(buffer++);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00852"/>00852 &#32;&#32;&#32;&#32;&#32;&#32;SPI_ReadBytePtr(buffer++);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00853"/>00853 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00854"/>00854 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(btr&#32;-=&#32;2);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00855"/>00855 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00856"/>00856 &#32;&#32;SPI_ReadByte();&#32;<emphasis role="comment">//&#32;CRC</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00857"/>00857 &#32;&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00858"/>00858 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00859"/>00859 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_s_t_m32___h_a_l_8h_1aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00860"/>00860 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00861"/>00861 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00862"/>00862 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00863"/>00863 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00864"/>00864 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00877"/>00877 <emphasis role="keywordtype">bool</emphasis>&#32;XSTM32_FATSD_SPI::SD_WriteDataBlock(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;token)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00878"/>00878 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00879"/>00879 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;resultponse;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00880"/>00880 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;wc;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00881"/>00881 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;i&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00882"/>00882 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00883"/>00883 &#32;&#32;<emphasis role="comment">//&#32;SD&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00884"/>00884 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SD_ReadyWait()&#32;!=&#32;0xFF)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_s_t_m32___h_a_l_8h_1aa93f0eb578d23995850d61f7d61c55c1">FALSE</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00885"/>00885 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00886"/>00886 &#32;&#32;SPI_WriteByte(token);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00887"/>00887 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00888"/>00888 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(token&#32;!=&#32;0xFD)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00889"/>00889 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00890"/>00890 &#32;&#32;&#32;&#32;&#32;&#32;wc&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00891"/>00891 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00892"/>00892 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;512&#32;&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00893"/>00893 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>{&#32;SPI_WriteByte(*buffer++);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00894"/>00894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SPI_WriteByte(*buffer++);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00895"/>00895 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00896"/>00896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(--wc);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00897"/>00897 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00898"/>00898 &#32;&#32;&#32;&#32;&#32;&#32;SPI_ReadByte();&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;CRC&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00899"/>00899 &#32;&#32;&#32;&#32;&#32;&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00900"/>00900 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00901"/>00901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(i&#32;&lt;=&#32;64)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00902"/>00902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00903"/>00903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resultponse&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00904"/>00904 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00905"/>00905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((resultponse&#32;&amp;&#32;0x1F)&#32;==&#32;0x05)&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00906"/>00906 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00907"/>00907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00908"/>00908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00909"/>00909 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00910"/>00910 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SPI&#32;Clear&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00911"/>00911 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(SPI_ReadByte()&#32;==&#32;0);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00912"/>00912 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00913"/>00913 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00914"/>00914 &#32;&#32;<emphasis role="keywordflow">if</emphasis>((resultponse&#32;&amp;&#32;0x1F)&#32;==&#32;0x05)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_s_t_m32___h_a_l_8h_1aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</link>;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00915"/>00915 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00916"/>00916 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_s_t_m32___h_a_l_8h_1aa93f0eb578d23995850d61f7d61c55c1">FALSE</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00917"/>00917 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00918"/>00918 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00919"/>00919 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00932"/>00932 <link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;XSTM32_FATSD_SPI::SD_SendCmd(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;cmd,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;arg)
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00933"/>00933 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00934"/>00934 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;crc;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00935"/>00935 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;resultult;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00936"/>00936 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00937"/>00937 &#32;&#32;<emphasis role="comment">//&#32;SD&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00938"/>00938 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(SD_ReadyWait()&#32;!=&#32;0xFF)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0xFF;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00939"/>00939 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00940"/>00940 &#32;&#32;SPI_WriteByte(cmd);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Command&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00941"/>00941 &#32;&#32;SPI_WriteByte((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)&#32;(arg&#32;&gt;&gt;&#32;24));&#32;&#32;&#32;<emphasis role="comment">//&#32;Argument[31..24]&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00942"/>00942 &#32;&#32;SPI_WriteByte((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)&#32;(arg&#32;&gt;&gt;&#32;16));&#32;&#32;&#32;<emphasis role="comment">//&#32;Argument[23..16]&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00943"/>00943 &#32;&#32;SPI_WriteByte((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)&#32;(arg&#32;&gt;&gt;&#32;8));&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Argument[15..8]&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00944"/>00944 &#32;&#32;SPI_WriteByte((<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>)&#32;arg);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Argument[7..0]&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00945"/>00945 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00946"/>00946 &#32;&#32;<emphasis role="comment">//&#32;CRC&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00947"/>00947 &#32;&#32;crc&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00948"/>00948 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(cmd&#32;==&#32;<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1aafaa9f000d0fc2a3720d8d3f15a10fc1">XSTM32_FATSD_SPI_CMD0</link>)&#32;&#32;&#32;crc&#32;=&#32;0x95;&#32;<emphasis role="comment">//&#32;CRC&#32;for&#32;CMD0(0)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00949"/>00949 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(cmd&#32;==&#32;<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1ac8ffb2f5bfe8bc93a06fb491931a7f83">XSTM32_FATSD_SPI_CMD8</link>)&#32;&#32;&#32;crc&#32;=&#32;0x87;&#32;<emphasis role="comment">//&#32;CRC&#32;for&#32;CMD8(0x1AA)&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00950"/>00950 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00951"/>00951 &#32;&#32;<emphasis role="comment">//&#32;CRC&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00952"/>00952 &#32;&#32;SPI_WriteByte(crc);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00953"/>00953 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00954"/>00954 &#32;&#32;<emphasis role="comment">//&#32;CMD12&#32;Stop&#32;Reading&#32;</emphasis>
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00955"/>00955 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cmd&#32;==&#32;<link linkend="__x_s_t_m32___f_a_t_s_d___s_p_i_8h_1adc77e4da2349826e383adae5d2e4a470">XSTM32_FATSD_SPI_CMD12</link>)&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00956"/>00956 &#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00957"/>00957 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;n&#32;=&#32;10;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00958"/>00958 &#32;&#32;<emphasis role="keywordflow">do</emphasis>{
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00959"/>00959 &#32;&#32;&#32;&#32;&#32;&#32;resultult&#32;=&#32;SPI_ReadByte();
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00960"/>00960 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00961"/>00961 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;((resultult&#32;&amp;&#32;0x80)&#32;&amp;&amp;&#32;--n);
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00962"/>00962 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00963"/>00963 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;resultult;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00964"/>00964 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00965"/>00965 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00966"/>00966 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00967"/>00967 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00978"/>00978 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32_FATSD_SPI::Clean()
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00979"/>00979 {
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00980"/>00980 &#32;&#32;GPIOentryID_CS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00981"/>00981 &#32;&#32;GPIOentryID_switch&#32;&#32;&#32;&#32;=&#32;<link linkend="__d_i_o_g_p_i_o_8h_1a488a85f4fab8868ca6503c2f0112744a">DIOGPIO_ID_NOTDEFINED</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00982"/>00982 &#32;&#32;handleSPI&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00983"/>00983 
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00984"/>00984 &#32;&#32;timeout&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00985"/>00985 &#32;&#32;timer1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00986"/>00986 &#32;&#32;timer2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00987"/>00987 &#32;&#32;status&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;STA_NOINIT;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00988"/>00988 &#32;&#32;powerflag&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00989"/>00989 &#32;&#32;cardtype&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00990"/>00990 }
<anchor xml:id="__x_s_t_m32___f_a_t_s_d___s_p_i_8cpp_source_1l00991"/>00991 
</programlisting></section>
