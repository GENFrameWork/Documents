<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_s_t_m32_file_8cpp_source" xml:lang="en-US">
<title>XSTM32File.cpp</title>
<indexterm><primary>D:/Projects/GENFrameWork/GEN/Platforms/Microcontrollers/STM32/XSTM32File.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00001"/>00001 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00029"/>00029 <emphasis role="comment">/*----&#32;PRECOMPILATION&#32;CONTROL&#32;----------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00030"/>00030 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00031"/>00031 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__g_e_n___defines_8h">GEN_Defines.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00032"/>00032 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00033"/>00033 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00034"/>00034 <emphasis role="comment">/*----&#32;INCLUDES&#32;------------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00035"/>00035 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00036"/>00036 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_path_8h">XPath.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_string_8h">XString.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00039"/>00039 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_trace_8h">XTrace.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00040"/>00040 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00041"/>00041 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__cipher_8h">Cipher.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00042"/>00042 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_s_t_m32_file_8h">XSTM32File.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00044"/>00044 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__x_memory___control_8h">XMemory_Control.h</link>&quot;</emphasis>
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00046"/>00046 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00047"/>00047 <emphasis role="comment">/*----&#32;GENERAL&#32;VARIABLE&#32;----------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00048"/>00048 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00049"/>00049 <emphasis role="comment">/*----&#32;CLASS&#32;MEMBERS&#32;-------------------------------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00050"/>00050 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00051"/>00051 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00052"/>00052 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00062"/><link linkend="_class_x_s_t_m32_f_i_l_e_1a694c47fb2fd62c04bc2dc29d6e7588a1">00062</link> <link linkend="_class_x_s_t_m32_f_i_l_e_1a694c47fb2fd62c04bc2dc29d6e7588a1">XSTM32FILE::XSTM32FILE</link>():&#32;<link linkend="_class_x_f_i_l_e">XFILE</link>()
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00063"/>00063 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00064"/>00064 &#32;&#32;Clean();
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00065"/>00065 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00066"/>00066 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;root;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00067"/>00067 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00068"/>00068 &#32;&#32;root&#32;=&#32;<link linkend="__x_string_8h_1a2cbff438813b72648c18c8af875f47c9">__L</link>(<emphasis role="stringliteral">&quot;/&quot;</emphasis>);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00070"/>00070 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbufferexchange;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00071"/>00071 &#32;&#32;root.ConvertToBufferExchange(xbufferexchange);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00072"/>00072 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00073"/>00073 &#32;&#32;fresult&#32;=&#32;f_mount(&amp;userFATFS,&#32;xbufferexchange.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;1);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00075"/>00075 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(fresult&#32;==&#32;FR_OK)&#32;ismount&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00076"/>00076 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00077"/>00077 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00078"/>00078 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00079"/>00079 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00090"/><link linkend="_class_x_s_t_m32_f_i_l_e_1aac2489dfa2f5a76b5c467708f1e1dbb4">00090</link> <link linkend="_class_x_s_t_m32_f_i_l_e_1aac2489dfa2f5a76b5c467708f1e1dbb4">XSTM32FILE::~XSTM32FILE</link>()
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00091"/>00091 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00092"/>00092 &#32;&#32;Clean();
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00093"/>00093 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00094"/>00094 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00095"/>00095 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00096"/>00096 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00108"/><link linkend="_class_x_s_t_m32_f_i_l_e_1ad2f62bce78dd81a81030f71c84c39240">00108</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1ad2f62bce78dd81a81030f71c84c39240">XSTM32FILE::Exist</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;path)
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00109"/>00109 {&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00110"/>00110 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ismount)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00111"/>00111 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00112"/>00112 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;pathstring;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00113"/>00113 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00114"/>00114 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00115"/>00115 &#32;&#32;pathstring&#32;=&#32;path;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00116"/>00116 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pathstring.<link linkend="_class_x_s_t_r_i_n_g_1ad26690161f8c1e2722771322b7370005">IsEmpty</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00117"/>00117 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00118"/>00118 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbufferexchange;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00119"/>00119 &#32;&#32;pathstring.ConvertToBufferExchange(xbufferexchange);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00120"/>00120 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00121"/>00121 &#32;&#32;fresult&#32;=&#32;f_stat(xbufferexchange.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;&amp;fileinfo);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00122"/>00122 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00123"/>00123 &#32;&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=0;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00124"/>00124 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(fresult&#32;==&#32;FR_OK)&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)fileinfo.fsize;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00125"/>00125 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00126"/>00126 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00128"/>00128 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00129"/>00129 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00130"/>00130 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00131"/>00131 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00132"/>00132 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00145"/><link linkend="_class_x_s_t_m32_f_i_l_e_1a34e707282ca2332a5c8d52829d722955">00145</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a34e707282ca2332a5c8d52829d722955">XSTM32FILE::Open</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;path,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isreadonly)
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00146"/>00146 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00147"/>00147 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ismount)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00148"/>00148 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00149"/>00149 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;pathstring;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00150"/>00150 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00151"/>00151 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00152"/>00152 &#32;&#32;pathstring&#32;=&#32;path;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00153"/>00153 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pathstring.<link linkend="_class_x_s_t_r_i_n_g_1ad26690161f8c1e2722771322b7370005">IsEmpty</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00154"/>00154 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00155"/>00155 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;mode&#32;&#32;=&#32;(FA_OPEN_ALWAYS&#32;|&#32;FA_READ);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00157"/>00157 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1af1e2ddc3f6f199069a38df4ca60cc69c">isreadonly</link>)&#32;mode&#32;|=&#32;FA_WRITE;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00159"/>00159 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbufferexchange;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00160"/>00160 &#32;&#32;pathstring.ConvertToBufferExchange(xbufferexchange);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00161"/>00161 &#32;&#32;fresult&#32;=&#32;f_open(&amp;file,&#32;xbufferexchange.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()&#32;,&#32;mode);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00163"/>00163 &#32;&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;0;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00164"/>00164 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(fresult&#32;==&#32;FR_OK)&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)f_size(&amp;file);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00165"/>00165 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00166"/>00166 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00167"/>00167 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_f_i_l_e_1a294add2df94973ab032c4b42c00ccc0b">xpathnamefile</link>&#32;=&#32;path;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00172"/>00172 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00173"/>00173 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00174"/>00174 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00175"/>00175 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00176"/>00176 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00177"/>00177 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00189"/><link linkend="_class_x_s_t_m32_f_i_l_e_1a5b21bd46dddb31a0c29386607baa4401">00189</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a5b21bd46dddb31a0c29386607baa4401">XSTM32FILE::Create</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;path)
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00190"/>00190 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00191"/>00191 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ismount)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00192"/>00192 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00193"/>00193 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;pathstring;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00194"/>00194 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00195"/>00195 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00196"/>00196 &#32;&#32;pathstring&#32;=&#32;path;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00197"/>00197 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pathstring.<link linkend="_class_x_s_t_r_i_n_g_1ad26690161f8c1e2722771322b7370005">IsEmpty</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00198"/>00198 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00199"/>00199 &#32;&#32;<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>&#32;mode&#32;&#32;=&#32;(FA_CREATE_ALWAYS&#32;|&#32;FA_CREATE_ALWAYS&#32;|&#32;FA_READ&#32;|&#32;FA_WRITE);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00200"/>00200 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00201"/>00201 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbufferexchange;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00202"/>00202 &#32;&#32;pathstring.ConvertToBufferExchange(xbufferexchange);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00203"/>00203 &#32;&#32;fresult&#32;=&#32;f_open(&amp;file,&#32;xbufferexchange.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>()&#32;,&#32;mode);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00205"/>00205 &#32;&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;0;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00206"/>00206 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00207"/>00207 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00208"/>00208 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_f_i_l_e_1a294add2df94973ab032c4b42c00ccc0b">xpathnamefile</link>&#32;=&#32;path;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00213"/>00213 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00214"/>00214 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00215"/>00215 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00216"/>00216 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00217"/>00217 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00218"/>00218 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00230"/><link linkend="_class_x_s_t_m32_f_i_l_e_1a362a80b50668eb3c66c31439d3d3251d">00230</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a362a80b50668eb3c66c31439d3d3251d">XSTM32FILE::SetSize</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;size)
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00231"/>00231 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00232"/>00232 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00233"/>00233 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_class_x_f_i_l_e_1af1e2ddc3f6f199069a38df4ca60cc69c">isreadonly</link>)&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00234"/>00234 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00235"/>00235 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_s_t_m32_f_i_l_e_1ae7642ac7ff527c9573d911147a74bc48">SetPosition</link>(size))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00236"/>00236 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00237"/>00237 &#32;&#32;fresult&#32;=&#32;f_truncate(&amp;file);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00238"/>00238 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(fresult&#32;==&#32;FR_OK)&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)f_size(&amp;file);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00239"/>00239 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00240"/>00240 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00241"/>00241 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00242"/>00242 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00243"/>00243 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00244"/>00244 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00245"/>00245 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00257"/><link linkend="_class_x_s_t_m32_f_i_l_e_1aa815aa39e57d748ae93db0ae8556a177">00257</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1aa815aa39e57d748ae93db0ae8556a177">XSTM32FILE::GetPosition</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&amp;&#32;position)
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00258"/>00258 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00259"/>00259 &#32;&#32;position&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00260"/>00260 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00261"/>00261 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00263"/>00263 &#32;&#32;<link linkend="__x_s_t_m32_dir_8h_1a3fc0992ad7436250b6b1a0592214b7f2">FSIZE_t</link>&#32;_position&#32;=&#32;f_tell(&amp;file);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00264"/>00264 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00265"/>00265 &#32;&#32;position&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)_position;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00266"/>00266 &#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00267"/>00267 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00268"/>00268 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00269"/>00269 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00270"/>00270 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00271"/>00271 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00283"/><link linkend="_class_x_s_t_m32_f_i_l_e_1ae7642ac7ff527c9573d911147a74bc48">00283</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1ae7642ac7ff527c9573d911147a74bc48">XSTM32FILE::SetPosition</link>(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>&#32;position)
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00284"/>00284 {&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00285"/>00285 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00286"/>00286 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00287"/>00287 &#32;&#32;<link linkend="__x_s_t_m32_dir_8h_1a3fc0992ad7436250b6b1a0592214b7f2">FSIZE_t</link>&#32;&#32;&#32;_position&#32;&#32;=&#32;(<link linkend="__x_s_t_m32_dir_8h_1a3fc0992ad7436250b6b1a0592214b7f2">FSIZE_t</link>)position;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00288"/>00288 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;status&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00289"/>00289 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00290"/>00290 &#32;&#32;fresult&#32;=&#32;f_lseek&#32;(&amp;file,&#32;_position);&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00291"/>00291 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00292"/>00292 &#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00293"/>00293 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00294"/>00294 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00295"/>00295 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00296"/>00296 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00297"/>00297 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00311"/><link linkend="_class_x_s_t_m32_f_i_l_e_1ade9a4531298dab229775a0e1a68f7401">00311</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1ade9a4531298dab229775a0e1a68f7401">XSTM32FILE::Read</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,&#32;<link linkend="_class_c_i_p_h_e_r">CIPHER</link>*&#32;cipher)
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00312"/>00312 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00313"/>00313 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00314"/>00314 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00315"/>00315 &#32;&#32;UINT&#32;&#32;sizetoread&#32;=&#32;(UINT)size;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00316"/>00316 &#32;&#32;UINT&#32;&#32;readsize&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00317"/>00317 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;status&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00318"/>00318 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00319"/>00319 &#32;&#32;fresult&#32;=&#32;f_read(&amp;file,&#32;(<emphasis role="keywordtype">void</emphasis>*)buffer,&#32;sizetoread,&#32;&amp;readsize);&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00320"/>00320 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00321"/>00321 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;status&#32;=&#32;(sizetoread&#32;==&#32;readsize);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00322"/>00322 &#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00323"/>00323 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00324"/>00324 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00325"/>00325 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00326"/>00326 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00327"/>00327 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00341"/><link linkend="_class_x_s_t_m32_f_i_l_e_1a030e9be633fd81be876fe27b2011de09">00341</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1ade9a4531298dab229775a0e1a68f7401">XSTM32FILE::Read</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>*&#32;size,&#32;<link linkend="_class_c_i_p_h_e_r">CIPHER</link>*&#32;cipher)
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00342"/>00342 {&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00343"/>00343 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00344"/>00344 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00345"/>00345 &#32;&#32;UINT&#32;&#32;sizetoread&#32;=&#32;(UINT)(*size);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00346"/>00346 &#32;&#32;UINT&#32;&#32;readsize&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00347"/>00347 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;status&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00348"/>00348 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00349"/>00349 &#32;&#32;(*size)&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00350"/>00350 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00351"/>00351 &#32;&#32;fresult&#32;=&#32;f_read(&amp;file,&#32;(<emphasis role="keywordtype">void</emphasis>*)buffer,&#32;sizetoread,&#32;&amp;readsize);&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00352"/>00352 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00353"/>00353 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00354"/>00354 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;(*size)&#32;=&#32;readsize;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00355"/>00355 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00356"/>00356 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00357"/>00357 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00358"/>00358 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00359"/>00359 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00360"/>00360 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00374"/><link linkend="_class_x_s_t_m32_f_i_l_e_1a1e226894d1195a2aeba846bf3cd9933a">00374</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a1e226894d1195a2aeba846bf3cd9933a">XSTM32FILE::Write</link>(<link linkend="__x_base_8h_1a7ba3d378cab4450418bec78e604d47da">XBYTE</link>*&#32;buffer,&#32;<link linkend="__x_base_8h_1a0e5b572e67f127f1afb599e257c539cf">XDWORD</link>&#32;size,&#32;<link linkend="_class_c_i_p_h_e_r">CIPHER</link>*&#32;cipher)
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00375"/>00375 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00376"/>00376 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00377"/>00377 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00378"/>00378 &#32;&#32;UINT&#32;&#32;sizetowrite&#32;=&#32;(UINT)size;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00379"/>00379 &#32;&#32;UINT&#32;&#32;writesize&#32;&#32;&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00380"/>00380 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;status&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00382"/>00382 &#32;&#32;fresult&#32;=&#32;f_write(&amp;file,&#32;(<emphasis role="keywordtype">void</emphasis>*)buffer,&#32;sizetowrite,&#32;&amp;writesize);&#32;<emphasis role="comment">/*&#32;Write&#32;data&#32;to&#32;the&#32;file&#32;*/</emphasis>
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00383"/>00383 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00384"/>00384 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00385"/>00385 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;{
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)f_size(&amp;file);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;(sizetowrite&#32;==&#32;writesize);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00389"/>00389 &#32;&#32;&#32;&#32;}
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00390"/>00390 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00391"/>00391 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00392"/>00392 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00393"/>00393 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00394"/>00394 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00395"/>00395 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00405"/><link linkend="_class_x_s_t_m32_f_i_l_e_1a042db5bf166b71a4f101d9752439f840">00405</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a042db5bf166b71a4f101d9752439f840">XSTM32FILE::Flush</link>()
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00406"/>00406 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00407"/>00407 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00408"/>00408 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00409"/>00409 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00410"/>00410 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00411"/>00411 &#32;&#32;fresult&#32;=&#32;f_sync(&amp;file);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00412"/>00412 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00413"/>00413 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(status)&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;(<link linkend="__x_base_8h_1a86128ef639d896f7b12288868ddb7ad5">XQWORD</link>)f_size(&amp;file);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00414"/>00414 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00415"/>00415 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00416"/>00416 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00417"/>00417 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00418"/>00418 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00419"/>00419 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00429"/><link linkend="_class_x_s_t_m32_f_i_l_e_1a81e86a9caa0f2472838e69e13155abca">00429</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a81e86a9caa0f2472838e69e13155abca">XSTM32FILE::Close</link>()
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00430"/>00430 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00431"/>00431 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00432"/>00432 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00433"/>00433 &#32;&#32;fresult&#32;=&#32;f_close(&amp;file);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00434"/>00434 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00435"/>00435 &#32;&#32;<link linkend="_class_x_f_i_l_e_1a294add2df94973ab032c4b42c00ccc0b">xpathnamefile</link>.<link linkend="_class_x_s_t_r_i_n_g_1a9275997c1605fa79646c301e63a77d06">Empty</link>();
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00436"/>00436 &#32;&#32;<link linkend="_class_x_f_i_l_e_1a25a6f73c50fb4b848fc725688e3ff977">isopen</link>&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00437"/>00437 &#32;&#32;<link linkend="_class_x_f_i_l_e_1a308f8e8f12d4d365550068b2049687d5">cachesize</link>&#32;=&#32;0;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00438"/>00438 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00439"/>00439 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00440"/>00440 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00441"/>00441 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00442"/>00442 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00443"/>00443 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00456"/><link linkend="_class_x_s_t_m32_f_i_l_e_1ad1e8162425c4b840e12b46c70917f278">00456</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1ad1e8162425c4b840e12b46c70917f278">XSTM32FILE::Erase</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;path,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;overwrite)
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00457"/>00457 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00458"/>00458 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ismount)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00459"/>00459 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00460"/>00460 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;pathstring;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00461"/>00461 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00462"/>00462 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00463"/>00463 &#32;&#32;pathstring&#32;=&#32;path;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00464"/>00464 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(pathstring.<link linkend="_class_x_s_t_r_i_n_g_1ad26690161f8c1e2722771322b7370005">IsEmpty</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00465"/>00465 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00466"/>00466 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbufferexchange;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00467"/>00467 &#32;&#32;pathstring.ConvertToBufferExchange(xbufferexchange);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00468"/>00468 &#32;&#32;fresult&#32;=&#32;f_unlink(xbufferexchange.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>());
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00469"/>00469 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00470"/>00470 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00471"/>00471 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00472"/>00472 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00473"/>00473 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00474"/>00474 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00475"/>00475 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00476"/>00476 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00489"/><link linkend="_class_x_s_t_m32_f_i_l_e_1a96eb3317e825349d309579e2daaa76bd">00489</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a96eb3317e825349d309579e2daaa76bd">XSTM32FILE::Rename</link>(<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;pathold,&#32;<link linkend="__x_string_8h_1a03209152a681f02e4ba73b6681dd4968">XCHAR</link>*&#32;pathnew)
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00490"/>00490 {&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00491"/>00491 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!ismount)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00492"/>00492 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00493"/>00493 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;&#32;&#32;pathold_str;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00494"/>00494 &#32;&#32;<link linkend="_class_x_s_t_r_i_n_g">XSTRING</link>&#32;&#32;&#32;pathnew_str;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00495"/>00495 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00496"/>00496 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00497"/>00497 &#32;&#32;pathold_str&#32;=&#32;pathold;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00498"/>00498 &#32;&#32;pathnew_str&#32;=&#32;pathnew;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00499"/>00499 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00500"/>00500 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbufferexchange_pathold;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00501"/>00501 &#32;&#32;<link linkend="_class_x_b_u_f_f_e_r">XBUFFER</link>&#32;xbufferexchange_pathnew;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00502"/>00502 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00503"/>00503 &#32;&#32;pathold_str.ConvertToBufferExchange(xbufferexchange_pathold);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00504"/>00504 &#32;&#32;pathnew_str.ConvertToBufferExchange(xbufferexchange_pathnew);
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00506"/>00506 &#32;&#32;fresult&#32;=&#32;f_rename(xbufferexchange_pathold.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>(),&#32;xbufferexchange_pathnew.<link linkend="_class_x_b_u_f_f_e_r_1a59d2c2b8d1c32098920f5d3eba0a5971">Get</link>());&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00507"/>00507 &#32;&#32;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00508"/>00508 &#32;&#32;status&#32;=&#32;(fresult&#32;==&#32;FR_OK)?<emphasis role="keyword">true</emphasis>:<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00509"/>00509 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00510"/>00510 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00511"/>00511 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00512"/>00512 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00513"/>00513 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00514"/>00514 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00515"/>00515 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00525"/><link linkend="_class_x_s_t_m32_f_i_l_e_1a671cb52dc09360133472b06466e95c69">00525</link> FILE*&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a671cb52dc09360133472b06466e95c69">XSTM32FILE::CreateStructHandle</link>()
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00526"/>00526 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00527"/>00527 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__x_base_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00528"/>00528 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00529"/>00529 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00530"/>00530 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00531"/>00531 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00541"/><link linkend="_class_x_s_t_m32_f_i_l_e_1a08547cf38cb1dbe1b961237024cd7d51">00541</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a08547cf38cb1dbe1b961237024cd7d51">XSTM32FILE::DeleteStructHandle</link>()
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00542"/>00542 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00543"/>00543 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00544"/>00544 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00545"/>00545 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00546"/>00546 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00547"/>00547 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00557"/><link linkend="_class_x_s_t_m32_f_i_l_e_1a8461e08f9456aefe2b355cfd4638b3f4">00557</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1a8461e08f9456aefe2b355cfd4638b3f4">XSTM32FILE::ActualizeSize</link>()
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00558"/>00558 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00559"/>00559 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_x_s_t_m32_f_i_l_e_1ad2f62bce78dd81a81030f71c84c39240">Exist</link>(<link linkend="_class_x_f_i_l_e_1a294add2df94973ab032c4b42c00ccc0b">xpathnamefile</link>.<link linkend="_class_x_s_t_r_i_n_g_1ad1470753a96f93e2feb3ee54e6fef95f">Get</link>());
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00560"/>00560 }
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00561"/>00561 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00562"/>00562 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00563"/>00563 
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00574"/>00574 <emphasis role="keywordtype">void</emphasis>&#32;XSTM32FILE::Clean()
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00575"/>00575 {
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00576"/>00576 &#32;&#32;memset(&amp;userFATFS,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(FATFS));
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00577"/>00577 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00578"/>00578 &#32;&#32;fresult&#32;=&#32;FR_OK;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00579"/>00579 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00580"/>00580 &#32;&#32;memset(&amp;file,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(FIL));
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00581"/>00581 &#32;&#32;memset(&amp;fileinfo,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(FILINFO));
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00582"/>00582 &#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00583"/>00583 &#32;&#32;ismount&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;
<anchor xml:id="__x_s_t_m32_file_8cpp_source_1l00584"/>00584 }
</programlisting></section>
